// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     cam_package/CLASS.cc.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#include "./double_sphere_camera_cal.h"

// Camera operation implementations
namespace sym {

template <typename Scalar>
Eigen::Matrix<Scalar, 2, 1> DoubleSphereCameraCal<Scalar>::FocalLength() const {
  // Total ops: 0

  // Input arrays
  const Eigen::Matrix<Scalar, 6, 1>& _self = Data();

  // Intermediate terms (0)

  // Output terms (1)
  Eigen::Matrix<Scalar, 2, 1> _focal_length;

  _focal_length(0, 0) = _self[0];
  _focal_length(1, 0) = _self[1];

  return _focal_length;
}

template <typename Scalar>
Eigen::Matrix<Scalar, 2, 1> DoubleSphereCameraCal<Scalar>::PrincipalPoint() const {
  // Total ops: 0

  // Input arrays
  const Eigen::Matrix<Scalar, 6, 1>& _self = Data();

  // Intermediate terms (0)

  // Output terms (1)
  Eigen::Matrix<Scalar, 2, 1> _principal_point;

  _principal_point(0, 0) = _self[2];
  _principal_point(1, 0) = _self[3];

  return _principal_point;
}

template <typename Scalar>
Eigen::Matrix<Scalar, 2, 1> DoubleSphereCameraCal<Scalar>::PixelFromCameraPoint(
    const Eigen::Matrix<Scalar, 3, 1>& point, const Scalar epsilon, Scalar* const is_valid) const {
  // Total ops: 74

  // Input arrays
  const Eigen::Matrix<Scalar, 6, 1>& _self = Data();

  // Intermediate terms (13)
  const Scalar _tmp0 = std::pow(epsilon, Scalar(2)) + std::pow(point(0, 0), Scalar(2)) +
                       std::pow(point(1, 0), Scalar(2));
  const Scalar _tmp1 = std::sqrt(Scalar(_tmp0 + std::pow(point(2, 0), Scalar(2))));
  const Scalar _tmp2 = _self[4] * _tmp1 + point(2, 0);
  const Scalar _tmp3 =
      std::min<Scalar>(0, (((_self[5] + Scalar(-0.5)) > 0) - ((_self[5] + Scalar(-0.5)) < 0)));
  const Scalar _tmp4 = 2 * _tmp3;
  const Scalar _tmp5 = _self[5] - epsilon * (_tmp4 + 1);
  const Scalar _tmp6 = -_tmp5;
  const Scalar _tmp7 =
      Scalar(1.0) /
      (std::max<Scalar>(epsilon,
                        std::fabs(_tmp2 * (_tmp6 + 1) +
                                  _tmp5 * std::sqrt(Scalar(_tmp0 + std::pow(_tmp2, Scalar(2)))))));
  const Scalar _tmp8 = _tmp3 + _tmp5;
  const Scalar _tmp9 = (Scalar(1) / Scalar(2)) * _tmp4 + _tmp6 + 1;
  const Scalar _tmp10 = std::pow(_self[4], Scalar(2));
  const Scalar _tmp11 = std::pow(_tmp9, Scalar(2)) / std::pow(_tmp8, Scalar(2));
  const Scalar _tmp12 = _tmp10 * _tmp11 - _tmp10 + 1;

  // Output terms (2)
  Eigen::Matrix<Scalar, 2, 1> _pixel;

  _pixel(0, 0) = _self[0] * _tmp7 * point(0, 0) + _self[2];
  _pixel(1, 0) = _self[1] * _tmp7 * point(1, 0) + _self[3];

  if (is_valid != nullptr) {
    Scalar& _is_valid = (*is_valid);

    _is_valid = std::max<Scalar>(
        0, std::min<Scalar>(
               std::max<Scalar>(-(((_self[4] - 1) > 0) - ((_self[4] - 1) < 0)),
                                1 - std::max<Scalar>(0, -(((_self[4] * point(2, 0) + _tmp1) > 0) -
                                                          ((_self[4] * point(2, 0) + _tmp1) < 0)))),
               std::max<Scalar>(
                   -(((_tmp12) > 0) - ((_tmp12) < 0)),
                   1 - std::max<Scalar>(0, -(((-_tmp1 * (_self[4] * _tmp11 - _self[4] -
                                                         _tmp9 *
                                                             std::sqrt(Scalar(std::max<Scalar>(
                                                                 _tmp12, std::sqrt(epsilon)))) /
                                                             _tmp8) +
                                               point(2, 0)) > 0) -
                                             ((-_tmp1 * (_self[4] * _tmp11 - _self[4] -
                                                         _tmp9 *
                                                             std::sqrt(Scalar(std::max<Scalar>(
                                                                 _tmp12, std::sqrt(epsilon)))) /
                                                             _tmp8) +
                                               point(2, 0)) < 0))))));
  }

  return _pixel;
}

template <typename Scalar>
Eigen::Matrix<Scalar, 2, 1> DoubleSphereCameraCal<Scalar>::PixelFromCameraPointWithJacobians(
    const Eigen::Matrix<Scalar, 3, 1>& point, const Scalar epsilon, Scalar* const is_valid,
    Eigen::Matrix<Scalar, 2, 6>* const pixel_D_cal,
    Eigen::Matrix<Scalar, 2, 3>* const pixel_D_point) const {
  // Total ops: 157

  // Input arrays
  const Eigen::Matrix<Scalar, 6, 1>& _self = Data();

  // Intermediate terms (46)
  const Scalar _tmp0 = std::pow(epsilon, Scalar(2)) + std::pow(point(0, 0), Scalar(2)) +
                       std::pow(point(1, 0), Scalar(2));
  const Scalar _tmp1 = std::sqrt(Scalar(_tmp0 + std::pow(point(2, 0), Scalar(2))));
  const Scalar _tmp2 = _self[4] * _tmp1 + point(2, 0);
  const Scalar _tmp3 = std::sqrt(Scalar(_tmp0 + std::pow(_tmp2, Scalar(2))));
  const Scalar _tmp4 =
      std::min<Scalar>(0, (((_self[5] + Scalar(-0.5)) > 0) - ((_self[5] + Scalar(-0.5)) < 0)));
  const Scalar _tmp5 = 2 * _tmp4;
  const Scalar _tmp6 = _self[5] - epsilon * (_tmp5 + 1);
  const Scalar _tmp7 = -_tmp6;
  const Scalar _tmp8 = _tmp7 + 1;
  const Scalar _tmp9 = _tmp2 * _tmp8 + _tmp3 * _tmp6;
  const Scalar _tmp10 = std::fabs(_tmp9);
  const Scalar _tmp11 = std::max<Scalar>(_tmp10, epsilon);
  const Scalar _tmp12 = Scalar(1.0) / (_tmp11);
  const Scalar _tmp13 = _self[0] * _tmp12;
  const Scalar _tmp14 = _self[1] * _tmp12;
  const Scalar _tmp15 = _self[4] * point(2, 0);
  const Scalar _tmp16 = _tmp4 + _tmp6;
  const Scalar _tmp17 = (Scalar(1) / Scalar(2)) * _tmp5 + _tmp7 + 1;
  const Scalar _tmp18 = std::pow(_self[4], Scalar(2));
  const Scalar _tmp19 = std::pow(_tmp17, Scalar(2)) / std::pow(_tmp16, Scalar(2));
  const Scalar _tmp20 = _tmp18 * _tmp19 - _tmp18 + 1;
  const Scalar _tmp21 = _self[5] - 2 * epsilon * (_tmp4 + Scalar(1) / Scalar(2));
  const Scalar _tmp22 = _tmp21 - 1;
  const Scalar _tmp23 = _tmp2 * _tmp22 - _tmp21 * _tmp3;
  const Scalar _tmp24 = std::fabs(_tmp23);
  const Scalar _tmp25 = std::max<Scalar>(_tmp24, epsilon);
  const Scalar _tmp26 = Scalar(1.0) / (_tmp25);
  const Scalar _tmp27 = (Scalar(1) / Scalar(2)) * _self[0] * point(0, 0);
  const Scalar _tmp28 = Scalar(1.0) / (_tmp3);
  const Scalar _tmp29 = _tmp2 * _tmp28;
  const Scalar _tmp30 = ((((-_tmp24 + epsilon) > 0) - ((-_tmp24 + epsilon) < 0)) - 1) *
                        (((_tmp23) > 0) - ((_tmp23) < 0)) / std::pow(_tmp25, Scalar(2));
  const Scalar _tmp31 = _tmp30 * (-_tmp1 * _tmp21 * _tmp29 + _tmp1 * _tmp22);
  const Scalar _tmp32 = (Scalar(1) / Scalar(2)) * _self[1] * point(1, 0);
  const Scalar _tmp33 = _tmp30 * (_tmp2 - _tmp3);
  const Scalar _tmp34 = Scalar(1.0) / (_tmp1);
  const Scalar _tmp35 = _self[4] * _tmp34;
  const Scalar _tmp36 = _tmp35 * _tmp8;
  const Scalar _tmp37 = 2 * point(0, 0);
  const Scalar _tmp38 = _tmp2 * _tmp35;
  const Scalar _tmp39 = (Scalar(1) / Scalar(2)) * _tmp28 * _tmp6;
  const Scalar _tmp40 = ((((_tmp10 - epsilon) > 0) - ((_tmp10 - epsilon) < 0)) + 1) *
                        (((_tmp9) > 0) - ((_tmp9) < 0)) / std::pow(_tmp11, Scalar(2));
  const Scalar _tmp41 = _tmp40 * (_tmp36 * point(0, 0) + _tmp39 * (_tmp37 * _tmp38 + _tmp37));
  const Scalar _tmp42 = 2 * point(1, 0);
  const Scalar _tmp43 = _tmp40 * (_tmp36 * point(1, 0) + _tmp39 * (_tmp38 * _tmp42 + _tmp42));
  const Scalar _tmp44 = _tmp15 * _tmp34 + 1;
  const Scalar _tmp45 = _tmp40 * (_tmp29 * _tmp44 * _tmp6 + _tmp44 * _tmp8);

  // Output terms (4)
  Eigen::Matrix<Scalar, 2, 1> _pixel;

  _pixel(0, 0) = _self[2] + _tmp13 * point(0, 0);
  _pixel(1, 0) = _self[3] + _tmp14 * point(1, 0);

  if (is_valid != nullptr) {
    Scalar& _is_valid = (*is_valid);

    _is_valid = std::max<Scalar>(
        0, std::min<Scalar>(
               std::max<Scalar>(
                   -(((_self[4] - 1) > 0) - ((_self[4] - 1) < 0)),
                   1 - std::max<Scalar>(0, -(((_tmp1 + _tmp15) > 0) - ((_tmp1 + _tmp15) < 0)))),
               std::max<Scalar>(
                   -(((_tmp20) > 0) - ((_tmp20) < 0)),
                   1 - std::max<Scalar>(
                           0, -(((-_tmp1 *
                                      (_self[4] * _tmp19 - _self[4] -
                                       _tmp17 *
                                           std::sqrt(Scalar(
                                               std::max<Scalar>(_tmp20, std::sqrt(epsilon)))) /
                                           _tmp16) +
                                  point(2, 0)) > 0) -
                                ((-_tmp1 *
                                      (_self[4] * _tmp19 - _self[4] -
                                       _tmp17 *
                                           std::sqrt(Scalar(
                                               std::max<Scalar>(_tmp20, std::sqrt(epsilon)))) /
                                           _tmp16) +
                                  point(2, 0)) < 0))))));
  }

  if (pixel_D_cal != nullptr) {
    Eigen::Matrix<Scalar, 2, 6>& _pixel_D_cal = (*pixel_D_cal);

    _pixel_D_cal(0, 0) = _tmp26 * point(0, 0);
    _pixel_D_cal(1, 0) = 0;
    _pixel_D_cal(0, 1) = 0;
    _pixel_D_cal(1, 1) = _tmp26 * point(1, 0);
    _pixel_D_cal(0, 2) = 1;
    _pixel_D_cal(1, 2) = 0;
    _pixel_D_cal(0, 3) = 0;
    _pixel_D_cal(1, 3) = 1;
    _pixel_D_cal(0, 4) = _tmp27 * _tmp31;
    _pixel_D_cal(1, 4) = _tmp31 * _tmp32;
    _pixel_D_cal(0, 5) = _tmp27 * _tmp33;
    _pixel_D_cal(1, 5) = _tmp32 * _tmp33;
  }

  if (pixel_D_point != nullptr) {
    Eigen::Matrix<Scalar, 2, 3>& _pixel_D_point = (*pixel_D_point);

    _pixel_D_point(0, 0) = _tmp13 - _tmp27 * _tmp41;
    _pixel_D_point(1, 0) = -_tmp32 * _tmp41;
    _pixel_D_point(0, 1) = -_tmp27 * _tmp43;
    _pixel_D_point(1, 1) = _tmp14 - _tmp32 * _tmp43;
    _pixel_D_point(0, 2) = -_tmp27 * _tmp45;
    _pixel_D_point(1, 2) = -_tmp32 * _tmp45;
  }

  return _pixel;
}

template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> DoubleSphereCameraCal<Scalar>::CameraRayFromPixel(
    const Eigen::Matrix<Scalar, 2, 1>& pixel, const Scalar epsilon, Scalar* const is_valid) const {
  // Total ops: 62

  // Input arrays
  const Eigen::Matrix<Scalar, 6, 1>& _self = Data();

  // Intermediate terms (12)
  const Scalar _tmp0 = -_self[2] + pixel(0, 0);
  const Scalar _tmp1 = -_self[3] + pixel(1, 0);
  const Scalar _tmp2 = std::pow(_tmp1, Scalar(2)) / std::pow(_self[1], Scalar(2)) +
                       std::pow(_tmp0, Scalar(2)) / std::pow(_self[0], Scalar(2));
  const Scalar _tmp3 = -std::pow(_self[5], Scalar(2)) * _tmp2 + 1;
  const Scalar _tmp4 = -_tmp2 * (2 * _self[5] - 1) + 1;
  const Scalar _tmp5 =
      _self[5] * std::sqrt(Scalar(std::max<Scalar>(_tmp4, epsilon))) - _self[5] + 1;
  const Scalar _tmp6 =
      _tmp5 + epsilon * (2 * std::min<Scalar>(0, (((_tmp5) > 0) - ((_tmp5) < 0))) + 1);
  const Scalar _tmp7 = std::pow(_tmp3, Scalar(2)) / std::pow(_tmp6, Scalar(2));
  const Scalar _tmp8 = _tmp2 + _tmp7;
  const Scalar _tmp9 = _tmp3 / _tmp6;
  const Scalar _tmp10 = _tmp2 * (1 - std::pow(_self[4], Scalar(2))) + _tmp7;
  const Scalar _tmp11 =
      (_self[4] * _tmp9 + std::sqrt(Scalar(std::max<Scalar>(_tmp10, epsilon)))) /
      (_tmp8 + epsilon * (2 * std::min<Scalar>(0, (((_tmp8) > 0) - ((_tmp8) < 0))) + 1));

  // Output terms (2)
  Eigen::Matrix<Scalar, 3, 1> _camera_ray;

  _camera_ray(0, 0) = _tmp0 * _tmp11 / _self[0];
  _camera_ray(1, 0) = _tmp1 * _tmp11 / _self[1];
  _camera_ray(2, 0) = -_self[4] + _tmp11 * _tmp9;

  if (is_valid != nullptr) {
    Scalar& _is_valid = (*is_valid);

    _is_valid = std::min<Scalar>(1 - std::max<Scalar>(0, -(((_tmp10) > 0) - ((_tmp10) < 0))),
                                 1 - std::max<Scalar>(0, -(((_tmp4) > 0) - ((_tmp4) < 0))));
  }

  return _camera_ray;
}

template <typename Scalar>
Eigen::Matrix<Scalar, 3, 1> DoubleSphereCameraCal<Scalar>::CameraRayFromPixelWithJacobians(
    const Eigen::Matrix<Scalar, 2, 1>& pixel, const Scalar epsilon, Scalar* const is_valid,
    Eigen::Matrix<Scalar, 3, 6>* const point_D_cal,
    Eigen::Matrix<Scalar, 3, 2>* const point_D_pixel) const {
  // Total ops: 394

  // Input arrays
  const Eigen::Matrix<Scalar, 6, 1>& _self = Data();

  // Intermediate terms (146)
  const Scalar _tmp0 = -_self[2] + pixel(0, 0);
  const Scalar _tmp1 = Scalar(1.0) / (_self[0]);
  const Scalar _tmp2 = -_self[3] + pixel(1, 0);
  const Scalar _tmp3 = std::pow(_tmp2, Scalar(2));
  const Scalar _tmp4 = std::pow(_self[1], Scalar(-2));
  const Scalar _tmp5 = std::pow(_tmp0, Scalar(2));
  const Scalar _tmp6 = std::pow(_self[0], Scalar(-2));
  const Scalar _tmp7 = _tmp3 * _tmp4 + _tmp5 * _tmp6;
  const Scalar _tmp8 = std::pow(_self[5], Scalar(2));
  const Scalar _tmp9 = _tmp7 * _tmp8;
  const Scalar _tmp10 = 1 - _tmp9;
  const Scalar _tmp11 = std::pow(_tmp10, Scalar(2));
  const Scalar _tmp12 = 2 * _self[5];
  const Scalar _tmp13 = _tmp12 - 1;
  const Scalar _tmp14 = -_tmp13 * _tmp7 + 1;
  const Scalar _tmp15 = std::sqrt(Scalar(std::max<Scalar>(_tmp14, epsilon)));
  const Scalar _tmp16 = 1 - _self[5];
  const Scalar _tmp17 = _self[5] * _tmp15 + _tmp16;
  const Scalar _tmp18 =
      _tmp17 + epsilon * (2 * std::min<Scalar>(0, (((_tmp17) > 0) - ((_tmp17) < 0))) + 1);
  const Scalar _tmp19 = std::pow(_tmp18, Scalar(-2));
  const Scalar _tmp20 = _tmp11 * _tmp19;
  const Scalar _tmp21 = _tmp20 + _tmp7;
  const Scalar _tmp22 =
      _tmp21 + epsilon * (2 * std::min<Scalar>(0, (((_tmp21) > 0) - ((_tmp21) < 0))) + 1);
  const Scalar _tmp23 = Scalar(1.0) / (_tmp22);
  const Scalar _tmp24 = Scalar(1.0) / (_tmp18);
  const Scalar _tmp25 = _tmp10 * _tmp24;
  const Scalar _tmp26 = std::pow(_self[4], Scalar(2));
  const Scalar _tmp27 = 1 - _tmp26;
  const Scalar _tmp28 = _tmp20 + _tmp27 * _tmp7;
  const Scalar _tmp29 = std::sqrt(Scalar(std::max<Scalar>(_tmp28, epsilon)));
  const Scalar _tmp30 = _self[4] * _tmp25 + _tmp29;
  const Scalar _tmp31 = _tmp23 * _tmp30;
  const Scalar _tmp32 = _tmp1 * _tmp31;
  const Scalar _tmp33 = Scalar(1.0) / (_self[1]);
  const Scalar _tmp34 = _tmp31 * _tmp33;
  const Scalar _tmp35 = _tmp26 - 1;
  const Scalar _tmp36 = _tmp5 / [&]() {
    const Scalar base = _self[0];
    return base * base * base;
  }();
  const Scalar _tmp37 = 2 * _tmp36;
  const Scalar _tmp38 = _self[5] + Scalar(-1) / Scalar(2);
  const Scalar _tmp39 = _tmp38 * _tmp7;
  const Scalar _tmp40 = std::sqrt(Scalar(std::max<Scalar>(epsilon, 1 - 2 * _tmp39)));
  const Scalar _tmp41 = -epsilon;
  const Scalar _tmp42 =
      ((((-2 * _tmp39 + _tmp41 + 1) > 0) - ((-2 * _tmp39 + _tmp41 + 1) < 0)) + 1) / _tmp40;
  const Scalar _tmp43 = _tmp38 * _tmp42;
  const Scalar _tmp44 = _tmp36 * _tmp43;
  const Scalar _tmp45 = _tmp9 - 1;
  const Scalar _tmp46 = std::pow(_tmp45, Scalar(2));
  const Scalar _tmp47 = _self[5] * _tmp40;
  const Scalar _tmp48 = 2 * epsilon;
  const Scalar _tmp49 =
      _tmp16 + _tmp47 +
      _tmp48 *
          (std::min<Scalar>(0, -(((_self[5] - _tmp47 - 1) > 0) - ((_self[5] - _tmp47 - 1) < 0))) +
           Scalar(1) / Scalar(2));
  const Scalar _tmp50 = _tmp46 / [&]() {
    const Scalar base = _tmp49;
    return base * base * base;
  }();
  const Scalar _tmp51 = _tmp12 * _tmp50;
  const Scalar _tmp52 = std::pow(_tmp49, Scalar(-2));
  const Scalar _tmp53 = _tmp45 * _tmp52;
  const Scalar _tmp54 = 4 * _tmp53;
  const Scalar _tmp55 = _tmp54 * _tmp8;
  const Scalar _tmp56 = -_tmp36 * _tmp55 - _tmp44 * _tmp51;
  const Scalar _tmp57 = _tmp46 * _tmp52;
  const Scalar _tmp58 = -_tmp35 * _tmp7 + _tmp57;
  const Scalar _tmp59 = std::sqrt(Scalar(std::max<Scalar>(_tmp58, epsilon)));
  const Scalar _tmp60 = ((((_tmp41 + _tmp58) > 0) - ((_tmp41 + _tmp58) < 0)) + 1) / _tmp59;
  const Scalar _tmp61 = (Scalar(1) / Scalar(4)) * _tmp60;
  const Scalar _tmp62 = Scalar(1.0) / (_tmp49);
  const Scalar _tmp63 = _self[4] * _tmp8;
  const Scalar _tmp64 = _tmp62 * _tmp63;
  const Scalar _tmp65 = _self[4] * _self[5];
  const Scalar _tmp66 = _tmp53 * _tmp65;
  const Scalar _tmp67 = _tmp37 * _tmp64 + _tmp44 * _tmp66 + _tmp61 * (_tmp35 * _tmp37 + _tmp56);
  const Scalar _tmp68 = _tmp57 + _tmp7;
  const Scalar _tmp69 =
      _tmp48 * (std::min<Scalar>(0, (((_tmp68) > 0) - ((_tmp68) < 0))) + Scalar(1) / Scalar(2)) +
      _tmp68;
  const Scalar _tmp70 = Scalar(1.0) / (_tmp69);
  const Scalar _tmp71 = _tmp0 * _tmp1;
  const Scalar _tmp72 = _tmp70 * _tmp71;
  const Scalar _tmp73 = _tmp0 * _tmp6;
  const Scalar _tmp74 = _tmp45 * _tmp62;
  const Scalar _tmp75 = -_self[4] * _tmp74 + _tmp59;
  const Scalar _tmp76 = _tmp70 * _tmp75;
  const Scalar _tmp77 = _tmp73 * _tmp76;
  const Scalar _tmp78 = -_tmp37 + _tmp56;
  const Scalar _tmp79 = _tmp75 / std::pow(_tmp69, Scalar(2));
  const Scalar _tmp80 = _tmp71 * _tmp79;
  const Scalar _tmp81 = _tmp2 * _tmp33;
  const Scalar _tmp82 = _tmp70 * _tmp81;
  const Scalar _tmp83 = _tmp79 * _tmp81;
  const Scalar _tmp84 = _self[5] * _tmp76;
  const Scalar _tmp85 = _tmp70 * _tmp74;
  const Scalar _tmp86 = _tmp74 * _tmp79;
  const Scalar _tmp87 = _tmp62 * _tmp76;
  const Scalar _tmp88 = _tmp8 * _tmp87;
  const Scalar _tmp89 = _tmp3 / [&]() {
    const Scalar base = _self[1];
    return base * base * base;
  }();
  const Scalar _tmp90 = 2 * _tmp89;
  const Scalar _tmp91 = _tmp43 * _tmp89;
  const Scalar _tmp92 = -_tmp51 * _tmp91 - _tmp55 * _tmp89;
  const Scalar _tmp93 = _tmp61 * (_tmp35 * _tmp90 + _tmp92) + _tmp64 * _tmp90 + _tmp66 * _tmp91;
  const Scalar _tmp94 = _tmp70 * _tmp93;
  const Scalar _tmp95 = -_tmp90 + _tmp92;
  const Scalar _tmp96 = _tmp2 * _tmp4;
  const Scalar _tmp97 = _tmp76 * _tmp96;
  const Scalar _tmp98 = _tmp43 * _tmp53;
  const Scalar _tmp99 = 2 * _tmp73;
  const Scalar _tmp100 = _tmp43 * _tmp51;
  const Scalar _tmp101 = -_tmp100 * _tmp73 - _tmp55 * _tmp73;
  const Scalar _tmp102 = _self[5] * _tmp73;
  const Scalar _tmp103 = _self[4] * _tmp98;
  const Scalar _tmp104 = _tmp102 * _tmp103 + _tmp61 * (_tmp101 + _tmp35 * _tmp99) + _tmp64 * _tmp99;
  const Scalar _tmp105 = _tmp104 * _tmp70;
  const Scalar _tmp106 = _tmp101 - _tmp99;
  const Scalar _tmp107 = _self[5] * _tmp98;
  const Scalar _tmp108 = _tmp8 * _tmp99;
  const Scalar _tmp109 = 2 * _tmp96;
  const Scalar _tmp110 = -_tmp100 * _tmp96 - _tmp55 * _tmp96;
  const Scalar _tmp111 = _self[5] * _tmp96;
  const Scalar _tmp112 =
      _tmp103 * _tmp111 + _tmp109 * _tmp64 + _tmp61 * (_tmp109 * _tmp35 + _tmp110);
  const Scalar _tmp113 = _tmp112 * _tmp70;
  const Scalar _tmp114 = -_tmp109 + _tmp110;
  const Scalar _tmp115 = _self[4] * _tmp7;
  const Scalar _tmp116 = -Scalar(1) / Scalar(2) * _tmp115 * _tmp60 - _tmp74;
  const Scalar _tmp117 = _self[5] * _tmp7;
  const Scalar _tmp118 = -Scalar(1) / Scalar(2) * _tmp117 * _tmp42 + _tmp40 - 1;
  const Scalar _tmp119 = _tmp117 * _tmp54 - 2 * _tmp118 * _tmp50;
  const Scalar _tmp120 = _tmp118 * _tmp53;
  const Scalar _tmp121 = _tmp12 * _tmp62;
  const Scalar _tmp122 = _self[4] * _tmp120 - _tmp115 * _tmp121 + _tmp119 * _tmp61;
  const Scalar _tmp123 = _tmp122 * _tmp70;
  const Scalar _tmp124 = _tmp10 * _tmp19;
  const Scalar _tmp125 = _tmp124 * _tmp73;
  const Scalar _tmp126 =
      _tmp13 * ((((_tmp14 + _tmp41) > 0) - ((_tmp14 + _tmp41) < 0)) + 1) / _tmp15;
  const Scalar _tmp127 = (Scalar(1) / Scalar(2)) * _tmp126;
  const Scalar _tmp128 = _tmp127 * _tmp65;
  const Scalar _tmp129 = _tmp24 * _tmp63;
  const Scalar _tmp130 = 4 * _tmp8;
  const Scalar _tmp131 = _tmp11 * _tmp126 / [&]() {
    const Scalar base = _tmp18;
    return base * base * base;
  }();
  const Scalar _tmp132 = _tmp102 * _tmp131 - _tmp125 * _tmp130;
  const Scalar _tmp133 =
      (Scalar(1) / Scalar(4)) * ((((_tmp28 + _tmp41) > 0) - ((_tmp28 + _tmp41) < 0)) + 1) / _tmp29;
  const Scalar _tmp134 =
      _tmp125 * _tmp128 - _tmp129 * _tmp99 + _tmp133 * (_tmp132 + _tmp27 * _tmp99);
  const Scalar _tmp135 = _tmp134 * _tmp23;
  const Scalar _tmp136 = _tmp30 / std::pow(_tmp22, Scalar(2));
  const Scalar _tmp137 = _tmp136 * (_tmp132 + _tmp99);
  const Scalar _tmp138 = _tmp24 * _tmp31;
  const Scalar _tmp139 = _self[5] * _tmp127 * _tmp31;
  const Scalar _tmp140 = _tmp23 * _tmp25;
  const Scalar _tmp141 = _tmp124 * _tmp96;
  const Scalar _tmp142 = _tmp111 * _tmp131 - _tmp130 * _tmp141;
  const Scalar _tmp143 =
      -_tmp109 * _tmp129 + _tmp128 * _tmp141 + _tmp133 * (_tmp109 * _tmp27 + _tmp142);
  const Scalar _tmp144 = _tmp143 * _tmp23;
  const Scalar _tmp145 = _tmp136 * (_tmp109 + _tmp142);

  // Output terms (4)
  Eigen::Matrix<Scalar, 3, 1> _camera_ray;

  _camera_ray(0, 0) = _tmp0 * _tmp32;
  _camera_ray(1, 0) = _tmp2 * _tmp34;
  _camera_ray(2, 0) = -_self[4] + _tmp25 * _tmp31;

  if (is_valid != nullptr) {
    Scalar& _is_valid = (*is_valid);

    _is_valid = std::min<Scalar>(1 - std::max<Scalar>(0, -(((_tmp14) > 0) - ((_tmp14) < 0))),
                                 1 - std::max<Scalar>(0, -(((_tmp28) > 0) - ((_tmp28) < 0))));
  }

  if (point_D_cal != nullptr) {
    Eigen::Matrix<Scalar, 3, 6>& _point_D_cal = (*point_D_cal);

    _point_D_cal(0, 0) = _tmp67 * _tmp72 - _tmp77 - _tmp78 * _tmp80;
    _point_D_cal(1, 0) = _tmp67 * _tmp82 - _tmp78 * _tmp83;
    _point_D_cal(2, 0) =
        _tmp37 * _tmp88 + _tmp44 * _tmp53 * _tmp84 - _tmp67 * _tmp85 + _tmp78 * _tmp86;
    _point_D_cal(0, 1) = _tmp71 * _tmp94 - _tmp80 * _tmp95;
    _point_D_cal(1, 1) = _tmp81 * _tmp94 - _tmp83 * _tmp95 - _tmp97;
    _point_D_cal(2, 1) =
        _tmp84 * _tmp89 * _tmp98 - _tmp85 * _tmp93 + _tmp86 * _tmp95 + _tmp88 * _tmp90;
    _point_D_cal(0, 2) = -_tmp1 * _tmp76 + _tmp105 * _tmp71 - _tmp106 * _tmp80;
    _point_D_cal(1, 2) = _tmp105 * _tmp81 - _tmp106 * _tmp83;
    _point_D_cal(2, 2) = -_tmp104 * _tmp85 + _tmp106 * _tmp86 + _tmp107 * _tmp77 + _tmp108 * _tmp87;
    _point_D_cal(0, 3) = _tmp113 * _tmp71 - _tmp114 * _tmp80;
    _point_D_cal(1, 3) = _tmp113 * _tmp81 - _tmp114 * _tmp83 - _tmp33 * _tmp76;
    _point_D_cal(2, 3) = _tmp107 * _tmp97 + _tmp109 * _tmp88 - _tmp112 * _tmp85 + _tmp114 * _tmp86;
    _point_D_cal(0, 4) = _tmp116 * _tmp72;
    _point_D_cal(1, 4) = _tmp116 * _tmp82;
    _point_D_cal(2, 4) = -_tmp116 * _tmp85 - 1;
    _point_D_cal(0, 5) = -_tmp119 * _tmp80 + _tmp123 * _tmp71;
    _point_D_cal(1, 5) = -_tmp119 * _tmp83 + _tmp123 * _tmp81;
    _point_D_cal(2, 5) =
        _tmp119 * _tmp86 + _tmp120 * _tmp76 - _tmp121 * _tmp7 * _tmp76 - _tmp122 * _tmp85;
  }

  if (point_D_pixel != nullptr) {
    Eigen::Matrix<Scalar, 3, 2>& _point_D_pixel = (*point_D_pixel);

    _point_D_pixel(0, 0) = _tmp135 * _tmp71 - _tmp137 * _tmp71 + _tmp32;
    _point_D_pixel(1, 0) = _tmp135 * _tmp81 - _tmp137 * _tmp81;
    _point_D_pixel(2, 0) =
        -_tmp108 * _tmp138 + _tmp125 * _tmp139 + _tmp134 * _tmp140 - _tmp137 * _tmp25;
    _point_D_pixel(0, 1) = _tmp144 * _tmp71 - _tmp145 * _tmp71;
    _point_D_pixel(1, 1) = _tmp144 * _tmp81 - _tmp145 * _tmp81 + _tmp34;
    _point_D_pixel(2, 1) =
        -_tmp109 * _tmp138 * _tmp8 + _tmp139 * _tmp141 + _tmp140 * _tmp143 - _tmp145 * _tmp25;
  }

  return _camera_ray;
}

// Print implementations
std::ostream& operator<<(std::ostream& os, const DoubleSphereCameraCald& a) {
  const Eigen::IOFormat fmt(Eigen::StreamPrecision, Eigen::DontAlignCols, ", ", "\n", "[", "]");
  os << "<DoubleSphereCameraCald " << a.Data().transpose().format(fmt) << ">";
  return os;
}

std::ostream& operator<<(std::ostream& os, const DoubleSphereCameraCalf& a) {
  const Eigen::IOFormat fmt(Eigen::StreamPrecision, Eigen::DontAlignCols, ", ", "\n", "[", "]");
  os << "<DoubleSphereCameraCalf " << a.Data().transpose().format(fmt) << ">";
  return os;
}

}  // namespace sym

// Concept implementations for this class
#include "./ops/double_sphere_camera_cal/storage_ops.h"

// Explicit instantiation
template class sym::DoubleSphereCameraCal<double>;
template class sym::DoubleSphereCameraCal<float>;
