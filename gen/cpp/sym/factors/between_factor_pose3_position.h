// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     backends/cpp/templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Residual that penalizes the difference between between(a, b) and a_t_b.
 *
 * In vector space terms that would be:
 *     (b - a) - a_t_b
 *
 * In lie group terms:
 *     local_coordinates(a_t_b, between(a, b))
 *     to_tangent(compose(inverse(a_t_b), compose(inverse(a), b)))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     jacobian: (3x12) jacobian of res wrt args a (6), b (6)
 *     hessian: (12x12) Gauss-Newton hessian for args a (6), b (6)
 *     rhs: (12x1) Gauss-Newton rhs for args a (6), b (6)
 */
template <typename Scalar>
void BetweenFactorPose3Position(const sym::Pose3<Scalar>& a, const sym::Pose3<Scalar>& b,
                                const Eigen::Matrix<Scalar, 3, 1>& a_t_b,
                                const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
                                Eigen::Matrix<Scalar, 3, 1>* const res = nullptr,
                                Eigen::Matrix<Scalar, 3, 12>* const jacobian = nullptr,
                                Eigen::Matrix<Scalar, 12, 12>* const hessian = nullptr,
                                Eigen::Matrix<Scalar, 12, 1>* const rhs = nullptr) {
  // Total ops: 452

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();

  // Intermediate terms (173)
  const Scalar _tmp0 = std::pow(_a[2], Scalar(2));
  const Scalar _tmp1 = -2 * _tmp0;
  const Scalar _tmp2 = std::pow(_a[1], Scalar(2));
  const Scalar _tmp3 = -2 * _tmp2;
  const Scalar _tmp4 = _tmp1 + _tmp3 + 1;
  const Scalar _tmp5 = _a[0] * _a[2];
  const Scalar _tmp6 = 2 * _tmp5;
  const Scalar _tmp7 = _a[1] * _a[3];
  const Scalar _tmp8 = 2 * _tmp7;
  const Scalar _tmp9 = _tmp6 - _tmp8;
  const Scalar _tmp10 = _a[0] * _a[1];
  const Scalar _tmp11 = 2 * _tmp10;
  const Scalar _tmp12 = _a[2] * _a[3];
  const Scalar _tmp13 = 2 * _tmp12;
  const Scalar _tmp14 = _tmp11 + _tmp13;
  const Scalar _tmp15 = -_a[4] * _tmp4 - _a[5] * _tmp14 - _a[6] * _tmp9 + _b[4] * _tmp4 +
                        _b[5] * _tmp14 + _b[6] * _tmp9 - a_t_b(0, 0);
  const Scalar _tmp16 = std::pow(_a[0], Scalar(2));
  const Scalar _tmp17 = 1 - 2 * _tmp16;
  const Scalar _tmp18 = _tmp1 + _tmp17;
  const Scalar _tmp19 = _a[1] * _a[2];
  const Scalar _tmp20 = 2 * _tmp19;
  const Scalar _tmp21 = _a[0] * _a[3];
  const Scalar _tmp22 = 2 * _tmp21;
  const Scalar _tmp23 = _tmp20 + _tmp22;
  const Scalar _tmp24 = _tmp11 - _tmp13;
  const Scalar _tmp25 = -_a[4] * _tmp24 - _a[5] * _tmp18 - _a[6] * _tmp23 + _b[4] * _tmp24 +
                        _b[5] * _tmp18 + _b[6] * _tmp23 - a_t_b(1, 0);
  const Scalar _tmp26 = _tmp17 + _tmp3;
  const Scalar _tmp27 = _tmp20 - _tmp22;
  const Scalar _tmp28 = _tmp6 + _tmp8;
  const Scalar _tmp29 = -_a[4] * _tmp28 - _a[5] * _tmp27 - _a[6] * _tmp26 + _b[4] * _tmp28 +
                        _b[5] * _tmp27 + _b[6] * _tmp26 - a_t_b(2, 0);
  const Scalar _tmp30 =
      _tmp15 * sqrt_info(0, 0) + _tmp25 * sqrt_info(0, 1) + _tmp29 * sqrt_info(0, 2);
  const Scalar _tmp31 =
      _tmp15 * sqrt_info(1, 0) + _tmp25 * sqrt_info(1, 1) + _tmp29 * sqrt_info(1, 2);
  const Scalar _tmp32 =
      _tmp15 * sqrt_info(2, 0) + _tmp25 * sqrt_info(2, 1) + _tmp29 * sqrt_info(2, 2);
  const Scalar _tmp33 = -_tmp2;
  const Scalar _tmp34 = std::pow(_a[3], Scalar(2));
  const Scalar _tmp35 = _tmp0 - _tmp34;
  const Scalar _tmp36 = _tmp16 + _tmp33 + _tmp35;
  const Scalar _tmp37 = _a[5] * _tmp36;
  const Scalar _tmp38 = _b[5] * _tmp36;
  const Scalar _tmp39 = _tmp19 + _tmp21;
  const Scalar _tmp40 = 2 * _tmp39;
  const Scalar _tmp41 = _a[6] * _tmp40;
  const Scalar _tmp42 = _b[6] * _tmp40;
  const Scalar _tmp43 = _tmp10 - _tmp12;
  const Scalar _tmp44 = 2 * _tmp43;
  const Scalar _tmp45 = _a[4] * _tmp44;
  const Scalar _tmp46 = _b[4] * _tmp44;
  const Scalar _tmp47 = -_tmp37 + _tmp38 + _tmp41 - _tmp42 + _tmp45 - _tmp46;
  const Scalar _tmp48 = -_tmp16;
  const Scalar _tmp49 = _tmp0 + _tmp33 + _tmp34 + _tmp48;
  const Scalar _tmp50 = _a[6] * _tmp49;
  const Scalar _tmp51 = _b[6] * _tmp49;
  const Scalar _tmp52 = _tmp19 - _tmp21;
  const Scalar _tmp53 = 2 * _tmp52;
  const Scalar _tmp54 = _a[5] * _tmp53;
  const Scalar _tmp55 = _b[5] * _tmp53;
  const Scalar _tmp56 = _tmp5 + _tmp7;
  const Scalar _tmp57 = 2 * _tmp56;
  const Scalar _tmp58 = _a[4] * _tmp57;
  const Scalar _tmp59 = _b[4] * _tmp57;
  const Scalar _tmp60 = -_tmp50 + _tmp51 - _tmp54 + _tmp55 - _tmp58 + _tmp59;
  const Scalar _tmp61 = _tmp47 * sqrt_info(0, 2) + _tmp60 * sqrt_info(0, 1);
  const Scalar _tmp62 = _tmp47 * sqrt_info(1, 2) + _tmp60 * sqrt_info(1, 1);
  const Scalar _tmp63 = _tmp47 * sqrt_info(2, 2) + _tmp60 * sqrt_info(2, 1);
  const Scalar _tmp64 = _tmp50 - _tmp51 + _tmp54 - _tmp55 + _tmp58 - _tmp59;
  const Scalar _tmp65 = _tmp2 + _tmp35 + _tmp48;
  const Scalar _tmp66 = _a[4] * _tmp65;
  const Scalar _tmp67 = _b[4] * _tmp65;
  const Scalar _tmp68 = _tmp5 - _tmp7;
  const Scalar _tmp69 = 2 * _tmp68;
  const Scalar _tmp70 = _a[6] * _tmp69;
  const Scalar _tmp71 = _b[6] * _tmp69;
  const Scalar _tmp72 = _tmp10 + _tmp12;
  const Scalar _tmp73 = 2 * _tmp72;
  const Scalar _tmp74 = _a[5] * _tmp73;
  const Scalar _tmp75 = _b[5] * _tmp73;
  const Scalar _tmp76 = _tmp66 - _tmp67 - _tmp70 + _tmp71 - _tmp74 + _tmp75;
  const Scalar _tmp77 = _tmp64 * sqrt_info(0, 0) + _tmp76 * sqrt_info(0, 2);
  const Scalar _tmp78 = _tmp64 * sqrt_info(1, 0) + _tmp76 * sqrt_info(1, 2);
  const Scalar _tmp79 = _tmp64 * sqrt_info(2, 0) + _tmp76 * sqrt_info(2, 2);
  const Scalar _tmp80 = _tmp37 - _tmp38 - _tmp41 + _tmp42 - _tmp45 + _tmp46;
  const Scalar _tmp81 = -_tmp66 + _tmp67 + _tmp70 - _tmp71 + _tmp74 - _tmp75;
  const Scalar _tmp82 = _tmp80 * sqrt_info(0, 0) + _tmp81 * sqrt_info(0, 1);
  const Scalar _tmp83 = _tmp80 * sqrt_info(1, 0) + _tmp81 * sqrt_info(1, 1);
  const Scalar _tmp84 = _tmp80 * sqrt_info(2, 0) + _tmp81 * sqrt_info(2, 1);
  const Scalar _tmp85 = _tmp0 + Scalar(-1) / Scalar(2);
  const Scalar _tmp86 = _tmp2 + _tmp85;
  const Scalar _tmp87 =
      -_tmp43 * sqrt_info(0, 1) - _tmp56 * sqrt_info(0, 2) + _tmp86 * sqrt_info(0, 0);
  const Scalar _tmp88 = 2 * _tmp87;
  const Scalar _tmp89 =
      -_tmp43 * sqrt_info(1, 1) - _tmp56 * sqrt_info(1, 2) + _tmp86 * sqrt_info(1, 0);
  const Scalar _tmp90 = 2 * _tmp89;
  const Scalar _tmp91 =
      -_tmp43 * sqrt_info(2, 1) - _tmp56 * sqrt_info(2, 2) + _tmp86 * sqrt_info(2, 0);
  const Scalar _tmp92 = 2 * _tmp91;
  const Scalar _tmp93 = _tmp16 + _tmp85;
  const Scalar _tmp94 =
      _tmp52 * sqrt_info(0, 2) + _tmp72 * sqrt_info(0, 0) - _tmp93 * sqrt_info(0, 1);
  const Scalar _tmp95 = 2 * _tmp94;
  const Scalar _tmp96 =
      _tmp52 * sqrt_info(1, 2) + _tmp72 * sqrt_info(1, 0) - _tmp93 * sqrt_info(1, 1);
  const Scalar _tmp97 = 2 * _tmp96;
  const Scalar _tmp98 =
      _tmp52 * sqrt_info(2, 2) + _tmp72 * sqrt_info(2, 0) - _tmp93 * sqrt_info(2, 1);
  const Scalar _tmp99 = 2 * _tmp98;
  const Scalar _tmp100 = _tmp16 + _tmp2 + Scalar(-1) / Scalar(2);
  const Scalar _tmp101 =
      -_tmp100 * sqrt_info(0, 2) + _tmp39 * sqrt_info(0, 1) + _tmp68 * sqrt_info(0, 0);
  const Scalar _tmp102 = 2 * _tmp101;
  const Scalar _tmp103 =
      -_tmp100 * sqrt_info(1, 2) + _tmp39 * sqrt_info(1, 1) + _tmp68 * sqrt_info(1, 0);
  const Scalar _tmp104 = 2 * _tmp103;
  const Scalar _tmp105 =
      -_tmp100 * sqrt_info(2, 2) + _tmp39 * sqrt_info(2, 1) + _tmp68 * sqrt_info(2, 0);
  const Scalar _tmp106 = 2 * _tmp105;
  const Scalar _tmp107 = _tmp62 * _tmp90;
  const Scalar _tmp108 = _tmp63 * _tmp92;
  const Scalar _tmp109 = _tmp61 * _tmp88;
  const Scalar _tmp110 = _tmp61 * _tmp95;
  const Scalar _tmp111 = _tmp63 * _tmp99;
  const Scalar _tmp112 = _tmp62 * _tmp97;
  const Scalar _tmp113 = _tmp104 * _tmp62;
  const Scalar _tmp114 = _tmp106 * _tmp63;
  const Scalar _tmp115 = _tmp102 * _tmp61;
  const Scalar _tmp116 = _tmp79 * _tmp92;
  const Scalar _tmp117 = _tmp78 * _tmp90;
  const Scalar _tmp118 = _tmp77 * _tmp88;
  const Scalar _tmp119 = _tmp77 * _tmp95;
  const Scalar _tmp120 = _tmp79 * _tmp99;
  const Scalar _tmp121 = _tmp78 * _tmp97;
  const Scalar _tmp122 = _tmp104 * _tmp78;
  const Scalar _tmp123 = _tmp106 * _tmp79;
  const Scalar _tmp124 = _tmp102 * _tmp77;
  const Scalar _tmp125 = _tmp82 * _tmp88;
  const Scalar _tmp126 = _tmp83 * _tmp90;
  const Scalar _tmp127 = _tmp84 * _tmp92;
  const Scalar _tmp128 = _tmp82 * _tmp95;
  const Scalar _tmp129 = _tmp83 * _tmp97;
  const Scalar _tmp130 = _tmp84 * _tmp99;
  const Scalar _tmp131 = _tmp102 * _tmp82;
  const Scalar _tmp132 = _tmp106 * _tmp84;
  const Scalar _tmp133 = _tmp104 * _tmp83;
  const Scalar _tmp134 = 4 * std::pow(_tmp87, Scalar(2));
  const Scalar _tmp135 = 4 * std::pow(_tmp91, Scalar(2));
  const Scalar _tmp136 = 4 * std::pow(_tmp89, Scalar(2));
  const Scalar _tmp137 = _tmp134 + _tmp135 + _tmp136;
  const Scalar _tmp138 = 4 * _tmp89;
  const Scalar _tmp139 = _tmp138 * _tmp96;
  const Scalar _tmp140 = 4 * _tmp91;
  const Scalar _tmp141 = _tmp140 * _tmp98;
  const Scalar _tmp142 = 4 * _tmp87;
  const Scalar _tmp143 = _tmp142 * _tmp94;
  const Scalar _tmp144 = -_tmp139 - _tmp141 - _tmp143;
  const Scalar _tmp145 = _tmp101 * _tmp142;
  const Scalar _tmp146 = _tmp105 * _tmp140;
  const Scalar _tmp147 = _tmp103 * _tmp138;
  const Scalar _tmp148 = -_tmp145 - _tmp146 - _tmp147;
  const Scalar _tmp149 = _tmp139 + _tmp141 + _tmp143;
  const Scalar _tmp150 = _tmp145 + _tmp146 + _tmp147;
  const Scalar _tmp151 = 4 * std::pow(_tmp98, Scalar(2));
  const Scalar _tmp152 = 4 * std::pow(_tmp96, Scalar(2));
  const Scalar _tmp153 = 4 * std::pow(_tmp94, Scalar(2));
  const Scalar _tmp154 = _tmp151 + _tmp152 + _tmp153;
  const Scalar _tmp155 = 4 * _tmp103 * _tmp96;
  const Scalar _tmp156 = 4 * _tmp105 * _tmp98;
  const Scalar _tmp157 = 4 * _tmp101 * _tmp94;
  const Scalar _tmp158 = _tmp155 + _tmp156 + _tmp157;
  const Scalar _tmp159 = -_tmp155 - _tmp156 - _tmp157;
  const Scalar _tmp160 = 4 * std::pow(_tmp101, Scalar(2));
  const Scalar _tmp161 = 4 * std::pow(_tmp105, Scalar(2));
  const Scalar _tmp162 = 4 * std::pow(_tmp103, Scalar(2));
  const Scalar _tmp163 = _tmp160 + _tmp161 + _tmp162;
  const Scalar _tmp164 = _tmp31 * _tmp90;
  const Scalar _tmp165 = _tmp32 * _tmp92;
  const Scalar _tmp166 = _tmp30 * _tmp88;
  const Scalar _tmp167 = _tmp31 * _tmp97;
  const Scalar _tmp168 = _tmp32 * _tmp99;
  const Scalar _tmp169 = _tmp30 * _tmp95;
  const Scalar _tmp170 = _tmp102 * _tmp30;
  const Scalar _tmp171 = _tmp106 * _tmp32;
  const Scalar _tmp172 = _tmp104 * _tmp31;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);

    _res(0, 0) = _tmp30;
    _res(1, 0) = _tmp31;
    _res(2, 0) = _tmp32;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 3, 12>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp61;
    _jacobian(1, 0) = _tmp62;
    _jacobian(2, 0) = _tmp63;
    _jacobian(0, 1) = _tmp77;
    _jacobian(1, 1) = _tmp78;
    _jacobian(2, 1) = _tmp79;
    _jacobian(0, 2) = _tmp82;
    _jacobian(1, 2) = _tmp83;
    _jacobian(2, 2) = _tmp84;
    _jacobian(0, 3) = _tmp88;
    _jacobian(1, 3) = _tmp90;
    _jacobian(2, 3) = _tmp92;
    _jacobian(0, 4) = -_tmp95;
    _jacobian(1, 4) = -_tmp97;
    _jacobian(2, 4) = -_tmp99;
    _jacobian(0, 5) = -_tmp102;
    _jacobian(1, 5) = -_tmp104;
    _jacobian(2, 5) = -_tmp106;
    _jacobian(0, 6) = 0;
    _jacobian(1, 6) = 0;
    _jacobian(2, 6) = 0;
    _jacobian(0, 7) = 0;
    _jacobian(1, 7) = 0;
    _jacobian(2, 7) = 0;
    _jacobian(0, 8) = 0;
    _jacobian(1, 8) = 0;
    _jacobian(2, 8) = 0;
    _jacobian(0, 9) = -_tmp88;
    _jacobian(1, 9) = -_tmp90;
    _jacobian(2, 9) = -_tmp92;
    _jacobian(0, 10) = _tmp95;
    _jacobian(1, 10) = _tmp97;
    _jacobian(2, 10) = _tmp99;
    _jacobian(0, 11) = _tmp102;
    _jacobian(1, 11) = _tmp104;
    _jacobian(2, 11) = _tmp106;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 12, 12>& _hessian = (*hessian);

    _hessian.setZero();

    _hessian(0, 0) =
        std::pow(_tmp61, Scalar(2)) + std::pow(_tmp62, Scalar(2)) + std::pow(_tmp63, Scalar(2));
    _hessian(1, 0) = _tmp61 * _tmp77 + _tmp62 * _tmp78 + _tmp63 * _tmp79;
    _hessian(2, 0) = _tmp61 * _tmp82 + _tmp62 * _tmp83 + _tmp63 * _tmp84;
    _hessian(3, 0) = _tmp107 + _tmp108 + _tmp109;
    _hessian(4, 0) = -_tmp110 - _tmp111 - _tmp112;
    _hessian(5, 0) = -_tmp113 - _tmp114 - _tmp115;
    _hessian(9, 0) = -_tmp107 - _tmp108 - _tmp109;
    _hessian(10, 0) = _tmp110 + _tmp111 + _tmp112;
    _hessian(11, 0) = _tmp113 + _tmp114 + _tmp115;
    _hessian(1, 1) =
        std::pow(_tmp77, Scalar(2)) + std::pow(_tmp78, Scalar(2)) + std::pow(_tmp79, Scalar(2));
    _hessian(2, 1) = _tmp77 * _tmp82 + _tmp78 * _tmp83 + _tmp79 * _tmp84;
    _hessian(3, 1) = _tmp116 + _tmp117 + _tmp118;
    _hessian(4, 1) = -_tmp119 - _tmp120 - _tmp121;
    _hessian(5, 1) = -_tmp122 - _tmp123 - _tmp124;
    _hessian(9, 1) = -_tmp116 - _tmp117 - _tmp118;
    _hessian(10, 1) = _tmp119 + _tmp120 + _tmp121;
    _hessian(11, 1) = _tmp122 + _tmp123 + _tmp124;
    _hessian(2, 2) =
        std::pow(_tmp82, Scalar(2)) + std::pow(_tmp83, Scalar(2)) + std::pow(_tmp84, Scalar(2));
    _hessian(3, 2) = _tmp125 + _tmp126 + _tmp127;
    _hessian(4, 2) = -_tmp128 - _tmp129 - _tmp130;
    _hessian(5, 2) = -_tmp131 - _tmp132 - _tmp133;
    _hessian(9, 2) = -_tmp125 - _tmp126 - _tmp127;
    _hessian(10, 2) = _tmp128 + _tmp129 + _tmp130;
    _hessian(11, 2) = _tmp131 + _tmp132 + _tmp133;
    _hessian(3, 3) = _tmp137;
    _hessian(4, 3) = _tmp144;
    _hessian(5, 3) = _tmp148;
    _hessian(9, 3) = -_tmp134 - _tmp135 - _tmp136;
    _hessian(10, 3) = _tmp149;
    _hessian(11, 3) = _tmp150;
    _hessian(4, 4) = _tmp154;
    _hessian(5, 4) = _tmp158;
    _hessian(9, 4) = _tmp149;
    _hessian(10, 4) = -_tmp151 - _tmp152 - _tmp153;
    _hessian(11, 4) = _tmp159;
    _hessian(5, 5) = _tmp163;
    _hessian(9, 5) = _tmp150;
    _hessian(10, 5) = _tmp159;
    _hessian(11, 5) = -_tmp160 - _tmp161 - _tmp162;
    _hessian(9, 9) = _tmp137;
    _hessian(10, 9) = _tmp144;
    _hessian(11, 9) = _tmp148;
    _hessian(10, 10) = _tmp154;
    _hessian(11, 10) = _tmp158;
    _hessian(11, 11) = _tmp163;
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 12, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp30 * _tmp61 + _tmp31 * _tmp62 + _tmp32 * _tmp63;
    _rhs(1, 0) = _tmp30 * _tmp77 + _tmp31 * _tmp78 + _tmp32 * _tmp79;
    _rhs(2, 0) = _tmp30 * _tmp82 + _tmp31 * _tmp83 + _tmp32 * _tmp84;
    _rhs(3, 0) = _tmp164 + _tmp165 + _tmp166;
    _rhs(4, 0) = -_tmp167 - _tmp168 - _tmp169;
    _rhs(5, 0) = -_tmp170 - _tmp171 - _tmp172;
    _rhs(6, 0) = 0;
    _rhs(7, 0) = 0;
    _rhs(8, 0) = 0;
    _rhs(9, 0) = -_tmp164 - _tmp165 - _tmp166;
    _rhs(10, 0) = _tmp167 + _tmp168 + _tmp169;
    _rhs(11, 0) = _tmp170 + _tmp171 + _tmp172;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
