// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     backends/cpp/templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>
#include <sym/rot3.h>

namespace sym {

/**
 * Residual that penalizes the difference between between(a, b) and a_R_b.
 *
 * In vector space terms that would be:
 *     (b - a) - a_R_b
 *
 * In lie group terms:
 *     local_coordinates(a_R_b, between(a, b))
 *     to_tangent(compose(inverse(a_R_b), compose(inverse(a), b)))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     jacobian: (3x12) jacobian of res wrt args a (6), b (6)
 *     hessian: (12x12) Gauss-Newton hessian for args a (6), b (6)
 *     rhs: (12x1) Gauss-Newton rhs for args a (6), b (6)
 */
template <typename Scalar>
void BetweenFactorPose3Rotation(const sym::Pose3<Scalar>& a, const sym::Pose3<Scalar>& b,
                                const sym::Rot3<Scalar>& a_R_b,
                                const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
                                Eigen::Matrix<Scalar, 3, 1>* const res = nullptr,
                                Eigen::Matrix<Scalar, 3, 12>* const jacobian = nullptr,
                                Eigen::Matrix<Scalar, 12, 12>* const hessian = nullptr,
                                Eigen::Matrix<Scalar, 12, 1>* const rhs = nullptr) {
  // Total ops: 681

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _a_R_b = a_R_b.Data();

  // Intermediate terms (168)
  const Scalar _tmp0 = _a[1] * _b[1];
  const Scalar _tmp1 = _a[2] * _b[2];
  const Scalar _tmp2 = _a[0] * _b[0];
  const Scalar _tmp3 = _a[3] * _b[3];
  const Scalar _tmp4 = _tmp0 + _tmp1 + _tmp2 + _tmp3;
  const Scalar _tmp5 = _a[0] * _b[1];
  const Scalar _tmp6 = _a[2] * _b[3];
  const Scalar _tmp7 = _a[3] * _b[2];
  const Scalar _tmp8 = _a[1] * _b[0];
  const Scalar _tmp9 = -_tmp5 - _tmp6 + _tmp7 + _tmp8;
  const Scalar _tmp10 = -_a[0] * _b[3] - _a[1] * _b[2] + _a[2] * _b[1] + _a[3] * _b[0];
  const Scalar _tmp11 = _a_R_b[3] * _tmp10;
  const Scalar _tmp12 = _a[0] * _b[2] - _a[1] * _b[3] - _a[2] * _b[0] + _a[3] * _b[1];
  const Scalar _tmp13 = _a_R_b[2] * _tmp12;
  const Scalar _tmp14 = _tmp11 + _tmp13;
  const Scalar _tmp15 = _a_R_b[0] * _tmp10;
  const Scalar _tmp16 = _a_R_b[1] * _tmp12;
  const Scalar _tmp17 = -_tmp16;
  const Scalar _tmp18 = -_a_R_b[2] * _tmp9 - _tmp15 + _tmp17;
  const Scalar _tmp19 = _a_R_b[3] * _tmp4;
  const Scalar _tmp20 = std::min<Scalar>(1 - epsilon, std::fabs(_tmp18 - _tmp19));
  const Scalar _tmp21 =
      (2 * std::min<Scalar>(0, (((-_tmp18 + _tmp19) > 0) - ((-_tmp18 + _tmp19) < 0))) + 1) *
      std::acos(_tmp20) / std::sqrt(Scalar(1 - std::pow(_tmp20, Scalar(2))));
  const Scalar _tmp22 = 2 * _tmp21;
  const Scalar _tmp23 = _tmp22 * (-_a_R_b[0] * _tmp4 - _a_R_b[1] * _tmp9 + _tmp14);
  const Scalar _tmp24 = _a_R_b[1] * _tmp10;
  const Scalar _tmp25 = _a_R_b[0] * _tmp12;
  const Scalar _tmp26 = _tmp24 - _tmp25;
  const Scalar _tmp27 = _tmp21 * (-_a_R_b[2] * _tmp4 + _a_R_b[3] * _tmp9 + _tmp26);
  const Scalar _tmp28 = 2 * sqrt_info(0, 2);
  const Scalar _tmp29 = _a_R_b[2] * _tmp10;
  const Scalar _tmp30 = _a_R_b[3] * _tmp12;
  const Scalar _tmp31 = _tmp22 * (_a_R_b[0] * _tmp9 - _a_R_b[1] * _tmp4 - _tmp29 + _tmp30);
  const Scalar _tmp32 = _tmp23 * sqrt_info(0, 0) + _tmp27 * _tmp28 + _tmp31 * sqrt_info(0, 1);
  const Scalar _tmp33 = 2 * sqrt_info(1, 2);
  const Scalar _tmp34 = _tmp23 * sqrt_info(1, 0) + _tmp27 * _tmp33 + _tmp31 * sqrt_info(1, 1);
  const Scalar _tmp35 = 2 * sqrt_info(2, 2);
  const Scalar _tmp36 = _tmp23 * sqrt_info(2, 0) + _tmp27 * _tmp35 + _tmp31 * sqrt_info(2, 1);
  const Scalar _tmp37 = _tmp0 + _tmp1 + _tmp2 + _tmp3;
  const Scalar _tmp38 = _a_R_b[0] * _tmp37;
  const Scalar _tmp39 = -_tmp38;
  const Scalar _tmp40 = _tmp5 + _tmp6 - _tmp7 - _tmp8;
  const Scalar _tmp41 = _a_R_b[1] * _tmp40;
  const Scalar _tmp42 = -_tmp41;
  const Scalar _tmp43 = _tmp11 - _tmp13;
  const Scalar _tmp44 = _tmp39 + _tmp42 + _tmp43;
  const Scalar _tmp45 = _a_R_b[1] * _tmp37;
  const Scalar _tmp46 = -_tmp30;
  const Scalar _tmp47 = _a_R_b[0] * _tmp40;
  const Scalar _tmp48 = _tmp29 + _tmp47;
  const Scalar _tmp49 = _tmp45 + _tmp46 + _tmp48;
  const Scalar _tmp50 = _a_R_b[2] * _tmp40;
  const Scalar _tmp51 = -_tmp50;
  const Scalar _tmp52 = _a_R_b[3] * _tmp37;
  const Scalar _tmp53 = _tmp15 + _tmp52;
  const Scalar _tmp54 = _tmp16 + _tmp51 + _tmp53;
  const Scalar _tmp55 = (((_tmp54) > 0) - ((_tmp54) < 0));
  const Scalar _tmp56 = std::fabs(_tmp54);
  const Scalar _tmp57 = epsilon - 1;
  const Scalar _tmp58 = _tmp55 * ((((_tmp56 + _tmp57) > 0) - ((_tmp56 + _tmp57) < 0)) - 1);
  const Scalar _tmp59 = std::min<Scalar>(0, _tmp55) + Scalar(1) / Scalar(2);
  const Scalar _tmp60 = std::min<Scalar>(_tmp56, -_tmp57);
  const Scalar _tmp61 = std::pow(_tmp60, Scalar(2)) - 1;
  const Scalar _tmp62 = _tmp59 / _tmp61;
  const Scalar _tmp63 = _tmp58 * _tmp62;
  const Scalar _tmp64 = _tmp49 * _tmp63;
  const Scalar _tmp65 = _tmp44 * _tmp64;
  const Scalar _tmp66 = _a_R_b[3] * _tmp40;
  const Scalar _tmp67 = -_tmp66;
  const Scalar _tmp68 = _a_R_b[2] * _tmp37;
  const Scalar _tmp69 = -_tmp68;
  const Scalar _tmp70 = _tmp26 + _tmp67 + _tmp69;
  const Scalar _tmp71 = _tmp70 * sqrt_info(0, 2);
  const Scalar _tmp72 = -_tmp61;
  const Scalar _tmp73 = _tmp59 * std::acos(_tmp60);
  const Scalar _tmp74 = _tmp60 * _tmp73 / (_tmp72 * std::sqrt(_tmp72));
  const Scalar _tmp75 = _tmp58 * _tmp74;
  const Scalar _tmp76 = _tmp44 * _tmp75;
  const Scalar _tmp77 = _tmp17 + _tmp50 + _tmp53;
  const Scalar _tmp78 = _tmp73 / std::sqrt(_tmp72);
  const Scalar _tmp79 = 2 * _tmp78;
  const Scalar _tmp80 = _tmp79 * sqrt_info(0, 0);
  const Scalar _tmp81 = _tmp29 - _tmp47;
  const Scalar _tmp82 = _tmp78 * (_tmp30 + _tmp45 + _tmp81);
  const Scalar _tmp83 = _tmp14 + _tmp39 + _tmp41;
  const Scalar _tmp84 = _tmp63 * _tmp83;
  const Scalar _tmp85 = _tmp44 * _tmp84;
  const Scalar _tmp86 = _tmp24 + _tmp25;
  const Scalar _tmp87 = _tmp79 * (_tmp66 + _tmp69 + _tmp86);
  const Scalar _tmp88 = _tmp44 * _tmp63;
  const Scalar _tmp89 = _tmp83 * sqrt_info(0, 0);
  const Scalar _tmp90 = _tmp49 * _tmp75;
  const Scalar _tmp91 = _tmp90 * sqrt_info(0, 1);
  const Scalar _tmp92 = -_tmp28 * _tmp82 + _tmp44 * _tmp91 + _tmp65 * sqrt_info(0, 1) -
                        _tmp71 * _tmp76 - _tmp71 * _tmp88 - _tmp76 * _tmp89 - _tmp77 * _tmp80 -
                        _tmp85 * sqrt_info(0, 0) - _tmp87 * sqrt_info(0, 1);
  const Scalar _tmp93 = _tmp70 * sqrt_info(1, 2);
  const Scalar _tmp94 = _tmp77 * _tmp79;
  const Scalar _tmp95 = _tmp83 * sqrt_info(1, 0);
  const Scalar _tmp96 = _tmp90 * sqrt_info(1, 1);
  const Scalar _tmp97 = -_tmp33 * _tmp82 + _tmp44 * _tmp96 + _tmp65 * sqrt_info(1, 1) -
                        _tmp76 * _tmp93 - _tmp76 * _tmp95 - _tmp85 * sqrt_info(1, 0) -
                        _tmp87 * sqrt_info(1, 1) - _tmp88 * _tmp93 - _tmp94 * sqrt_info(1, 0);
  const Scalar _tmp98 = _tmp70 * sqrt_info(2, 2);
  const Scalar _tmp99 = _tmp75 * _tmp98;
  const Scalar _tmp100 = _tmp84 * sqrt_info(2, 0);
  const Scalar _tmp101 = _tmp83 * sqrt_info(2, 0);
  const Scalar _tmp102 = _tmp90 * sqrt_info(2, 1);
  const Scalar _tmp103 = -_tmp100 * _tmp44 - _tmp101 * _tmp76 + _tmp102 * _tmp44 - _tmp35 * _tmp82 -
                         _tmp44 * _tmp99 + _tmp65 * sqrt_info(2, 1) - _tmp87 * sqrt_info(2, 1) -
                         _tmp88 * _tmp98 - _tmp94 * sqrt_info(2, 0);
  const Scalar _tmp104 = -_tmp45;
  const Scalar _tmp105 = _tmp104 + _tmp30 + _tmp48;
  const Scalar _tmp106 = _tmp105 * _tmp64;
  const Scalar _tmp107 = _tmp105 * _tmp75;
  const Scalar _tmp108 = _tmp15 - _tmp52;
  const Scalar _tmp109 = _tmp108 + _tmp17 + _tmp51;
  const Scalar _tmp110 = _tmp79 * sqrt_info(0, 1);
  const Scalar _tmp111 = _tmp79 * (_tmp67 + _tmp68 + _tmp86);
  const Scalar _tmp112 = _tmp105 * _tmp63;
  const Scalar _tmp113 = _tmp38 + _tmp41 + _tmp43;
  const Scalar _tmp114 = _tmp28 * _tmp78;
  const Scalar _tmp115 = _tmp105 * _tmp84;
  const Scalar _tmp116 = _tmp107 * _tmp49;
  const Scalar _tmp117 = _tmp106 * sqrt_info(0, 1) - _tmp107 * _tmp71 - _tmp107 * _tmp89 +
                         _tmp109 * _tmp110 - _tmp111 * sqrt_info(0, 0) - _tmp112 * _tmp71 +
                         _tmp113 * _tmp114 - _tmp115 * sqrt_info(0, 0) + _tmp116 * sqrt_info(0, 1);
  const Scalar _tmp118 = _tmp79 * sqrt_info(1, 1);
  const Scalar _tmp119 = _tmp33 * _tmp78;
  const Scalar _tmp120 = _tmp106 * sqrt_info(1, 1) - _tmp107 * _tmp93 - _tmp107 * _tmp95 +
                         _tmp109 * _tmp118 - _tmp111 * sqrt_info(1, 0) - _tmp112 * _tmp93 +
                         _tmp113 * _tmp119 - _tmp115 * sqrt_info(1, 0) + _tmp116 * sqrt_info(1, 1);
  const Scalar _tmp121 = _tmp79 * sqrt_info(2, 1);
  const Scalar _tmp122 = _tmp35 * _tmp78;
  const Scalar _tmp123 = -_tmp101 * _tmp107 + _tmp106 * sqrt_info(2, 1) - _tmp107 * _tmp98 +
                         _tmp109 * _tmp121 - _tmp111 * sqrt_info(2, 0) - _tmp112 * _tmp98 +
                         _tmp113 * _tmp122 - _tmp115 * sqrt_info(2, 0) + _tmp116 * sqrt_info(2, 1);
  const Scalar _tmp124 = _tmp26 + _tmp66 + _tmp68;
  const Scalar _tmp125 = _tmp124 * _tmp90;
  const Scalar _tmp126 = _tmp124 * _tmp64;
  const Scalar _tmp127 = _tmp124 * _tmp84;
  const Scalar _tmp128 = _tmp124 * _tmp63;
  const Scalar _tmp129 = _tmp108 + _tmp16 + _tmp50;
  const Scalar _tmp130 = _tmp124 * _tmp75;
  const Scalar _tmp131 = _tmp104 + _tmp46 + _tmp81;
  const Scalar _tmp132 = _tmp14 + _tmp38 + _tmp42;
  const Scalar _tmp133 = -_tmp110 * _tmp132 + _tmp114 * _tmp129 - _tmp125 * sqrt_info(0, 1) -
                         _tmp126 * sqrt_info(0, 1) + _tmp127 * sqrt_info(0, 0) + _tmp128 * _tmp71 +
                         _tmp130 * _tmp71 + _tmp130 * _tmp89 - _tmp131 * _tmp80;
  const Scalar _tmp134 = _tmp131 * _tmp79;
  const Scalar _tmp135 = -_tmp118 * _tmp132 + _tmp119 * _tmp129 - _tmp125 * sqrt_info(1, 1) -
                         _tmp126 * sqrt_info(1, 1) + _tmp127 * sqrt_info(1, 0) + _tmp128 * _tmp93 +
                         _tmp130 * _tmp93 + _tmp130 * _tmp95 - _tmp134 * sqrt_info(1, 0);
  const Scalar _tmp136 = _tmp101 * _tmp130 - _tmp121 * _tmp132 + _tmp122 * _tmp129 +
                         _tmp124 * _tmp99 - _tmp125 * sqrt_info(2, 1) - _tmp126 * sqrt_info(2, 1) +
                         _tmp127 * sqrt_info(2, 0) + _tmp128 * _tmp98 - _tmp134 * sqrt_info(2, 0);
  const Scalar _tmp137 = _tmp49 * _tmp84;
  const Scalar _tmp138 = _tmp75 * _tmp83;
  const Scalar _tmp139 = _tmp54 * _tmp79;
  const Scalar _tmp140 = _tmp49 * _tmp78;
  const Scalar _tmp141 = std::pow(_tmp83, Scalar(2));
  const Scalar _tmp142 = _tmp141 * _tmp63;
  const Scalar _tmp143 = _tmp70 * _tmp79;
  const Scalar _tmp144 = _tmp141 * _tmp75;
  const Scalar _tmp145 = -_tmp137 * sqrt_info(0, 1) + _tmp138 * _tmp71 + _tmp139 * sqrt_info(0, 0) +
                         _tmp140 * _tmp28 + _tmp142 * sqrt_info(0, 0) + _tmp143 * sqrt_info(0, 1) +
                         _tmp144 * sqrt_info(0, 0) + _tmp71 * _tmp84 - _tmp83 * _tmp91;
  const Scalar _tmp146 = _tmp118 * _tmp70 - _tmp137 * sqrt_info(1, 1) + _tmp138 * _tmp93 +
                         _tmp139 * sqrt_info(1, 0) + _tmp140 * _tmp33 + _tmp142 * sqrt_info(1, 0) +
                         _tmp144 * sqrt_info(1, 0) - _tmp83 * _tmp96 + _tmp84 * _tmp93;
  const Scalar _tmp147 = -_tmp102 * _tmp83 + _tmp121 * _tmp70 - _tmp137 * sqrt_info(2, 1) +
                         _tmp139 * sqrt_info(2, 0) + _tmp140 * _tmp35 + _tmp142 * sqrt_info(2, 0) +
                         _tmp144 * sqrt_info(2, 0) + _tmp83 * _tmp99 + _tmp84 * _tmp98;
  const Scalar _tmp148 = std::pow(_tmp49, Scalar(2)) * _tmp58;
  const Scalar _tmp149 = _tmp148 * _tmp62;
  const Scalar _tmp150 = _tmp78 * _tmp83;
  const Scalar _tmp151 = _tmp148 * _tmp74;
  const Scalar _tmp152 = _tmp64 * _tmp70;
  const Scalar _tmp153 = -_tmp137 * sqrt_info(0, 0) + _tmp139 * sqrt_info(0, 1) +
                         _tmp149 * sqrt_info(0, 1) + _tmp150 * _tmp28 + _tmp151 * sqrt_info(0, 1) -
                         _tmp152 * sqrt_info(0, 2) - _tmp70 * _tmp80 - _tmp71 * _tmp90 -
                         _tmp89 * _tmp90;
  const Scalar _tmp154 = _tmp148 * sqrt_info(1, 1);
  const Scalar _tmp155 = -_tmp137 * sqrt_info(1, 0) + _tmp139 * sqrt_info(1, 1) -
                         _tmp143 * sqrt_info(1, 0) + _tmp150 * _tmp33 + _tmp154 * _tmp62 +
                         _tmp154 * _tmp74 - _tmp64 * _tmp93 - _tmp90 * _tmp93 - _tmp90 * _tmp95;
  const Scalar _tmp156 = -_tmp101 * _tmp90 - _tmp137 * sqrt_info(2, 0) + _tmp139 * sqrt_info(2, 1) -
                         _tmp143 * sqrt_info(2, 0) + _tmp149 * sqrt_info(2, 1) + _tmp150 * _tmp35 +
                         _tmp151 * sqrt_info(2, 1) - _tmp64 * _tmp98 - _tmp90 * _tmp98;
  const Scalar _tmp157 = _tmp70 * _tmp75;
  const Scalar _tmp158 = _tmp70 * _tmp90;
  const Scalar _tmp159 = 2 * _tmp150;
  const Scalar _tmp160 = 2 * _tmp140;
  const Scalar _tmp161 = _tmp70 * _tmp84;
  const Scalar _tmp162 = std::pow(_tmp70, Scalar(2));
  const Scalar _tmp163 = _tmp162 * _tmp63;
  const Scalar _tmp164 = _tmp162 * _tmp75;
  const Scalar _tmp165 = _tmp114 * _tmp54 - _tmp152 * sqrt_info(0, 1) + _tmp157 * _tmp89 -
                         _tmp158 * sqrt_info(0, 1) - _tmp159 * sqrt_info(0, 1) -
                         _tmp160 * sqrt_info(0, 0) + _tmp161 * sqrt_info(0, 0) +
                         _tmp163 * sqrt_info(0, 2) + _tmp164 * sqrt_info(0, 2);
  const Scalar _tmp166 = _tmp119 * _tmp54 - _tmp152 * sqrt_info(1, 1) + _tmp157 * _tmp95 -
                         _tmp158 * sqrt_info(1, 1) - _tmp159 * sqrt_info(1, 1) -
                         _tmp160 * sqrt_info(1, 0) + _tmp161 * sqrt_info(1, 0) +
                         _tmp163 * sqrt_info(1, 2) + _tmp164 * sqrt_info(1, 2);
  const Scalar _tmp167 = _tmp100 * _tmp70 + _tmp101 * _tmp157 + _tmp122 * _tmp54 -
                         _tmp152 * sqrt_info(2, 1) - _tmp158 * sqrt_info(2, 1) -
                         _tmp159 * sqrt_info(2, 1) - _tmp160 * sqrt_info(2, 0) +
                         _tmp163 * sqrt_info(2, 2) + _tmp164 * sqrt_info(2, 2);

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);

    _res(0, 0) = _tmp32;
    _res(1, 0) = _tmp34;
    _res(2, 0) = _tmp36;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 3, 12>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp92;
    _jacobian(1, 0) = _tmp97;
    _jacobian(2, 0) = _tmp103;
    _jacobian(0, 1) = _tmp117;
    _jacobian(1, 1) = _tmp120;
    _jacobian(2, 1) = _tmp123;
    _jacobian(0, 2) = _tmp133;
    _jacobian(1, 2) = _tmp135;
    _jacobian(2, 2) = _tmp136;
    _jacobian(0, 3) = 0;
    _jacobian(1, 3) = 0;
    _jacobian(2, 3) = 0;
    _jacobian(0, 4) = 0;
    _jacobian(1, 4) = 0;
    _jacobian(2, 4) = 0;
    _jacobian(0, 5) = 0;
    _jacobian(1, 5) = 0;
    _jacobian(2, 5) = 0;
    _jacobian(0, 6) = _tmp145;
    _jacobian(1, 6) = _tmp146;
    _jacobian(2, 6) = _tmp147;
    _jacobian(0, 7) = _tmp153;
    _jacobian(1, 7) = _tmp155;
    _jacobian(2, 7) = _tmp156;
    _jacobian(0, 8) = _tmp165;
    _jacobian(1, 8) = _tmp166;
    _jacobian(2, 8) = _tmp167;
    _jacobian(0, 9) = 0;
    _jacobian(1, 9) = 0;
    _jacobian(2, 9) = 0;
    _jacobian(0, 10) = 0;
    _jacobian(1, 10) = 0;
    _jacobian(2, 10) = 0;
    _jacobian(0, 11) = 0;
    _jacobian(1, 11) = 0;
    _jacobian(2, 11) = 0;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 12, 12>& _hessian = (*hessian);

    _hessian.setZero();

    _hessian(0, 0) =
        std::pow(_tmp103, Scalar(2)) + std::pow(_tmp92, Scalar(2)) + std::pow(_tmp97, Scalar(2));
    _hessian(1, 0) = _tmp103 * _tmp123 + _tmp117 * _tmp92 + _tmp120 * _tmp97;
    _hessian(2, 0) = _tmp103 * _tmp136 + _tmp133 * _tmp92 + _tmp135 * _tmp97;
    _hessian(6, 0) = _tmp103 * _tmp147 + _tmp145 * _tmp92 + _tmp146 * _tmp97;
    _hessian(7, 0) = _tmp103 * _tmp156 + _tmp153 * _tmp92 + _tmp155 * _tmp97;
    _hessian(8, 0) = _tmp103 * _tmp167 + _tmp165 * _tmp92 + _tmp166 * _tmp97;
    _hessian(1, 1) =
        std::pow(_tmp117, Scalar(2)) + std::pow(_tmp120, Scalar(2)) + std::pow(_tmp123, Scalar(2));
    _hessian(2, 1) = _tmp117 * _tmp133 + _tmp120 * _tmp135 + _tmp123 * _tmp136;
    _hessian(6, 1) = _tmp117 * _tmp145 + _tmp120 * _tmp146 + _tmp123 * _tmp147;
    _hessian(7, 1) = _tmp117 * _tmp153 + _tmp120 * _tmp155 + _tmp123 * _tmp156;
    _hessian(8, 1) = _tmp117 * _tmp165 + _tmp120 * _tmp166 + _tmp123 * _tmp167;
    _hessian(2, 2) =
        std::pow(_tmp133, Scalar(2)) + std::pow(_tmp135, Scalar(2)) + std::pow(_tmp136, Scalar(2));
    _hessian(6, 2) = _tmp133 * _tmp145 + _tmp135 * _tmp146 + _tmp136 * _tmp147;
    _hessian(7, 2) = _tmp133 * _tmp153 + _tmp135 * _tmp155 + _tmp136 * _tmp156;
    _hessian(8, 2) = _tmp133 * _tmp165 + _tmp135 * _tmp166 + _tmp136 * _tmp167;
    _hessian(6, 6) =
        std::pow(_tmp145, Scalar(2)) + std::pow(_tmp146, Scalar(2)) + std::pow(_tmp147, Scalar(2));
    _hessian(7, 6) = _tmp145 * _tmp153 + _tmp146 * _tmp155 + _tmp147 * _tmp156;
    _hessian(8, 6) = _tmp145 * _tmp165 + _tmp146 * _tmp166 + _tmp147 * _tmp167;
    _hessian(7, 7) =
        std::pow(_tmp153, Scalar(2)) + std::pow(_tmp155, Scalar(2)) + std::pow(_tmp156, Scalar(2));
    _hessian(8, 7) = _tmp153 * _tmp165 + _tmp155 * _tmp166 + _tmp156 * _tmp167;
    _hessian(8, 8) =
        std::pow(_tmp165, Scalar(2)) + std::pow(_tmp166, Scalar(2)) + std::pow(_tmp167, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 12, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp103 * _tmp36 + _tmp32 * _tmp92 + _tmp34 * _tmp97;
    _rhs(1, 0) = _tmp117 * _tmp32 + _tmp120 * _tmp34 + _tmp123 * _tmp36;
    _rhs(2, 0) = _tmp133 * _tmp32 + _tmp135 * _tmp34 + _tmp136 * _tmp36;
    _rhs(3, 0) = 0;
    _rhs(4, 0) = 0;
    _rhs(5, 0) = 0;
    _rhs(6, 0) = _tmp145 * _tmp32 + _tmp146 * _tmp34 + _tmp147 * _tmp36;
    _rhs(7, 0) = _tmp153 * _tmp32 + _tmp155 * _tmp34 + _tmp156 * _tmp36;
    _rhs(8, 0) = _tmp165 * _tmp32 + _tmp166 * _tmp34 + _tmp167 * _tmp36;
    _rhs(9, 0) = 0;
    _rhs(10, 0) = 0;
    _rhs(11, 0) = 0;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
