// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     backends/cpp/templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * Residual that penalizes the difference between between(a, b) and a_T_b.
 *
 * In vector space terms that would be:
 *     (b - a) - a_T_b
 *
 * In lie group terms:
 *     local_coordinates(a_T_b, between(a, b))
 *     to_tangent(compose(inverse(a_T_b), compose(inverse(a), b)))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     jacobian: (3x6) jacobian of res wrt args a (3), b (3)
 *     hessian: (6x6) Gauss-Newton hessian for args a (3), b (3)
 *     rhs: (6x1) Gauss-Newton rhs for args a (3), b (3)
 */
template <typename Scalar>
void BetweenFactorRot3(const sym::Rot3<Scalar>& a, const sym::Rot3<Scalar>& b,
                       const sym::Rot3<Scalar>& a_T_b, const Eigen::Matrix<Scalar, 3, 3>& sqrt_info,
                       const Scalar epsilon, Eigen::Matrix<Scalar, 3, 1>* const res = nullptr,
                       Eigen::Matrix<Scalar, 3, 6>* const jacobian = nullptr,
                       Eigen::Matrix<Scalar, 6, 6>* const hessian = nullptr,
                       Eigen::Matrix<Scalar, 6, 1>* const rhs = nullptr) {
  // Total ops: 671

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _b = b.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _a_T_b = a_T_b.Data();

  // Intermediate terms (164)
  const Scalar _tmp0 = _a[3] * _b[3];
  const Scalar _tmp1 = _a[2] * _b[2];
  const Scalar _tmp2 = _a[0] * _b[0];
  const Scalar _tmp3 = _a[1] * _b[1];
  const Scalar _tmp4 = _tmp0 + _tmp1 + _tmp2 + _tmp3;
  const Scalar _tmp5 = _a[0] * _b[2] - _a[1] * _b[3] - _a[2] * _b[0] + _a[3] * _b[1];
  const Scalar _tmp6 = _a_T_b[0] * _tmp5;
  const Scalar _tmp7 = -_a[0] * _b[3] - _a[1] * _b[2] + _a[2] * _b[1] + _a[3] * _b[0];
  const Scalar _tmp8 = _a_T_b[1] * _tmp7;
  const Scalar _tmp9 = -_a[0] * _b[1] + _a[1] * _b[0] - _a[2] * _b[3] + _a[3] * _b[2];
  const Scalar _tmp10 = _a_T_b[3] * _tmp9;
  const Scalar _tmp11 = _a_T_b[1] * _tmp5;
  const Scalar _tmp12 = _a_T_b[0] * _tmp7;
  const Scalar _tmp13 = -_tmp12;
  const Scalar _tmp14 = _a_T_b[2] * _tmp9;
  const Scalar _tmp15 = -_tmp14;
  const Scalar _tmp16 = _tmp13 + _tmp15;
  const Scalar _tmp17 = _a_T_b[3] * _tmp4 + _tmp11 - _tmp16;
  const Scalar _tmp18 = std::min<Scalar>(std::fabs(_tmp17), 1 - epsilon);
  const Scalar _tmp19 = 2 * (2 * std::min<Scalar>(0, (((_tmp17) > 0) - ((_tmp17) < 0))) + 1) *
                        std::acos(_tmp18) / std::sqrt(Scalar(1 - std::pow(_tmp18, Scalar(2))));
  const Scalar _tmp20 = _tmp19 * (-_a_T_b[2] * _tmp4 + _tmp10 - _tmp6 + _tmp8);
  const Scalar _tmp21 = _a_T_b[0] * _tmp9;
  const Scalar _tmp22 = _a_T_b[3] * _tmp5;
  const Scalar _tmp23 = _a_T_b[2] * _tmp7;
  const Scalar _tmp24 = _tmp22 - _tmp23;
  const Scalar _tmp25 = _tmp21 + _tmp24;
  const Scalar _tmp26 = _tmp19 * (-_a_T_b[1] * _tmp4 + _tmp25);
  const Scalar _tmp27 = _a_T_b[1] * _tmp9;
  const Scalar _tmp28 = -_tmp27;
  const Scalar _tmp29 = _a_T_b[2] * _tmp5;
  const Scalar _tmp30 = _a_T_b[3] * _tmp7;
  const Scalar _tmp31 = _tmp29 + _tmp30;
  const Scalar _tmp32 = _tmp28 + _tmp31;
  const Scalar _tmp33 = _tmp19 * (-_a_T_b[0] * _tmp4 + _tmp32);
  const Scalar _tmp34 =
      _tmp20 * sqrt_info(0, 2) + _tmp26 * sqrt_info(0, 1) + _tmp33 * sqrt_info(0, 0);
  const Scalar _tmp35 =
      _tmp20 * sqrt_info(1, 2) + _tmp26 * sqrt_info(1, 1) + _tmp33 * sqrt_info(1, 0);
  const Scalar _tmp36 =
      _tmp20 * sqrt_info(2, 2) + _tmp26 * sqrt_info(2, 1) + _tmp33 * sqrt_info(2, 0);
  const Scalar _tmp37 = _tmp0 + _tmp1 + _tmp2 + _tmp3;
  const Scalar _tmp38 = _a_T_b[1] * _tmp37;
  const Scalar _tmp39 = _tmp22 + _tmp23;
  const Scalar _tmp40 = _a_T_b[3] * _tmp37;
  const Scalar _tmp41 = _tmp11 + _tmp12;
  const Scalar _tmp42 = _tmp14 + _tmp40 + _tmp41;
  const Scalar _tmp43 = std::fabs(_tmp42);
  const Scalar _tmp44 = epsilon - 1;
  const Scalar _tmp45 = std::min<Scalar>(_tmp43, -_tmp44);
  const Scalar _tmp46 = std::pow(_tmp45, Scalar(2)) - 1;
  const Scalar _tmp47 = -_tmp46;
  const Scalar _tmp48 = 2 / std::sqrt(_tmp47);
  const Scalar _tmp49 = (((_tmp42) > 0) - ((_tmp42) < 0));
  const Scalar _tmp50 = std::min<Scalar>(0, _tmp49) + Scalar(1) / Scalar(2);
  const Scalar _tmp51 = std::acos(_tmp45);
  const Scalar _tmp52 = _tmp50 * _tmp51;
  const Scalar _tmp53 = _tmp48 * _tmp52;
  const Scalar _tmp54 = _tmp53 * (_tmp21 + _tmp38 + _tmp39);
  const Scalar _tmp55 = -_tmp40;
  const Scalar _tmp56 = _tmp11 + _tmp13 + _tmp14 + _tmp55;
  const Scalar _tmp57 = _tmp53 * sqrt_info(0, 0);
  const Scalar _tmp58 = _a_T_b[0] * _tmp37;
  const Scalar _tmp59 = _tmp29 - _tmp30;
  const Scalar _tmp60 = _tmp28 + _tmp58 + _tmp59;
  const Scalar _tmp61 = -_tmp8;
  const Scalar _tmp62 = _a_T_b[2] * _tmp37;
  const Scalar _tmp63 = -_tmp10 + _tmp6;
  const Scalar _tmp64 = _tmp61 + _tmp62 + _tmp63;
  const Scalar _tmp65 = _tmp49 * ((((_tmp43 + _tmp44) > 0) - ((_tmp43 + _tmp44) < 0)) - 1);
  const Scalar _tmp66 = _tmp65 / _tmp46;
  const Scalar _tmp67 = _tmp50 * _tmp66;
  const Scalar _tmp68 = _tmp64 * _tmp67;
  const Scalar _tmp69 = _tmp60 * _tmp68;
  const Scalar _tmp70 = -_tmp58;
  const Scalar _tmp71 = _tmp32 + _tmp70;
  const Scalar _tmp72 = _tmp45 * _tmp65 / (_tmp47 * std::sqrt(_tmp47));
  const Scalar _tmp73 = _tmp52 * _tmp72;
  const Scalar _tmp74 = _tmp60 * _tmp73;
  const Scalar _tmp75 = _tmp71 * _tmp74;
  const Scalar _tmp76 = -_tmp38;
  const Scalar _tmp77 = _tmp25 + _tmp76;
  const Scalar _tmp78 = _tmp67 * _tmp77;
  const Scalar _tmp79 = _tmp60 * _tmp78;
  const Scalar _tmp80 = -_tmp62;
  const Scalar _tmp81 = _tmp63 + _tmp8 + _tmp80;
  const Scalar _tmp82 = _tmp53 * sqrt_info(0, 1);
  const Scalar _tmp83 = _tmp77 * sqrt_info(0, 1);
  const Scalar _tmp84 = _tmp67 * _tmp71;
  const Scalar _tmp85 = _tmp84 * sqrt_info(0, 0);
  const Scalar _tmp86 = _tmp64 * _tmp73;
  const Scalar _tmp87 = _tmp60 * _tmp86;
  const Scalar _tmp88 = -_tmp54 * sqrt_info(0, 2) + _tmp56 * _tmp57 + _tmp60 * _tmp85 -
                        _tmp69 * sqrt_info(0, 2) + _tmp74 * _tmp83 + _tmp75 * sqrt_info(0, 0) +
                        _tmp79 * sqrt_info(0, 1) - _tmp81 * _tmp82 - _tmp87 * sqrt_info(0, 2);
  const Scalar _tmp89 = _tmp53 * sqrt_info(1, 0);
  const Scalar _tmp90 = _tmp53 * _tmp81;
  const Scalar _tmp91 = _tmp77 * sqrt_info(1, 1);
  const Scalar _tmp92 = _tmp84 * sqrt_info(1, 0);
  const Scalar _tmp93 = -_tmp54 * sqrt_info(1, 2) + _tmp56 * _tmp89 + _tmp60 * _tmp92 -
                        _tmp69 * sqrt_info(1, 2) + _tmp74 * _tmp91 + _tmp75 * sqrt_info(1, 0) +
                        _tmp79 * sqrt_info(1, 1) - _tmp87 * sqrt_info(1, 2) -
                        _tmp90 * sqrt_info(1, 1);
  const Scalar _tmp94 = _tmp50 * sqrt_info(2, 0);
  const Scalar _tmp95 = _tmp51 * _tmp94;
  const Scalar _tmp96 = _tmp48 * _tmp95;
  const Scalar _tmp97 = _tmp72 * _tmp95;
  const Scalar _tmp98 = _tmp71 * _tmp97;
  const Scalar _tmp99 = _tmp77 * sqrt_info(2, 1);
  const Scalar _tmp100 = _tmp66 * _tmp94;
  const Scalar _tmp101 = _tmp100 * _tmp71;
  const Scalar _tmp102 = _tmp101 * _tmp60 - _tmp54 * sqrt_info(2, 2) + _tmp56 * _tmp96 +
                         _tmp60 * _tmp98 - _tmp69 * sqrt_info(2, 2) + _tmp74 * _tmp99 +
                         _tmp79 * sqrt_info(2, 1) - _tmp87 * sqrt_info(2, 2) -
                         _tmp90 * sqrt_info(2, 1);
  const Scalar _tmp103 = -_tmp21;
  const Scalar _tmp104 = _tmp103 + _tmp39 + _tmp76;
  const Scalar _tmp105 = _tmp104 * _tmp78;
  const Scalar _tmp106 = _tmp11 + _tmp16 + _tmp40;
  const Scalar _tmp107 = _tmp104 * _tmp73;
  const Scalar _tmp108 = _tmp107 * _tmp71;
  const Scalar _tmp109 = _tmp10 + _tmp6;
  const Scalar _tmp110 = _tmp109 + _tmp62 + _tmp8;
  const Scalar _tmp111 = _tmp53 * (_tmp27 + _tmp59 + _tmp70);
  const Scalar _tmp112 = _tmp104 * _tmp68;
  const Scalar _tmp113 = _tmp104 * _tmp84;
  const Scalar _tmp114 = _tmp104 * _tmp86;
  const Scalar _tmp115 = -_tmp105 * sqrt_info(0, 1) - _tmp106 * _tmp82 - _tmp107 * _tmp83 -
                         _tmp108 * sqrt_info(0, 0) - _tmp110 * _tmp57 - _tmp111 * sqrt_info(0, 2) +
                         _tmp112 * sqrt_info(0, 2) - _tmp113 * sqrt_info(0, 0) +
                         _tmp114 * sqrt_info(0, 2);
  const Scalar _tmp116 = _tmp106 * _tmp53;
  const Scalar _tmp117 = -_tmp105 * sqrt_info(1, 1) - _tmp107 * _tmp91 - _tmp108 * sqrt_info(1, 0) -
                         _tmp110 * _tmp89 - _tmp111 * sqrt_info(1, 2) + _tmp112 * sqrt_info(1, 2) -
                         _tmp113 * sqrt_info(1, 0) + _tmp114 * sqrt_info(1, 2) -
                         _tmp116 * sqrt_info(1, 1);
  const Scalar _tmp118 = -_tmp101 * _tmp104 - _tmp104 * _tmp98 - _tmp105 * sqrt_info(2, 1) -
                         _tmp107 * _tmp99 - _tmp110 * _tmp96 - _tmp111 * sqrt_info(2, 2) +
                         _tmp112 * sqrt_info(2, 2) + _tmp114 * sqrt_info(2, 2) -
                         _tmp116 * sqrt_info(2, 1);
  const Scalar _tmp119 = _tmp103 + _tmp24 + _tmp38;
  const Scalar _tmp120 = _tmp109 + _tmp61 + _tmp80;
  const Scalar _tmp121 = _tmp120 * _tmp78;
  const Scalar _tmp122 = _tmp120 * _tmp73;
  const Scalar _tmp123 = _tmp86 * sqrt_info(0, 2);
  const Scalar _tmp124 = _tmp53 * (_tmp27 + _tmp31 + _tmp58);
  const Scalar _tmp125 = _tmp120 * _tmp68;
  const Scalar _tmp126 = _tmp53 * (_tmp15 + _tmp41 + _tmp55);
  const Scalar _tmp127 = _tmp120 * _tmp71;
  const Scalar _tmp128 = _tmp127 * _tmp73;
  const Scalar _tmp129 = _tmp119 * _tmp57 + _tmp120 * _tmp123 - _tmp120 * _tmp85 -
                         _tmp121 * sqrt_info(0, 1) - _tmp122 * _tmp83 - _tmp124 * sqrt_info(0, 1) +
                         _tmp125 * sqrt_info(0, 2) + _tmp126 * sqrt_info(0, 2) -
                         _tmp128 * sqrt_info(0, 0);
  const Scalar _tmp130 = _tmp120 * _tmp86;
  const Scalar _tmp131 = _tmp119 * _tmp89 - _tmp120 * _tmp92 - _tmp121 * sqrt_info(1, 1) -
                         _tmp122 * _tmp91 - _tmp124 * sqrt_info(1, 1) + _tmp125 * sqrt_info(1, 2) +
                         _tmp126 * sqrt_info(1, 2) - _tmp128 * sqrt_info(1, 0) +
                         _tmp130 * sqrt_info(1, 2);
  const Scalar _tmp132 = -_tmp101 * _tmp120 + _tmp119 * _tmp96 - _tmp121 * sqrt_info(2, 1) -
                         _tmp122 * _tmp99 - _tmp124 * sqrt_info(2, 1) + _tmp125 * sqrt_info(2, 2) +
                         _tmp126 * sqrt_info(2, 2) - _tmp127 * _tmp97 + _tmp130 * sqrt_info(2, 2);
  const Scalar _tmp133 = _tmp53 * _tmp77;
  const Scalar _tmp134 = _tmp77 * _tmp84;
  const Scalar _tmp135 = _tmp68 * _tmp71;
  const Scalar _tmp136 = _tmp53 * _tmp64;
  const Scalar _tmp137 = std::pow(_tmp71, Scalar(2));
  const Scalar _tmp138 = _tmp137 * _tmp67;
  const Scalar _tmp139 = _tmp137 * _tmp73;
  const Scalar _tmp140 = _tmp42 * _tmp48;
  const Scalar _tmp141 = _tmp140 * _tmp52;
  const Scalar _tmp142 = _tmp71 * _tmp73;
  const Scalar _tmp143 = _tmp71 * _tmp86;
  const Scalar _tmp144 = -_tmp133 * sqrt_info(0, 2) + _tmp134 * sqrt_info(0, 1) -
                         _tmp135 * sqrt_info(0, 2) - _tmp136 * sqrt_info(0, 1) +
                         _tmp138 * sqrt_info(0, 0) + _tmp139 * sqrt_info(0, 0) +
                         _tmp141 * sqrt_info(0, 0) + _tmp142 * _tmp83 - _tmp143 * sqrt_info(0, 2);
  const Scalar _tmp145 = -_tmp133 * sqrt_info(1, 2) + _tmp134 * sqrt_info(1, 1) -
                         _tmp135 * sqrt_info(1, 2) - _tmp136 * sqrt_info(1, 1) +
                         _tmp138 * sqrt_info(1, 0) + _tmp139 * sqrt_info(1, 0) +
                         _tmp141 * sqrt_info(1, 0) + _tmp142 * _tmp91 - _tmp143 * sqrt_info(1, 2);
  const Scalar _tmp146 = _tmp100 * _tmp137 - _tmp133 * sqrt_info(2, 2) + _tmp134 * sqrt_info(2, 1) -
                         _tmp135 * sqrt_info(2, 2) - _tmp136 * sqrt_info(2, 1) + _tmp137 * _tmp97 +
                         _tmp140 * _tmp95 + _tmp142 * _tmp99 - _tmp143 * sqrt_info(2, 2);
  const Scalar _tmp147 = std::pow(_tmp77, Scalar(2));
  const Scalar _tmp148 = _tmp147 * _tmp67;
  const Scalar _tmp149 = _tmp68 * _tmp77;
  const Scalar _tmp150 = _tmp147 * _tmp73;
  const Scalar _tmp151 = _tmp53 * _tmp71;
  const Scalar _tmp152 = _tmp142 * _tmp77;
  const Scalar _tmp153 = -_tmp123 * _tmp77 + _tmp141 * sqrt_info(0, 1) + _tmp148 * sqrt_info(0, 1) -
                         _tmp149 * sqrt_info(0, 2) + _tmp150 * sqrt_info(0, 1) +
                         _tmp151 * sqrt_info(0, 2) + _tmp152 * sqrt_info(0, 0) + _tmp57 * _tmp64 +
                         _tmp77 * _tmp85;
  const Scalar _tmp154 = _tmp77 * _tmp86;
  const Scalar _tmp155 = _tmp136 * sqrt_info(1, 0) + _tmp141 * sqrt_info(1, 1) +
                         _tmp148 * sqrt_info(1, 1) - _tmp149 * sqrt_info(1, 2) +
                         _tmp150 * sqrt_info(1, 1) + _tmp151 * sqrt_info(1, 2) +
                         _tmp152 * sqrt_info(1, 0) - _tmp154 * sqrt_info(1, 2) + _tmp77 * _tmp92;
  const Scalar _tmp156 = _tmp147 * sqrt_info(2, 1);
  const Scalar _tmp157 = _tmp101 * _tmp77 + _tmp141 * sqrt_info(2, 1) - _tmp149 * sqrt_info(2, 2) +
                         _tmp151 * sqrt_info(2, 2) - _tmp154 * sqrt_info(2, 2) + _tmp156 * _tmp67 +
                         _tmp156 * _tmp73 + _tmp64 * _tmp96 + _tmp77 * _tmp98;
  const Scalar _tmp158 = std::pow(_tmp64, Scalar(2));
  const Scalar _tmp159 = _tmp158 * _tmp73;
  const Scalar _tmp160 = _tmp158 * _tmp67;
  const Scalar _tmp161 = -_tmp135 * sqrt_info(0, 0) + _tmp141 * sqrt_info(0, 2) -
                         _tmp143 * sqrt_info(0, 0) - _tmp149 * sqrt_info(0, 1) -
                         _tmp151 * sqrt_info(0, 1) + _tmp159 * sqrt_info(0, 2) +
                         _tmp160 * sqrt_info(0, 2) + _tmp57 * _tmp77 - _tmp83 * _tmp86;
  const Scalar _tmp162 =
      _tmp133 * sqrt_info(1, 0) - _tmp135 * sqrt_info(1, 0) + _tmp141 * sqrt_info(1, 2) -
      _tmp143 * sqrt_info(1, 0) - _tmp149 * sqrt_info(1, 1) - _tmp151 * sqrt_info(1, 1) -
      _tmp154 * sqrt_info(1, 1) + _tmp159 * sqrt_info(1, 2) + _tmp160 * sqrt_info(1, 2);
  const Scalar _tmp163 = -_tmp101 * _tmp64 + _tmp141 * sqrt_info(2, 2) - _tmp149 * sqrt_info(2, 1) -
                         _tmp151 * sqrt_info(2, 1) + _tmp159 * sqrt_info(2, 2) +
                         _tmp160 * sqrt_info(2, 2) - _tmp64 * _tmp98 + _tmp77 * _tmp96 -
                         _tmp86 * _tmp99;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);

    _res(0, 0) = _tmp34;
    _res(1, 0) = _tmp35;
    _res(2, 0) = _tmp36;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 3, 6>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp88;
    _jacobian(1, 0) = _tmp93;
    _jacobian(2, 0) = _tmp102;
    _jacobian(0, 1) = _tmp115;
    _jacobian(1, 1) = _tmp117;
    _jacobian(2, 1) = _tmp118;
    _jacobian(0, 2) = _tmp129;
    _jacobian(1, 2) = _tmp131;
    _jacobian(2, 2) = _tmp132;
    _jacobian(0, 3) = _tmp144;
    _jacobian(1, 3) = _tmp145;
    _jacobian(2, 3) = _tmp146;
    _jacobian(0, 4) = _tmp153;
    _jacobian(1, 4) = _tmp155;
    _jacobian(2, 4) = _tmp157;
    _jacobian(0, 5) = _tmp161;
    _jacobian(1, 5) = _tmp162;
    _jacobian(2, 5) = _tmp163;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _hessian = (*hessian);

    _hessian(0, 0) =
        std::pow(_tmp102, Scalar(2)) + std::pow(_tmp88, Scalar(2)) + std::pow(_tmp93, Scalar(2));
    _hessian(1, 0) = _tmp102 * _tmp118 + _tmp115 * _tmp88 + _tmp117 * _tmp93;
    _hessian(2, 0) = _tmp102 * _tmp132 + _tmp129 * _tmp88 + _tmp131 * _tmp93;
    _hessian(3, 0) = _tmp102 * _tmp146 + _tmp144 * _tmp88 + _tmp145 * _tmp93;
    _hessian(4, 0) = _tmp102 * _tmp157 + _tmp153 * _tmp88 + _tmp155 * _tmp93;
    _hessian(5, 0) = _tmp102 * _tmp163 + _tmp161 * _tmp88 + _tmp162 * _tmp93;
    _hessian(0, 1) = 0;
    _hessian(1, 1) =
        std::pow(_tmp115, Scalar(2)) + std::pow(_tmp117, Scalar(2)) + std::pow(_tmp118, Scalar(2));
    _hessian(2, 1) = _tmp115 * _tmp129 + _tmp117 * _tmp131 + _tmp118 * _tmp132;
    _hessian(3, 1) = _tmp115 * _tmp144 + _tmp117 * _tmp145 + _tmp118 * _tmp146;
    _hessian(4, 1) = _tmp115 * _tmp153 + _tmp117 * _tmp155 + _tmp118 * _tmp157;
    _hessian(5, 1) = _tmp115 * _tmp161 + _tmp117 * _tmp162 + _tmp118 * _tmp163;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) =
        std::pow(_tmp129, Scalar(2)) + std::pow(_tmp131, Scalar(2)) + std::pow(_tmp132, Scalar(2));
    _hessian(3, 2) = _tmp129 * _tmp144 + _tmp131 * _tmp145 + _tmp132 * _tmp146;
    _hessian(4, 2) = _tmp129 * _tmp153 + _tmp131 * _tmp155 + _tmp132 * _tmp157;
    _hessian(5, 2) = _tmp129 * _tmp161 + _tmp131 * _tmp162 + _tmp132 * _tmp163;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) =
        std::pow(_tmp144, Scalar(2)) + std::pow(_tmp145, Scalar(2)) + std::pow(_tmp146, Scalar(2));
    _hessian(4, 3) = _tmp144 * _tmp153 + _tmp145 * _tmp155 + _tmp146 * _tmp157;
    _hessian(5, 3) = _tmp144 * _tmp161 + _tmp145 * _tmp162 + _tmp146 * _tmp163;
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) =
        std::pow(_tmp153, Scalar(2)) + std::pow(_tmp155, Scalar(2)) + std::pow(_tmp157, Scalar(2));
    _hessian(5, 4) = _tmp153 * _tmp161 + _tmp155 * _tmp162 + _tmp157 * _tmp163;
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) =
        std::pow(_tmp161, Scalar(2)) + std::pow(_tmp162, Scalar(2)) + std::pow(_tmp163, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp102 * _tmp36 + _tmp34 * _tmp88 + _tmp35 * _tmp93;
    _rhs(1, 0) = _tmp115 * _tmp34 + _tmp117 * _tmp35 + _tmp118 * _tmp36;
    _rhs(2, 0) = _tmp129 * _tmp34 + _tmp131 * _tmp35 + _tmp132 * _tmp36;
    _rhs(3, 0) = _tmp144 * _tmp34 + _tmp145 * _tmp35 + _tmp146 * _tmp36;
    _rhs(4, 0) = _tmp153 * _tmp34 + _tmp155 * _tmp35 + _tmp157 * _tmp36;
    _rhs(5, 0) = _tmp161 * _tmp34 + _tmp162 * _tmp35 + _tmp163 * _tmp36;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
