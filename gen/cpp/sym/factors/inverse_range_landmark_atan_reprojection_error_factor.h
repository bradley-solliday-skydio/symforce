// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     backends/cpp/templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Return the 2dof residual of reprojecting the landmark into the target camera and comparing
 * against the correspondence in the target camera.
 *
 * The landmark is specified as a pixel in the source camera and an inverse range; this means the
 * landmark is fixed in the source camera and always has residual 0 there (this 0 residual is not
 * returned, only the residual in the target camera is returned).
 *
 * The norm of the residual is whitened using the Barron noise model.  Whitening each component of
 * the reprojection error separately would result in rejecting individual components as outliers.
 * Instead, we minimize the whitened norm of the full reprojection error for each point.  See the
 * docstring for `NoiseModel.whiten_norm` for more information on this, and the docstring of
 * `BarronNoiseModel` for more information on the noise model.
 *
 * Args:
 *     source_pose: The pose of the source camera
 *     source_calibration_storage: The storage vector of the source camera calibration
 *     target_pose: The pose of the target camera
 *     target_calibration_storage: The storage vector of the target camera calibration
 *     source_inverse_range: The inverse range of the landmark in the source camera
 *     source_pixel: The location of the landmark in the source camera
 *     target_pixel: The location of the correspondence in the target camera
 *     weight: The weight of the factor
 *     gnc_mu: The mu convexity parameter for the Barron noise model
 *     gnc_scale: The scale parameter for the Barron noise model
 *     epsilon: Small positive value
 *     camera_model_class: The subclass of CameraCal to use as the camera model
 *
 * Outputs:
 *     res: 2dof residual of the reprojection
 *     jacobian: (2x13) jacobian of res wrt args source_pose (6), target_pose (6),
 *               source_inverse_range (1)
 *     hessian: (13x13) Gauss-Newton hessian for args source_pose (6), target_pose (6),
 *              source_inverse_range (1)
 *     rhs: (13x1) Gauss-Newton rhs for args source_pose (6), target_pose (6), source_inverse_range
 *          (1)
 */
template <typename Scalar>
void InverseRangeLandmarkAtanReprojectionErrorFactor(
    const sym::Pose3<Scalar>& source_pose,
    const Eigen::Matrix<Scalar, 5, 1>& source_calibration_storage,
    const sym::Pose3<Scalar>& target_pose,
    const Eigen::Matrix<Scalar, 5, 1>& target_calibration_storage,
    const Scalar source_inverse_range, const Eigen::Matrix<Scalar, 2, 1>& source_pixel,
    const Eigen::Matrix<Scalar, 2, 1>& target_pixel, const Scalar weight, const Scalar gnc_mu,
    const Scalar gnc_scale, const Scalar epsilon, Eigen::Matrix<Scalar, 2, 1>* const res = nullptr,
    Eigen::Matrix<Scalar, 2, 13>* const jacobian = nullptr,
    Eigen::Matrix<Scalar, 13, 13>* const hessian = nullptr,
    Eigen::Matrix<Scalar, 13, 1>* const rhs = nullptr) {
  // Total ops: 1303

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _source_pose = source_pose.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _target_pose = target_pose.Data();

  // Intermediate terms (370)
  const Scalar _tmp0 = std::pow(_target_pose[1], Scalar(2));
  const Scalar _tmp1 = -2 * _tmp0;
  const Scalar _tmp2 = std::pow(_target_pose[2], Scalar(2));
  const Scalar _tmp3 = 1 - 2 * _tmp2;
  const Scalar _tmp4 = std::pow(_source_pose[1], Scalar(2));
  const Scalar _tmp5 = -2 * _tmp4;
  const Scalar _tmp6 = std::pow(_source_pose[2], Scalar(2));
  const Scalar _tmp7 = 1 - 2 * _tmp6;
  const Scalar _tmp8 = -source_calibration_storage(2, 0) + source_pixel(0, 0);
  const Scalar _tmp9 = std::tan(Scalar(0.5) * source_calibration_storage(4, 0));
  const Scalar _tmp10 = Scalar(1.0) / (_tmp9);
  const Scalar _tmp11 = _tmp10 / source_calibration_storage(0, 0);
  const Scalar _tmp12 = -source_calibration_storage(3, 0) + source_pixel(1, 0);
  const Scalar _tmp13 = std::pow(source_calibration_storage(1, 0), Scalar(-2));
  const Scalar _tmp14 = std::pow(_tmp12, Scalar(2)) * _tmp13;
  const Scalar _tmp15 = std::pow(_tmp9, Scalar(-2));
  const Scalar _tmp16 = std::pow(source_calibration_storage(0, 0), Scalar(-2));
  const Scalar _tmp17 = _tmp16 * std::pow(_tmp8, Scalar(2));
  const Scalar _tmp18 = _tmp14 + _tmp17 + epsilon;
  const Scalar _tmp19 = std::sqrt(_tmp18);
  const Scalar _tmp20 = _tmp19 * source_calibration_storage(4, 0);
  const Scalar _tmp21 = std::tan(_tmp20);
  const Scalar _tmp22 = (Scalar(1) / Scalar(4)) * _tmp15 * std::pow(_tmp21, Scalar(2)) / _tmp18;
  const Scalar _tmp23 =
      std::pow(Scalar(_tmp14 * _tmp22 + _tmp17 * _tmp22 + 1), Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp24 = (Scalar(1) / Scalar(2)) * _tmp21 * _tmp23 / _tmp19;
  const Scalar _tmp25 = _tmp11 * _tmp24 * _tmp8;
  const Scalar _tmp26 = _source_pose[0] * _source_pose[2];
  const Scalar _tmp27 = 2 * _tmp26;
  const Scalar _tmp28 = _source_pose[1] * _source_pose[3];
  const Scalar _tmp29 = 2 * _tmp28;
  const Scalar _tmp30 = _source_pose[0] * _source_pose[1];
  const Scalar _tmp31 = 2 * _tmp30;
  const Scalar _tmp32 = _source_pose[2] * _source_pose[3];
  const Scalar _tmp33 = 2 * _tmp32;
  const Scalar _tmp34 = _tmp10 / source_calibration_storage(1, 0);
  const Scalar _tmp35 = _tmp12 * _tmp24 * _tmp34;
  const Scalar _tmp36 = _tmp23 * (_tmp27 + _tmp29) + _tmp25 * (_tmp5 + _tmp7) +
                        _tmp35 * (_tmp31 - _tmp33) +
                        source_inverse_range * (_source_pose[4] - _target_pose[4]);
  const Scalar _tmp37 = _target_pose[2] * _target_pose[3];
  const Scalar _tmp38 = 2 * _tmp37;
  const Scalar _tmp39 = _target_pose[0] * _target_pose[1];
  const Scalar _tmp40 = 2 * _tmp39;
  const Scalar _tmp41 = std::pow(_source_pose[0], Scalar(2));
  const Scalar _tmp42 = -2 * _tmp41;
  const Scalar _tmp43 = _source_pose[0] * _source_pose[3];
  const Scalar _tmp44 = 2 * _tmp43;
  const Scalar _tmp45 = _source_pose[1] * _source_pose[2];
  const Scalar _tmp46 = 2 * _tmp45;
  const Scalar _tmp47 = _tmp23 * (-_tmp44 + _tmp46) + _tmp25 * (_tmp31 + _tmp33) +
                        _tmp35 * (_tmp42 + _tmp7) +
                        source_inverse_range * (_source_pose[5] - _target_pose[5]);
  const Scalar _tmp48 = _target_pose[0] * _target_pose[2];
  const Scalar _tmp49 = 2 * _tmp48;
  const Scalar _tmp50 = _target_pose[1] * _target_pose[3];
  const Scalar _tmp51 = 2 * _tmp50;
  const Scalar _tmp52 = _tmp23 * (_tmp42 + _tmp5 + 1) + _tmp25 * (_tmp27 - _tmp29) +
                        _tmp35 * (_tmp44 + _tmp46) +
                        source_inverse_range * (_source_pose[6] - _target_pose[6]);
  const Scalar _tmp53 =
      _tmp36 * (_tmp1 + _tmp3) + _tmp47 * (_tmp38 + _tmp40) + _tmp52 * (_tmp49 - _tmp51);
  const Scalar _tmp54 = Scalar(1.0) / (target_calibration_storage(4, 0));
  const Scalar _tmp55 = _tmp54 * target_calibration_storage(0, 0);
  const Scalar _tmp56 = _target_pose[1] * _target_pose[2];
  const Scalar _tmp57 = 2 * _tmp56;
  const Scalar _tmp58 = _target_pose[0] * _target_pose[3];
  const Scalar _tmp59 = 2 * _tmp58;
  const Scalar _tmp60 = std::pow(_target_pose[0], Scalar(2));
  const Scalar _tmp61 = -2 * _tmp60;
  const Scalar _tmp62 =
      _tmp36 * (_tmp49 + _tmp51) + _tmp47 * (_tmp57 - _tmp59) + _tmp52 * (_tmp1 + _tmp61 + 1);
  const Scalar _tmp63 = std::max<Scalar>(epsilon, std::fabs(_tmp62));
  const Scalar _tmp64 = std::pow(_tmp63, Scalar(-2));
  const Scalar _tmp65 =
      _tmp36 * (-_tmp38 + _tmp40) + _tmp47 * (_tmp3 + _tmp61) + _tmp52 * (_tmp57 + _tmp59);
  const Scalar _tmp66 = std::sqrt(Scalar(std::pow(_tmp53, Scalar(2)) * _tmp64 +
                                         _tmp64 * std::pow(_tmp65, Scalar(2)) + epsilon));
  const Scalar _tmp67 = std::tan(Scalar(0.5) * target_calibration_storage(4, 0));
  const Scalar _tmp68 = 2 * _tmp67;
  const Scalar _tmp69 = std::atan(_tmp66 * _tmp68) / (_tmp63 * _tmp66);
  const Scalar _tmp70 = target_calibration_storage(2, 0) - target_pixel(0, 0);
  const Scalar _tmp71 = _tmp53 * _tmp55 * _tmp69 + _tmp70;
  const Scalar _tmp72 = std::sqrt(weight);
  const Scalar _tmp73 = Scalar(1.0) / (epsilon - gnc_mu + 1);
  const Scalar _tmp74 = epsilon + std::fabs(_tmp73);
  const Scalar _tmp75 = 2 - _tmp73;
  const Scalar _tmp76 =
      _tmp75 + epsilon * (2 * std::min<Scalar>(0, (((_tmp75) > 0) - ((_tmp75) < 0))) + 1);
  const Scalar _tmp77 = std::pow(gnc_scale, Scalar(-2));
  const Scalar _tmp78 = _tmp54 * target_calibration_storage(1, 0);
  const Scalar _tmp79 = target_calibration_storage(3, 0) - target_pixel(1, 0);
  const Scalar _tmp80 = _tmp65 * _tmp69 * _tmp78 + _tmp79;
  const Scalar _tmp81 = std::pow(_tmp71, Scalar(2)) + std::pow(_tmp80, Scalar(2)) + epsilon;
  const Scalar _tmp82 = Scalar(M_PI_2);
  const Scalar _tmp83 = std::sqrt(Scalar(2)) * _tmp72 *
                        std::sqrt(Scalar(_tmp74 *
                                         (std::pow(Scalar(1 + _tmp77 * _tmp81 / _tmp74),
                                                   Scalar((Scalar(1) / Scalar(2)) * _tmp76)) -
                                          1) /
                                         _tmp76)) *
                        std::max<Scalar>(0, (((_tmp62) > 0) - ((_tmp62) < 0))) *
                        std::max<Scalar>(0, (((_tmp82 - std::fabs(_tmp20)) > 0) -
                                             ((_tmp82 - std::fabs(_tmp20)) < 0))) /
                        std::sqrt(_tmp81);
  const Scalar _tmp84 = _tmp71 * _tmp83;
  const Scalar _tmp85 = _tmp80 * _tmp83;
  const Scalar _tmp86 = _tmp37 - _tmp39;
  const Scalar _tmp87 = _tmp26 + _tmp28;
  const Scalar _tmp88 = source_calibration_storage(3, 0) - source_pixel(1, 0);
  const Scalar _tmp89 = _tmp13 * std::pow(_tmp88, Scalar(2));
  const Scalar _tmp90 = source_calibration_storage(2, 0) - source_pixel(0, 0);
  const Scalar _tmp91 = _tmp16 * std::pow(_tmp90, Scalar(2));
  const Scalar _tmp92 = _tmp89 + _tmp91 + epsilon;
  const Scalar _tmp93 = std::sqrt(_tmp92);
  const Scalar _tmp94 = _tmp93 * source_calibration_storage(4, 0);
  const Scalar _tmp95 = std::tan(_tmp94);
  const Scalar _tmp96 = _tmp15 * std::pow(_tmp95, Scalar(2)) / _tmp92;
  const Scalar _tmp97 = std::pow(Scalar((Scalar(1) / Scalar(4)) * _tmp89 * _tmp96 +
                                        (Scalar(1) / Scalar(4)) * _tmp91 * _tmp96 + 1),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp98 = 2 * _tmp97;
  const Scalar _tmp99 = _tmp30 - _tmp32;
  const Scalar _tmp100 = _tmp95 / _tmp93;
  const Scalar _tmp101 = _tmp100 * _tmp97;
  const Scalar _tmp102 = _tmp34 * _tmp88;
  const Scalar _tmp103 = _tmp101 * _tmp102;
  const Scalar _tmp104 = _tmp4 + _tmp6;
  const Scalar _tmp105 = _tmp11 * _tmp90;
  const Scalar _tmp106 = _tmp101 * _tmp105;
  const Scalar _tmp107 = -_source_pose[4] + _target_pose[4];
  const Scalar _tmp108 = -_tmp103 * _tmp99 + _tmp106 * (_tmp104 + Scalar(-1) / Scalar(2)) -
                         _tmp107 * source_inverse_range + _tmp87 * _tmp98;
  const Scalar _tmp109 = _tmp108 * _tmp86;
  const Scalar _tmp110 = _tmp60 + Scalar(-1) / Scalar(2);
  const Scalar _tmp111 = _tmp110 + _tmp2;
  const Scalar _tmp112 = _tmp43 - _tmp45;
  const Scalar _tmp113 = _tmp41 + Scalar(-1) / Scalar(2);
  const Scalar _tmp114 = _tmp30 + _tmp32;
  const Scalar _tmp115 = _tmp101 * _tmp114;
  const Scalar _tmp116 = -_source_pose[5] + _target_pose[5];
  const Scalar _tmp117 = _tmp103 * (_tmp113 + _tmp6) - _tmp105 * _tmp115 - _tmp112 * _tmp98 -
                         _tmp116 * source_inverse_range;
  const Scalar _tmp118 = _tmp56 + _tmp58;
  const Scalar _tmp119 = _tmp43 + _tmp45;
  const Scalar _tmp120 = _tmp101 * _tmp119;
  const Scalar _tmp121 = -_source_pose[6] + _target_pose[6];
  const Scalar _tmp122 = _tmp26 - _tmp28;
  const Scalar _tmp123 = -_tmp102 * _tmp120 - _tmp106 * _tmp122 - _tmp121 * source_inverse_range -
                         _tmp98 * (_tmp113 + _tmp4);
  const Scalar _tmp124 = _tmp118 * _tmp123;
  const Scalar _tmp125 = _tmp109 + _tmp111 * _tmp117 - _tmp124;
  const Scalar _tmp126 = _tmp0 + _tmp2 + Scalar(-1) / Scalar(2);
  const Scalar _tmp127 = _tmp37 + _tmp39;
  const Scalar _tmp128 = _tmp117 * _tmp127;
  const Scalar _tmp129 = _tmp48 - _tmp50;
  const Scalar _tmp130 = _tmp123 * _tmp129;
  const Scalar _tmp131 = _tmp108 * _tmp126 - _tmp128 - _tmp130;
  const Scalar _tmp132 = std::pow(_tmp131, Scalar(2));
  const Scalar _tmp133 = _tmp48 + _tmp50;
  const Scalar _tmp134 = _tmp108 * _tmp133;
  const Scalar _tmp135 = _tmp56 - _tmp58;
  const Scalar _tmp136 = _tmp117 * _tmp135;
  const Scalar _tmp137 = _tmp0 + _tmp110;
  const Scalar _tmp138 = -_tmp123 * _tmp137 + _tmp134 + _tmp136;
  const Scalar _tmp139 = 2 * std::fabs(_tmp138);
  const Scalar _tmp140 = std::max<Scalar>(_tmp139, epsilon);
  const Scalar _tmp141 = std::pow(_tmp140, Scalar(-2));
  const Scalar _tmp142 = 4 * _tmp141;
  const Scalar _tmp143 = std::pow(_tmp125, Scalar(2));
  const Scalar _tmp144 = _tmp132 * _tmp142 + _tmp142 * _tmp143 + epsilon;
  const Scalar _tmp145 = std::sqrt(_tmp144);
  const Scalar _tmp146 = Scalar(1.0) / (_tmp145);
  const Scalar _tmp147 = Scalar(1.0) / (_tmp140);
  const Scalar _tmp148 = std::atan(_tmp145 * _tmp68);
  const Scalar _tmp149 = _tmp147 * _tmp148;
  const Scalar _tmp150 = _tmp146 * _tmp149;
  const Scalar _tmp151 = _tmp150 * _tmp78;
  const Scalar _tmp152 = 2 * _tmp151;
  const Scalar _tmp153 = -_tmp125 * _tmp152 + _tmp79;
  const Scalar _tmp154 = std::pow(_source_pose[3], Scalar(2));
  const Scalar _tmp155 = -_tmp41;
  const Scalar _tmp156 = -_tmp4 + _tmp6;
  const Scalar _tmp157 = (Scalar(1) / Scalar(2)) * _tmp154 + (Scalar(1) / Scalar(2)) * _tmp155 +
                         (Scalar(1) / Scalar(2)) * _tmp156;
  const Scalar _tmp158 = -_tmp103 * _tmp157 - _tmp119 * _tmp98;
  const Scalar _tmp159 = -_tmp103 * _tmp87 - _tmp98 * _tmp99;
  const Scalar _tmp160 = -_tmp154;
  const Scalar _tmp161 = _tmp97 * (_tmp156 + _tmp160 + _tmp41);
  const Scalar _tmp162 = _tmp103 * _tmp112 + _tmp161;
  const Scalar _tmp163 = -_tmp133 * _tmp159 - _tmp135 * _tmp162 + _tmp137 * _tmp158;
  const Scalar _tmp164 = (((_tmp138) > 0) - ((_tmp138) < 0));
  const Scalar _tmp165 = _tmp164 * ((((-_tmp139 + epsilon) > 0) - ((-_tmp139 + epsilon) < 0)) - 1);
  const Scalar _tmp166 = _tmp165 / [&]() {
    const Scalar base = _tmp140;
    return base * base * base;
  }();
  const Scalar _tmp167 = _tmp132 * _tmp166;
  const Scalar _tmp168 = -_tmp111 * _tmp162 + _tmp118 * _tmp158 - _tmp159 * _tmp86;
  const Scalar _tmp169 = _tmp125 * _tmp141;
  const Scalar _tmp170 = _tmp143 * _tmp166;
  const Scalar _tmp171 = -_tmp126 * _tmp159 + _tmp127 * _tmp162 + _tmp129 * _tmp158;
  const Scalar _tmp172 = _tmp131 * _tmp141;
  const Scalar _tmp173 =
      _tmp163 * _tmp167 + _tmp163 * _tmp170 + _tmp168 * _tmp169 + _tmp171 * _tmp172;
  const Scalar _tmp174 = _tmp125 * _tmp78;
  const Scalar _tmp175 =
      _tmp147 / (_tmp144 * (_tmp144 * std::pow(_tmp67, Scalar(2)) + Scalar(1) / Scalar(4)));
  const Scalar _tmp176 = 4 * _tmp175 * _tmp67;
  const Scalar _tmp177 = _tmp174 * _tmp176;
  const Scalar _tmp178 = _tmp169 * _tmp78;
  const Scalar _tmp179 = _tmp146 * _tmp148 * _tmp165;
  const Scalar _tmp180 = 2 * _tmp179;
  const Scalar _tmp181 = _tmp178 * _tmp180;
  const Scalar _tmp182 = _tmp149 / (_tmp144 * std::sqrt(_tmp144));
  const Scalar _tmp183 = 8 * _tmp182;
  const Scalar _tmp184 = _tmp174 * _tmp183;
  const Scalar _tmp185 =
      _tmp152 * _tmp168 + _tmp163 * _tmp181 + _tmp173 * _tmp177 - _tmp173 * _tmp184;
  const Scalar _tmp186 = _tmp150 * _tmp55;
  const Scalar _tmp187 = 2 * _tmp186;
  const Scalar _tmp188 = -_tmp131 * _tmp187 + _tmp70;
  const Scalar _tmp189 = _tmp172 * _tmp55;
  const Scalar _tmp190 = _tmp180 * _tmp189;
  const Scalar _tmp191 = _tmp131 * _tmp55;
  const Scalar _tmp192 = _tmp183 * _tmp191;
  const Scalar _tmp193 = _tmp176 * _tmp191;
  const Scalar _tmp194 =
      _tmp163 * _tmp190 + _tmp171 * _tmp187 - _tmp173 * _tmp192 + _tmp173 * _tmp193;
  const Scalar _tmp195 = _tmp153 * _tmp185 + _tmp188 * _tmp194;
  const Scalar _tmp196 = std::pow(_tmp153, Scalar(2)) + std::pow(_tmp188, Scalar(2)) + epsilon;
  const Scalar _tmp197 = Scalar(1.0) / (-epsilon + gnc_mu - 1);
  const Scalar _tmp198 = epsilon + std::fabs(_tmp197);
  const Scalar _tmp199 = _tmp196 * _tmp77 / _tmp198 + 1;
  const Scalar _tmp200 = _tmp197 + 2;
  const Scalar _tmp201 = _tmp200 + 2 * epsilon *
                                       (std::min<Scalar>(0, (((_tmp200) > 0) - ((_tmp200) < 0))) +
                                        Scalar(1) / Scalar(2));
  const Scalar _tmp202 =
      std::sqrt(Scalar(2)) *
      std::sqrt(Scalar(
          _tmp198 * (std::pow(_tmp199, Scalar((Scalar(1) / Scalar(2)) * _tmp201)) - 1) / _tmp201));
  const Scalar _tmp203 = std::max<Scalar>(0, _tmp164);
  const Scalar _tmp204 = std::max<Scalar>(
      0, (((_tmp82 - std::fabs(_tmp94)) > 0) - ((_tmp82 - std::fabs(_tmp94)) < 0)));
  const Scalar _tmp205 = _tmp202 * _tmp203 * _tmp204 * _tmp72;
  const Scalar _tmp206 = _tmp205 / (_tmp196 * std::sqrt(_tmp196));
  const Scalar _tmp207 = _tmp188 * _tmp206;
  const Scalar _tmp208 = std::pow(_tmp196, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp209 = std::pow(_tmp199, Scalar((Scalar(1) / Scalar(2)) * _tmp201 - 1)) *
                         _tmp203 * _tmp204 * _tmp208 * _tmp72 * _tmp77 / _tmp202;
  const Scalar _tmp210 = _tmp188 * _tmp209;
  const Scalar _tmp211 = _tmp205 * _tmp208;
  const Scalar _tmp212 = -_tmp194 * _tmp211 + _tmp195 * _tmp207 - _tmp195 * _tmp210;
  const Scalar _tmp213 = _tmp153 * _tmp209;
  const Scalar _tmp214 = _tmp153 * _tmp206;
  const Scalar _tmp215 = _tmp185 * _tmp211 + _tmp195 * _tmp213 - _tmp195 * _tmp214;
  const Scalar _tmp216 = _tmp97 * (_tmp104 + _tmp155 + _tmp160);
  const Scalar _tmp217 = -_tmp106 * _tmp87 + _tmp216;
  const Scalar _tmp218 = -_tmp106 * _tmp112 + _tmp114 * _tmp98;
  const Scalar _tmp219 = _tmp106 * _tmp157 + _tmp122 * _tmp98;
  const Scalar _tmp220 = _tmp126 * _tmp217 + _tmp127 * _tmp218 + _tmp129 * _tmp219;
  const Scalar _tmp221 = _tmp133 * _tmp217 - _tmp135 * _tmp218 + _tmp137 * _tmp219;
  const Scalar _tmp222 = -_tmp111 * _tmp218 + _tmp118 * _tmp219 + _tmp217 * _tmp86;
  const Scalar _tmp223 =
      _tmp167 * _tmp221 + _tmp169 * _tmp222 + _tmp170 * _tmp221 + _tmp172 * _tmp220;
  const Scalar _tmp224 =
      _tmp187 * _tmp220 + _tmp190 * _tmp221 - _tmp192 * _tmp223 + _tmp193 * _tmp223;
  const Scalar _tmp225 =
      _tmp152 * _tmp222 + _tmp177 * _tmp223 + _tmp181 * _tmp221 - _tmp184 * _tmp223;
  const Scalar _tmp226 = _tmp153 * _tmp225 + _tmp188 * _tmp224;
  const Scalar _tmp227 = -_tmp207 * _tmp226 + _tmp210 * _tmp226 + _tmp211 * _tmp224;
  const Scalar _tmp228 = _tmp211 * _tmp225 + _tmp213 * _tmp226 - _tmp214 * _tmp226;
  const Scalar _tmp229 = (Scalar(1) / Scalar(2)) * _tmp100;
  const Scalar _tmp230 = -_tmp102 * _tmp216 * _tmp229 - _tmp106 * _tmp99;
  const Scalar _tmp231 = _tmp102 * _tmp115 + _tmp105 * _tmp161 * _tmp229;
  const Scalar _tmp232 = _tmp103 * _tmp122 - _tmp105 * _tmp120;
  const Scalar _tmp233 = _tmp111 * _tmp231 - _tmp118 * _tmp232 + _tmp230 * _tmp86;
  const Scalar _tmp234 = _tmp126 * _tmp230 - _tmp127 * _tmp231 - _tmp129 * _tmp232;
  const Scalar _tmp235 = _tmp133 * _tmp230 + _tmp135 * _tmp231 - _tmp137 * _tmp232;
  const Scalar _tmp236 =
      _tmp167 * _tmp235 + _tmp169 * _tmp233 + _tmp170 * _tmp235 + _tmp172 * _tmp234;
  const Scalar _tmp237 = _tmp191 * _tmp236;
  const Scalar _tmp238 =
      -_tmp176 * _tmp237 + _tmp183 * _tmp237 - _tmp187 * _tmp234 - _tmp190 * _tmp235;
  const Scalar _tmp239 =
      -_tmp152 * _tmp233 - _tmp177 * _tmp236 - _tmp181 * _tmp235 + _tmp184 * _tmp236;
  const Scalar _tmp240 = _tmp153 * _tmp239 + _tmp188 * _tmp238;
  const Scalar _tmp241 = -_tmp207 * _tmp240 + _tmp210 * _tmp240 + _tmp211 * _tmp238;
  const Scalar _tmp242 = _tmp211 * _tmp239 + _tmp213 * _tmp240 - _tmp214 * _tmp240;
  const Scalar _tmp243 = _tmp133 * source_inverse_range;
  const Scalar _tmp244 = _tmp172 * source_inverse_range;
  const Scalar _tmp245 = _tmp169 * source_inverse_range;
  const Scalar _tmp246 =
      _tmp126 * _tmp244 + _tmp167 * _tmp243 + _tmp170 * _tmp243 + _tmp245 * _tmp86;
  const Scalar _tmp247 = _tmp193 * _tmp246;
  const Scalar _tmp248 = _tmp244 * _tmp55;
  const Scalar _tmp249 = _tmp133 * _tmp180;
  const Scalar _tmp250 = _tmp248 * _tmp249;
  const Scalar _tmp251 = _tmp192 * _tmp246;
  const Scalar _tmp252 = _tmp187 * source_inverse_range;
  const Scalar _tmp253 = _tmp126 * _tmp252;
  const Scalar _tmp254 = -_tmp247 - _tmp250 + _tmp251 - _tmp253;
  const Scalar _tmp255 = _tmp245 * _tmp78;
  const Scalar _tmp256 = _tmp249 * _tmp255;
  const Scalar _tmp257 = _tmp177 * _tmp246;
  const Scalar _tmp258 = _tmp152 * source_inverse_range;
  const Scalar _tmp259 = _tmp258 * _tmp86;
  const Scalar _tmp260 = _tmp184 * _tmp246;
  const Scalar _tmp261 = -_tmp256 - _tmp257 - _tmp259 + _tmp260;
  const Scalar _tmp262 = _tmp153 * _tmp261 + _tmp188 * _tmp254;
  const Scalar _tmp263 = -_tmp207 * _tmp262 + _tmp210 * _tmp262 + _tmp211 * _tmp254;
  const Scalar _tmp264 = -_tmp211 * _tmp261 - _tmp213 * _tmp262 + _tmp214 * _tmp262;
  const Scalar _tmp265 = _tmp135 * _tmp180;
  const Scalar _tmp266 = _tmp255 * _tmp265;
  const Scalar _tmp267 = _tmp135 * source_inverse_range;
  const Scalar _tmp268 =
      _tmp111 * _tmp245 - _tmp127 * _tmp244 + _tmp167 * _tmp267 + _tmp170 * _tmp267;
  const Scalar _tmp269 = _tmp184 * _tmp268;
  const Scalar _tmp270 = _tmp177 * _tmp268;
  const Scalar _tmp271 = _tmp111 * _tmp258;
  const Scalar _tmp272 = -_tmp266 + _tmp269 - _tmp270 - _tmp271;
  const Scalar _tmp273 = _tmp127 * _tmp252;
  const Scalar _tmp274 = _tmp248 * _tmp265;
  const Scalar _tmp275 = _tmp193 * _tmp268;
  const Scalar _tmp276 = _tmp192 * _tmp268;
  const Scalar _tmp277 = _tmp273 - _tmp274 - _tmp275 + _tmp276;
  const Scalar _tmp278 = _tmp153 * _tmp272 + _tmp188 * _tmp277;
  const Scalar _tmp279 = -_tmp207 * _tmp278 + _tmp210 * _tmp278 + _tmp211 * _tmp277;
  const Scalar _tmp280 = _tmp211 * _tmp272 + _tmp213 * _tmp278 - _tmp214 * _tmp278;
  const Scalar _tmp281 = _tmp137 * _tmp180;
  const Scalar _tmp282 = _tmp255 * _tmp281;
  const Scalar _tmp283 = _tmp137 * source_inverse_range;
  const Scalar _tmp284 =
      _tmp118 * _tmp245 + _tmp129 * _tmp244 + _tmp167 * _tmp283 + _tmp170 * _tmp283;
  const Scalar _tmp285 = _tmp177 * _tmp284;
  const Scalar _tmp286 = _tmp183 * _tmp284;
  const Scalar _tmp287 = _tmp174 * _tmp286;
  const Scalar _tmp288 = _tmp118 * _tmp258;
  const Scalar _tmp289 = _tmp282 + _tmp285 - _tmp287 + _tmp288;
  const Scalar _tmp290 = _tmp191 * _tmp286;
  const Scalar _tmp291 = _tmp193 * _tmp284;
  const Scalar _tmp292 = _tmp129 * _tmp252;
  const Scalar _tmp293 = _tmp248 * _tmp281;
  const Scalar _tmp294 = -_tmp290 + _tmp291 + _tmp292 + _tmp293;
  const Scalar _tmp295 = _tmp153 * _tmp289 + _tmp188 * _tmp294;
  const Scalar _tmp296 = _tmp207 * _tmp295 - _tmp210 * _tmp295 - _tmp211 * _tmp294;
  const Scalar _tmp297 = -_tmp211 * _tmp289 - _tmp213 * _tmp295 + _tmp214 * _tmp295;
  const Scalar _tmp298 = 2 * _tmp134;
  const Scalar _tmp299 = 2 * _tmp136;
  const Scalar _tmp300 = std::pow(_target_pose[3], Scalar(2));
  const Scalar _tmp301 = -_tmp300;
  const Scalar _tmp302 = -_tmp2 + _tmp60;
  const Scalar _tmp303 = _tmp123 * (_tmp0 + _tmp301 + _tmp302);
  const Scalar _tmp304 = _tmp298 + _tmp299 - _tmp303;
  const Scalar _tmp305 = 2 * _tmp109;
  const Scalar _tmp306 = -_tmp0;
  const Scalar _tmp307 = _tmp117 * (_tmp2 + _tmp301 + _tmp306 + _tmp60);
  const Scalar _tmp308 = 2 * _tmp124;
  const Scalar _tmp309 = _tmp305 + _tmp307 - _tmp308;
  const Scalar _tmp310 = -_tmp167 * _tmp309 + _tmp169 * _tmp304 - _tmp170 * _tmp309;
  const Scalar _tmp311 = _tmp175 * _tmp68;
  const Scalar _tmp312 = _tmp310 * _tmp311;
  const Scalar _tmp313 = _tmp179 * _tmp309;
  const Scalar _tmp314 = 4 * _tmp182;
  const Scalar _tmp315 = _tmp310 * _tmp314;
  const Scalar _tmp316 =
      _tmp151 * _tmp304 + _tmp174 * _tmp312 - _tmp174 * _tmp315 - _tmp178 * _tmp313;
  const Scalar _tmp317 = -_tmp189 * _tmp313 + _tmp191 * _tmp312 - _tmp191 * _tmp315;
  const Scalar _tmp318 = _tmp153 * _tmp316 + _tmp188 * _tmp317;
  const Scalar _tmp319 = _tmp188 * _tmp318;
  const Scalar _tmp320 = -_tmp206 * _tmp319 + _tmp209 * _tmp319 + _tmp211 * _tmp317;
  const Scalar _tmp321 = _tmp211 * _tmp316 + _tmp213 * _tmp318 - _tmp214 * _tmp318;
  const Scalar _tmp322 = _tmp108 * (_tmp300 + _tmp302 + _tmp306);
  const Scalar _tmp323 = 2 * _tmp128;
  const Scalar _tmp324 = 2 * _tmp130;
  const Scalar _tmp325 = _tmp322 + _tmp323 + _tmp324;
  const Scalar _tmp326 = _tmp179 * _tmp325;
  const Scalar _tmp327 = -_tmp298 - _tmp299 + _tmp303;
  const Scalar _tmp328 = -_tmp167 * _tmp325 - _tmp170 * _tmp325 + _tmp172 * _tmp327;
  const Scalar _tmp329 = _tmp191 * _tmp328;
  const Scalar _tmp330 =
      _tmp186 * _tmp327 - _tmp189 * _tmp326 + _tmp311 * _tmp329 - _tmp314 * _tmp329;
  const Scalar _tmp331 = _tmp174 * _tmp328;
  const Scalar _tmp332 = -_tmp178 * _tmp326 + _tmp311 * _tmp331 - _tmp314 * _tmp331;
  const Scalar _tmp333 = _tmp153 * _tmp332 + _tmp188 * _tmp330;
  const Scalar _tmp334 = -_tmp207 * _tmp333 + _tmp210 * _tmp333 + _tmp211 * _tmp330;
  const Scalar _tmp335 = _tmp211 * _tmp332 + _tmp213 * _tmp333 - _tmp214 * _tmp333;
  const Scalar _tmp336 = -_tmp305 - _tmp307 + _tmp308;
  const Scalar _tmp337 = -_tmp322 - _tmp323 - _tmp324;
  const Scalar _tmp338 = _tmp169 * _tmp337 + _tmp172 * _tmp336;
  const Scalar _tmp339 = _tmp311 * _tmp338;
  const Scalar _tmp340 = _tmp314 * _tmp338;
  const Scalar _tmp341 = _tmp186 * _tmp336 + _tmp191 * _tmp339 - _tmp191 * _tmp340;
  const Scalar _tmp342 = _tmp151 * _tmp337 + _tmp174 * _tmp339 - _tmp174 * _tmp340;
  const Scalar _tmp343 = _tmp153 * _tmp342 + _tmp188 * _tmp341;
  const Scalar _tmp344 = _tmp207 * _tmp343 - _tmp210 * _tmp343 - _tmp211 * _tmp341;
  const Scalar _tmp345 = -_tmp211 * _tmp342 - _tmp213 * _tmp343 + _tmp214 * _tmp343;
  const Scalar _tmp346 = _tmp247 + _tmp250 - _tmp251 + _tmp253;
  const Scalar _tmp347 = _tmp256 + _tmp257 + _tmp259 - _tmp260;
  const Scalar _tmp348 = _tmp153 * _tmp347 + _tmp188 * _tmp346;
  const Scalar _tmp349 = _tmp207 * _tmp348 - _tmp210 * _tmp348 - _tmp211 * _tmp346;
  const Scalar _tmp350 = -_tmp211 * _tmp347 - _tmp213 * _tmp348 + _tmp214 * _tmp348;
  const Scalar _tmp351 = _tmp266 - _tmp269 + _tmp270 + _tmp271;
  const Scalar _tmp352 = -_tmp273 + _tmp274 + _tmp275 - _tmp276;
  const Scalar _tmp353 = _tmp153 * _tmp351 + _tmp188 * _tmp352;
  const Scalar _tmp354 = -_tmp207 * _tmp353 + _tmp210 * _tmp353 + _tmp211 * _tmp352;
  const Scalar _tmp355 = -_tmp211 * _tmp351 - _tmp213 * _tmp353 + _tmp214 * _tmp353;
  const Scalar _tmp356 = -_tmp282 - _tmp285 + _tmp287 - _tmp288;
  const Scalar _tmp357 = _tmp290 - _tmp291 - _tmp292 - _tmp293;
  const Scalar _tmp358 = _tmp153 * _tmp356 + _tmp188 * _tmp357;
  const Scalar _tmp359 = -_tmp207 * _tmp358 + _tmp210 * _tmp358 + _tmp211 * _tmp357;
  const Scalar _tmp360 = -_tmp211 * _tmp356 - _tmp213 * _tmp358 + _tmp214 * _tmp358;
  const Scalar _tmp361 = _tmp107 * _tmp133 + _tmp116 * _tmp135 - _tmp121 * _tmp137;
  const Scalar _tmp362 = _tmp107 * _tmp86 + _tmp111 * _tmp116 - _tmp118 * _tmp121;
  const Scalar _tmp363 = -_tmp107 * _tmp126 + _tmp116 * _tmp127 + _tmp121 * _tmp129;
  const Scalar _tmp364 =
      _tmp167 * _tmp361 + _tmp169 * _tmp362 + _tmp170 * _tmp361 - _tmp172 * _tmp363;
  const Scalar _tmp365 =
      _tmp152 * _tmp362 + _tmp177 * _tmp364 + _tmp181 * _tmp361 - _tmp184 * _tmp364;
  const Scalar _tmp366 =
      -_tmp187 * _tmp363 + _tmp190 * _tmp361 - _tmp192 * _tmp364 + _tmp193 * _tmp364;
  const Scalar _tmp367 = _tmp153 * _tmp365 + _tmp188 * _tmp366;
  const Scalar _tmp368 = _tmp207 * _tmp367 - _tmp210 * _tmp367 - _tmp211 * _tmp366;
  const Scalar _tmp369 = _tmp211 * _tmp365 + _tmp213 * _tmp367 - _tmp214 * _tmp367;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 2, 1>& _res = (*res);

    _res(0, 0) = _tmp84;
    _res(1, 0) = _tmp85;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 2, 13>& _jacobian = (*jacobian);

    _jacobian(0, 0) = -_tmp212;
    _jacobian(1, 0) = _tmp215;
    _jacobian(0, 1) = _tmp227;
    _jacobian(1, 1) = _tmp228;
    _jacobian(0, 2) = _tmp241;
    _jacobian(1, 2) = _tmp242;
    _jacobian(0, 3) = _tmp263;
    _jacobian(1, 3) = -_tmp264;
    _jacobian(0, 4) = _tmp279;
    _jacobian(1, 4) = _tmp280;
    _jacobian(0, 5) = -_tmp296;
    _jacobian(1, 5) = -_tmp297;
    _jacobian(0, 6) = _tmp320;
    _jacobian(1, 6) = _tmp321;
    _jacobian(0, 7) = _tmp334;
    _jacobian(1, 7) = _tmp335;
    _jacobian(0, 8) = -_tmp344;
    _jacobian(1, 8) = -_tmp345;
    _jacobian(0, 9) = -_tmp349;
    _jacobian(1, 9) = -_tmp350;
    _jacobian(0, 10) = _tmp354;
    _jacobian(1, 10) = -_tmp355;
    _jacobian(0, 11) = _tmp359;
    _jacobian(1, 11) = -_tmp360;
    _jacobian(0, 12) = -_tmp368;
    _jacobian(1, 12) = _tmp369;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 13, 13>& _hessian = (*hessian);

    _hessian(0, 0) = std::pow(_tmp212, Scalar(2)) + std::pow(_tmp215, Scalar(2));
    _hessian(1, 0) = -_tmp212 * _tmp227 + _tmp215 * _tmp228;
    _hessian(2, 0) = -_tmp212 * _tmp241 + _tmp215 * _tmp242;
    _hessian(3, 0) = -_tmp212 * _tmp263 - _tmp215 * _tmp264;
    _hessian(4, 0) = -_tmp212 * _tmp279 + _tmp215 * _tmp280;
    _hessian(5, 0) = _tmp212 * _tmp296 - _tmp215 * _tmp297;
    _hessian(6, 0) = -_tmp212 * _tmp320 + _tmp215 * _tmp321;
    _hessian(7, 0) = -_tmp212 * _tmp334 + _tmp215 * _tmp335;
    _hessian(8, 0) = _tmp212 * _tmp344 - _tmp215 * _tmp345;
    _hessian(9, 0) = _tmp212 * _tmp349 - _tmp215 * _tmp350;
    _hessian(10, 0) = -_tmp212 * _tmp354 - _tmp215 * _tmp355;
    _hessian(11, 0) = -_tmp212 * _tmp359 - _tmp215 * _tmp360;
    _hessian(12, 0) = _tmp212 * _tmp368 + _tmp215 * _tmp369;
    _hessian(0, 1) = 0;
    _hessian(1, 1) = std::pow(_tmp227, Scalar(2)) + std::pow(_tmp228, Scalar(2));
    _hessian(2, 1) = _tmp227 * _tmp241 + _tmp228 * _tmp242;
    _hessian(3, 1) = _tmp227 * _tmp263 - _tmp228 * _tmp264;
    _hessian(4, 1) = _tmp227 * _tmp279 + _tmp228 * _tmp280;
    _hessian(5, 1) = -_tmp227 * _tmp296 - _tmp228 * _tmp297;
    _hessian(6, 1) = _tmp227 * _tmp320 + _tmp228 * _tmp321;
    _hessian(7, 1) = _tmp227 * _tmp334 + _tmp228 * _tmp335;
    _hessian(8, 1) = -_tmp227 * _tmp344 - _tmp228 * _tmp345;
    _hessian(9, 1) = -_tmp227 * _tmp349 - _tmp228 * _tmp350;
    _hessian(10, 1) = _tmp227 * _tmp354 - _tmp228 * _tmp355;
    _hessian(11, 1) = _tmp227 * _tmp359 - _tmp228 * _tmp360;
    _hessian(12, 1) = -_tmp227 * _tmp368 + _tmp228 * _tmp369;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) = std::pow(_tmp241, Scalar(2)) + std::pow(_tmp242, Scalar(2));
    _hessian(3, 2) = _tmp241 * _tmp263 - _tmp242 * _tmp264;
    _hessian(4, 2) = _tmp241 * _tmp279 + _tmp242 * _tmp280;
    _hessian(5, 2) = -_tmp241 * _tmp296 - _tmp242 * _tmp297;
    _hessian(6, 2) = _tmp241 * _tmp320 + _tmp242 * _tmp321;
    _hessian(7, 2) = _tmp241 * _tmp334 + _tmp242 * _tmp335;
    _hessian(8, 2) = -_tmp241 * _tmp344 - _tmp242 * _tmp345;
    _hessian(9, 2) = -_tmp241 * _tmp349 - _tmp242 * _tmp350;
    _hessian(10, 2) = _tmp241 * _tmp354 - _tmp242 * _tmp355;
    _hessian(11, 2) = _tmp241 * _tmp359 - _tmp242 * _tmp360;
    _hessian(12, 2) = -_tmp241 * _tmp368 + _tmp242 * _tmp369;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = std::pow(_tmp263, Scalar(2)) + std::pow(_tmp264, Scalar(2));
    _hessian(4, 3) = _tmp263 * _tmp279 - _tmp264 * _tmp280;
    _hessian(5, 3) = -_tmp263 * _tmp296 + _tmp264 * _tmp297;
    _hessian(6, 3) = _tmp263 * _tmp320 - _tmp264 * _tmp321;
    _hessian(7, 3) = _tmp263 * _tmp334 - _tmp264 * _tmp335;
    _hessian(8, 3) = -_tmp263 * _tmp344 + _tmp264 * _tmp345;
    _hessian(9, 3) = -_tmp263 * _tmp349 + _tmp264 * _tmp350;
    _hessian(10, 3) = _tmp263 * _tmp354 + _tmp264 * _tmp355;
    _hessian(11, 3) = _tmp263 * _tmp359 + _tmp264 * _tmp360;
    _hessian(12, 3) = -_tmp263 * _tmp368 - _tmp264 * _tmp369;
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) = std::pow(_tmp279, Scalar(2)) + std::pow(_tmp280, Scalar(2));
    _hessian(5, 4) = -_tmp279 * _tmp296 - _tmp280 * _tmp297;
    _hessian(6, 4) = _tmp279 * _tmp320 + _tmp280 * _tmp321;
    _hessian(7, 4) = _tmp279 * _tmp334 + _tmp280 * _tmp335;
    _hessian(8, 4) = -_tmp279 * _tmp344 - _tmp280 * _tmp345;
    _hessian(9, 4) = -_tmp279 * _tmp349 - _tmp280 * _tmp350;
    _hessian(10, 4) = _tmp279 * _tmp354 - _tmp280 * _tmp355;
    _hessian(11, 4) = _tmp279 * _tmp359 - _tmp280 * _tmp360;
    _hessian(12, 4) = -_tmp279 * _tmp368 + _tmp280 * _tmp369;
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) = std::pow(_tmp296, Scalar(2)) + std::pow(_tmp297, Scalar(2));
    _hessian(6, 5) = -_tmp296 * _tmp320 - _tmp297 * _tmp321;
    _hessian(7, 5) = -_tmp296 * _tmp334 - _tmp297 * _tmp335;
    _hessian(8, 5) = _tmp296 * _tmp344 + _tmp297 * _tmp345;
    _hessian(9, 5) = _tmp296 * _tmp349 + _tmp297 * _tmp350;
    _hessian(10, 5) = -_tmp296 * _tmp354 + _tmp297 * _tmp355;
    _hessian(11, 5) = -_tmp296 * _tmp359 + _tmp297 * _tmp360;
    _hessian(12, 5) = _tmp296 * _tmp368 - _tmp297 * _tmp369;
    _hessian(0, 6) = 0;
    _hessian(1, 6) = 0;
    _hessian(2, 6) = 0;
    _hessian(3, 6) = 0;
    _hessian(4, 6) = 0;
    _hessian(5, 6) = 0;
    _hessian(6, 6) = std::pow(_tmp320, Scalar(2)) + std::pow(_tmp321, Scalar(2));
    _hessian(7, 6) = _tmp320 * _tmp334 + _tmp321 * _tmp335;
    _hessian(8, 6) = -_tmp320 * _tmp344 - _tmp321 * _tmp345;
    _hessian(9, 6) = -_tmp320 * _tmp349 - _tmp321 * _tmp350;
    _hessian(10, 6) = _tmp320 * _tmp354 - _tmp321 * _tmp355;
    _hessian(11, 6) = _tmp320 * _tmp359 - _tmp321 * _tmp360;
    _hessian(12, 6) = -_tmp320 * _tmp368 + _tmp321 * _tmp369;
    _hessian(0, 7) = 0;
    _hessian(1, 7) = 0;
    _hessian(2, 7) = 0;
    _hessian(3, 7) = 0;
    _hessian(4, 7) = 0;
    _hessian(5, 7) = 0;
    _hessian(6, 7) = 0;
    _hessian(7, 7) = std::pow(_tmp334, Scalar(2)) + std::pow(_tmp335, Scalar(2));
    _hessian(8, 7) = -_tmp334 * _tmp344 - _tmp335 * _tmp345;
    _hessian(9, 7) = -_tmp334 * _tmp349 - _tmp335 * _tmp350;
    _hessian(10, 7) = _tmp334 * _tmp354 - _tmp335 * _tmp355;
    _hessian(11, 7) = _tmp334 * _tmp359 - _tmp335 * _tmp360;
    _hessian(12, 7) = -_tmp334 * _tmp368 + _tmp335 * _tmp369;
    _hessian(0, 8) = 0;
    _hessian(1, 8) = 0;
    _hessian(2, 8) = 0;
    _hessian(3, 8) = 0;
    _hessian(4, 8) = 0;
    _hessian(5, 8) = 0;
    _hessian(6, 8) = 0;
    _hessian(7, 8) = 0;
    _hessian(8, 8) = std::pow(_tmp344, Scalar(2)) + std::pow(_tmp345, Scalar(2));
    _hessian(9, 8) = _tmp344 * _tmp349 + _tmp345 * _tmp350;
    _hessian(10, 8) = -_tmp344 * _tmp354 + _tmp345 * _tmp355;
    _hessian(11, 8) = -_tmp344 * _tmp359 + _tmp345 * _tmp360;
    _hessian(12, 8) = _tmp344 * _tmp368 - _tmp345 * _tmp369;
    _hessian(0, 9) = 0;
    _hessian(1, 9) = 0;
    _hessian(2, 9) = 0;
    _hessian(3, 9) = 0;
    _hessian(4, 9) = 0;
    _hessian(5, 9) = 0;
    _hessian(6, 9) = 0;
    _hessian(7, 9) = 0;
    _hessian(8, 9) = 0;
    _hessian(9, 9) = std::pow(_tmp349, Scalar(2)) + std::pow(_tmp350, Scalar(2));
    _hessian(10, 9) = -_tmp349 * _tmp354 + _tmp350 * _tmp355;
    _hessian(11, 9) = -_tmp349 * _tmp359 + _tmp350 * _tmp360;
    _hessian(12, 9) = _tmp349 * _tmp368 - _tmp350 * _tmp369;
    _hessian(0, 10) = 0;
    _hessian(1, 10) = 0;
    _hessian(2, 10) = 0;
    _hessian(3, 10) = 0;
    _hessian(4, 10) = 0;
    _hessian(5, 10) = 0;
    _hessian(6, 10) = 0;
    _hessian(7, 10) = 0;
    _hessian(8, 10) = 0;
    _hessian(9, 10) = 0;
    _hessian(10, 10) = std::pow(_tmp354, Scalar(2)) + std::pow(_tmp355, Scalar(2));
    _hessian(11, 10) = _tmp354 * _tmp359 + _tmp355 * _tmp360;
    _hessian(12, 10) = -_tmp354 * _tmp368 - _tmp355 * _tmp369;
    _hessian(0, 11) = 0;
    _hessian(1, 11) = 0;
    _hessian(2, 11) = 0;
    _hessian(3, 11) = 0;
    _hessian(4, 11) = 0;
    _hessian(5, 11) = 0;
    _hessian(6, 11) = 0;
    _hessian(7, 11) = 0;
    _hessian(8, 11) = 0;
    _hessian(9, 11) = 0;
    _hessian(10, 11) = 0;
    _hessian(11, 11) = std::pow(_tmp359, Scalar(2)) + std::pow(_tmp360, Scalar(2));
    _hessian(12, 11) = -_tmp359 * _tmp368 - _tmp360 * _tmp369;
    _hessian(0, 12) = 0;
    _hessian(1, 12) = 0;
    _hessian(2, 12) = 0;
    _hessian(3, 12) = 0;
    _hessian(4, 12) = 0;
    _hessian(5, 12) = 0;
    _hessian(6, 12) = 0;
    _hessian(7, 12) = 0;
    _hessian(8, 12) = 0;
    _hessian(9, 12) = 0;
    _hessian(10, 12) = 0;
    _hessian(11, 12) = 0;
    _hessian(12, 12) = std::pow(_tmp368, Scalar(2)) + std::pow(_tmp369, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 13, 1>& _rhs = (*rhs);

    _rhs(0, 0) = -_tmp212 * _tmp84 + _tmp215 * _tmp85;
    _rhs(1, 0) = _tmp227 * _tmp84 + _tmp228 * _tmp85;
    _rhs(2, 0) = _tmp241 * _tmp84 + _tmp242 * _tmp85;
    _rhs(3, 0) = _tmp263 * _tmp84 - _tmp264 * _tmp85;
    _rhs(4, 0) = _tmp279 * _tmp84 + _tmp280 * _tmp85;
    _rhs(5, 0) = -_tmp296 * _tmp84 - _tmp297 * _tmp85;
    _rhs(6, 0) = _tmp320 * _tmp84 + _tmp321 * _tmp85;
    _rhs(7, 0) = _tmp334 * _tmp84 + _tmp335 * _tmp85;
    _rhs(8, 0) = -_tmp344 * _tmp84 - _tmp345 * _tmp85;
    _rhs(9, 0) = -_tmp349 * _tmp84 - _tmp350 * _tmp85;
    _rhs(10, 0) = _tmp354 * _tmp84 - _tmp355 * _tmp85;
    _rhs(11, 0) = _tmp359 * _tmp84 - _tmp360 * _tmp85;
    _rhs(12, 0) = -_tmp368 * _tmp84 + _tmp369 * _tmp85;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
