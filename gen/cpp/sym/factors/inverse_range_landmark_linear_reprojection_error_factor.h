// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     backends/cpp/templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Return the 2dof residual of reprojecting the landmark into the target camera and comparing
 * against the correspondence in the target camera.
 *
 * The landmark is specified as a pixel in the source camera and an inverse range; this means the
 * landmark is fixed in the source camera and always has residual 0 there (this 0 residual is not
 * returned, only the residual in the target camera is returned).
 *
 * The norm of the residual is whitened using the Barron noise model.  Whitening each component of
 * the reprojection error separately would result in rejecting individual components as outliers.
 * Instead, we minimize the whitened norm of the full reprojection error for each point.  See the
 * docstring for `NoiseModel.whiten_norm` for more information on this, and the docstring of
 * `BarronNoiseModel` for more information on the noise model.
 *
 * Args:
 *     source_pose: The pose of the source camera
 *     source_calibration_storage: The storage vector of the source camera calibration
 *     target_pose: The pose of the target camera
 *     target_calibration_storage: The storage vector of the target camera calibration
 *     source_inverse_range: The inverse range of the landmark in the source camera
 *     source_pixel: The location of the landmark in the source camera
 *     target_pixel: The location of the correspondence in the target camera
 *     weight: The weight of the factor
 *     gnc_mu: The mu convexity parameter for the Barron noise model
 *     gnc_scale: The scale parameter for the Barron noise model
 *     epsilon: Small positive value
 *     camera_model_class: The subclass of CameraCal to use as the camera model
 *
 * Outputs:
 *     res: 2dof residual of the reprojection
 *     jacobian: (2x13) jacobian of res wrt args source_pose (6), target_pose (6),
 *               source_inverse_range (1)
 *     hessian: (13x13) Gauss-Newton hessian for args source_pose (6), target_pose (6),
 *              source_inverse_range (1)
 *     rhs: (13x1) Gauss-Newton rhs for args source_pose (6), target_pose (6), source_inverse_range
 *          (1)
 */
template <typename Scalar>
void InverseRangeLandmarkLinearReprojectionErrorFactor(
    const sym::Pose3<Scalar>& source_pose,
    const Eigen::Matrix<Scalar, 4, 1>& source_calibration_storage,
    const sym::Pose3<Scalar>& target_pose,
    const Eigen::Matrix<Scalar, 4, 1>& target_calibration_storage,
    const Scalar source_inverse_range, const Eigen::Matrix<Scalar, 2, 1>& source_pixel,
    const Eigen::Matrix<Scalar, 2, 1>& target_pixel, const Scalar weight, const Scalar gnc_mu,
    const Scalar gnc_scale, const Scalar epsilon, Eigen::Matrix<Scalar, 2, 1>* const res = nullptr,
    Eigen::Matrix<Scalar, 2, 13>* const jacobian = nullptr,
    Eigen::Matrix<Scalar, 13, 13>* const hessian = nullptr,
    Eigen::Matrix<Scalar, 13, 1>* const rhs = nullptr) {
  // Total ops: 938

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _source_pose = source_pose.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _target_pose = target_pose.Data();

  // Intermediate terms (315)
  const Scalar _tmp0 = std::pow(_target_pose[1], Scalar(2));
  const Scalar _tmp1 = -2 * _tmp0;
  const Scalar _tmp2 = std::pow(_target_pose[0], Scalar(2));
  const Scalar _tmp3 = 1 - 2 * _tmp2;
  const Scalar _tmp4 = std::pow(_source_pose[0], Scalar(2));
  const Scalar _tmp5 = -2 * _tmp4;
  const Scalar _tmp6 = std::pow(_source_pose[1], Scalar(2));
  const Scalar _tmp7 = 1 - 2 * _tmp6;
  const Scalar _tmp8 = -source_calibration_storage(3, 0) + source_pixel(1, 0);
  const Scalar _tmp9 = std::pow(source_calibration_storage(1, 0), Scalar(-2));
  const Scalar _tmp10 = -source_calibration_storage(2, 0) + source_pixel(0, 0);
  const Scalar _tmp11 = std::pow(source_calibration_storage(0, 0), Scalar(-2));
  const Scalar _tmp12 = std::pow(
      Scalar(std::pow(_tmp10, Scalar(2)) * _tmp11 + std::pow(_tmp8, Scalar(2)) * _tmp9 + 1),
      Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp13 = _source_pose[0] * _source_pose[2];
  const Scalar _tmp14 = 2 * _tmp13;
  const Scalar _tmp15 = _source_pose[1] * _source_pose[3];
  const Scalar _tmp16 = 2 * _tmp15;
  const Scalar _tmp17 = Scalar(1.0) / (source_calibration_storage(0, 0));
  const Scalar _tmp18 = _tmp10 * _tmp12 * _tmp17;
  const Scalar _tmp19 = _source_pose[0] * _source_pose[3];
  const Scalar _tmp20 = 2 * _tmp19;
  const Scalar _tmp21 = _source_pose[1] * _source_pose[2];
  const Scalar _tmp22 = 2 * _tmp21;
  const Scalar _tmp23 = Scalar(1.0) / (source_calibration_storage(1, 0));
  const Scalar _tmp24 = _tmp12 * _tmp23 * _tmp8;
  const Scalar _tmp25 = _tmp12 * (_tmp5 + _tmp7) + _tmp18 * (_tmp14 - _tmp16) +
                        _tmp24 * (_tmp20 + _tmp22) +
                        source_inverse_range * (_source_pose[6] - _target_pose[6]);
  const Scalar _tmp26 = _target_pose[0] * _target_pose[2];
  const Scalar _tmp27 = 2 * _tmp26;
  const Scalar _tmp28 = _target_pose[1] * _target_pose[3];
  const Scalar _tmp29 = 2 * _tmp28;
  const Scalar _tmp30 = _source_pose[0] * _source_pose[1];
  const Scalar _tmp31 = 2 * _tmp30;
  const Scalar _tmp32 = _source_pose[2] * _source_pose[3];
  const Scalar _tmp33 = 2 * _tmp32;
  const Scalar _tmp34 = std::pow(_source_pose[2], Scalar(2));
  const Scalar _tmp35 = -2 * _tmp34;
  const Scalar _tmp36 = _tmp12 * (_tmp14 + _tmp16) + _tmp18 * (_tmp35 + _tmp7) +
                        _tmp24 * (_tmp31 - _tmp33) +
                        source_inverse_range * (_source_pose[4] - _target_pose[4]);
  const Scalar _tmp37 = _target_pose[1] * _target_pose[2];
  const Scalar _tmp38 = 2 * _tmp37;
  const Scalar _tmp39 = _target_pose[0] * _target_pose[3];
  const Scalar _tmp40 = 2 * _tmp39;
  const Scalar _tmp41 = _tmp12 * (-_tmp20 + _tmp22) + _tmp18 * (_tmp31 + _tmp33) +
                        _tmp24 * (_tmp35 + _tmp5 + 1) +
                        source_inverse_range * (_source_pose[5] - _target_pose[5]);
  const Scalar _tmp42 =
      _tmp25 * (_tmp1 + _tmp3) + _tmp36 * (_tmp27 + _tmp29) + _tmp41 * (_tmp38 - _tmp40);
  const Scalar _tmp43 = Scalar(1.0) / (std::max<Scalar>(epsilon, std::fabs(_tmp42)));
  const Scalar _tmp44 = std::pow(_target_pose[2], Scalar(2));
  const Scalar _tmp45 = -2 * _tmp44;
  const Scalar _tmp46 = _target_pose[2] * _target_pose[3];
  const Scalar _tmp47 = 2 * _tmp46;
  const Scalar _tmp48 = _target_pose[0] * _target_pose[1];
  const Scalar _tmp49 = 2 * _tmp48;
  const Scalar _tmp50 = target_calibration_storage(2, 0) - target_pixel(0, 0);
  const Scalar _tmp51 = _tmp43 * target_calibration_storage(0, 0) *
                            (_tmp25 * (_tmp27 - _tmp29) + _tmp36 * (_tmp1 + _tmp45 + 1) +
                             _tmp41 * (_tmp47 + _tmp49)) +
                        _tmp50;
  const Scalar _tmp52 = std::sqrt(weight);
  const Scalar _tmp53 = target_calibration_storage(3, 0) - target_pixel(1, 0);
  const Scalar _tmp54 =
      _tmp43 * target_calibration_storage(1, 0) *
          (_tmp25 * (_tmp38 + _tmp40) + _tmp36 * (-_tmp47 + _tmp49) + _tmp41 * (_tmp3 + _tmp45)) +
      _tmp53;
  const Scalar _tmp55 = std::pow(_tmp51, Scalar(2)) + std::pow(_tmp54, Scalar(2)) + epsilon;
  const Scalar _tmp56 = Scalar(1.0) / (epsilon - gnc_mu + 1);
  const Scalar _tmp57 = epsilon + std::fabs(_tmp56);
  const Scalar _tmp58 = 2 - _tmp56;
  const Scalar _tmp59 =
      _tmp58 + epsilon * (2 * std::min<Scalar>(0, (((_tmp58) > 0) - ((_tmp58) < 0))) + 1);
  const Scalar _tmp60 = std::pow(gnc_scale, Scalar(-2));
  const Scalar _tmp61 = std::sqrt(Scalar(2)) * _tmp52 *
                        std::sqrt(Scalar(_tmp57 *
                                         (std::pow(Scalar(_tmp55 * _tmp60 / _tmp57 + 1),
                                                   Scalar((Scalar(1) / Scalar(2)) * _tmp59)) -
                                          1) /
                                         _tmp59)) *
                        std::max<Scalar>(0, (((_tmp42) > 0) - ((_tmp42) < 0))) / std::sqrt(_tmp55);
  const Scalar _tmp62 = _tmp51 * _tmp61;
  const Scalar _tmp63 = _tmp54 * _tmp61;
  const Scalar _tmp64 = _tmp37 - _tmp39;
  const Scalar _tmp65 = std::pow(_source_pose[3], Scalar(2));
  const Scalar _tmp66 = -_tmp65;
  const Scalar _tmp67 = -_tmp6;
  const Scalar _tmp68 = _tmp34 + _tmp4;
  const Scalar _tmp69 = source_calibration_storage(3, 0) - source_pixel(1, 0);
  const Scalar _tmp70 = source_calibration_storage(2, 0) - source_pixel(0, 0);
  const Scalar _tmp71 = std::pow(
      Scalar(_tmp11 * std::pow(_tmp70, Scalar(2)) + std::pow(_tmp69, Scalar(2)) * _tmp9 + 1),
      Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp72 = _tmp71 * (_tmp66 + _tmp67 + _tmp68);
  const Scalar _tmp73 = _tmp19 - _tmp21;
  const Scalar _tmp74 = 2 * _tmp71;
  const Scalar _tmp75 = _tmp73 * _tmp74;
  const Scalar _tmp76 = _tmp23 * _tmp69;
  const Scalar _tmp77 = 2 * _tmp72 + 2 * _tmp75 * _tmp76;
  const Scalar _tmp78 = _tmp0 + _tmp2;
  const Scalar _tmp79 = _tmp78 + Scalar(-1) / Scalar(2);
  const Scalar _tmp80 = _tmp19 + _tmp21;
  const Scalar _tmp81 = _tmp74 * _tmp80;
  const Scalar _tmp82 = _tmp34 - _tmp4;
  const Scalar _tmp83 = _tmp65 + _tmp67 + _tmp82;
  const Scalar _tmp84 = _tmp71 * _tmp76;
  const Scalar _tmp85 = -2 * _tmp81 - 2 * _tmp83 * _tmp84;
  const Scalar _tmp86 = _tmp26 + _tmp28;
  const Scalar _tmp87 = _tmp71 * (_tmp30 - _tmp32);
  const Scalar _tmp88 = _tmp13 + _tmp15;
  const Scalar _tmp89 = 4 * _tmp84 * _tmp88 + 4 * _tmp87;
  const Scalar _tmp90 = _tmp74 * _tmp88;
  const Scalar _tmp91 = 2 * _tmp87;
  const Scalar _tmp92 = _tmp6 + Scalar(-1) / Scalar(2);
  const Scalar _tmp93 = _tmp17 * _tmp70;
  const Scalar _tmp94 = -_source_pose[4] + _target_pose[4];
  const Scalar _tmp95 = _tmp74 * _tmp93 * (_tmp34 + _tmp92) - _tmp76 * _tmp91 + _tmp90 -
                        _tmp94 * source_inverse_range;
  const Scalar _tmp96 = _tmp86 * _tmp95;
  const Scalar _tmp97 = _tmp71 * (_tmp30 + _tmp32);
  const Scalar _tmp98 = 2 * _tmp97;
  const Scalar _tmp99 = -_source_pose[5] + _target_pose[5];
  const Scalar _tmp100 = _tmp74 * _tmp76 * (_tmp68 + Scalar(-1) / Scalar(2)) - _tmp75 -
                         _tmp93 * _tmp98 - _tmp99 * source_inverse_range;
  const Scalar _tmp101 = _tmp100 * _tmp64;
  const Scalar _tmp102 = _tmp13 - _tmp15;
  const Scalar _tmp103 = _tmp102 * _tmp74;
  const Scalar _tmp104 = -_source_pose[6] + _target_pose[6];
  const Scalar _tmp105 = -_tmp103 * _tmp93 - _tmp104 * source_inverse_range -
                         _tmp74 * (_tmp4 + _tmp92) - _tmp76 * _tmp81;
  const Scalar _tmp106 = _tmp101 - _tmp105 * _tmp79 + _tmp96;
  const Scalar _tmp107 = 2 * std::fabs(_tmp106);
  const Scalar _tmp108 = -epsilon;
  const Scalar _tmp109 = std::max<Scalar>(_tmp107, epsilon);
  const Scalar _tmp110 = (((_tmp106) > 0) - ((_tmp106) < 0));
  const Scalar _tmp111 = _tmp110 * ((((_tmp107 + _tmp108) > 0) - ((_tmp107 + _tmp108) < 0)) + 1) /
                         std::pow(_tmp109, Scalar(2));
  const Scalar _tmp112 = _tmp111 * (_tmp64 * _tmp77 - _tmp79 * _tmp85 - _tmp86 * _tmp89);
  const Scalar _tmp113 = _tmp44 + Scalar(-1) / Scalar(2);
  const Scalar _tmp114 = _tmp0 + _tmp113;
  const Scalar _tmp115 = _tmp46 + _tmp48;
  const Scalar _tmp116 = _tmp100 * _tmp115;
  const Scalar _tmp117 = _tmp26 - _tmp28;
  const Scalar _tmp118 = _tmp105 * _tmp117;
  const Scalar _tmp119 = _tmp114 * _tmp95 - _tmp116 - _tmp118;
  const Scalar _tmp120 = _tmp119 * target_calibration_storage(0, 0);
  const Scalar _tmp121 = Scalar(1.0) / (_tmp109);
  const Scalar _tmp122 = _tmp121 * target_calibration_storage(0, 0);
  const Scalar _tmp123 =
      _tmp112 * _tmp120 + _tmp122 * (_tmp114 * _tmp89 + _tmp115 * _tmp77 + _tmp117 * _tmp85);
  const Scalar _tmp124 = -2 * _tmp119 * _tmp122 + _tmp50;
  const Scalar _tmp125 = _tmp46 - _tmp48;
  const Scalar _tmp126 = _tmp125 * _tmp95;
  const Scalar _tmp127 = _tmp113 + _tmp2;
  const Scalar _tmp128 = _tmp37 + _tmp39;
  const Scalar _tmp129 = _tmp105 * _tmp128;
  const Scalar _tmp130 = _tmp100 * _tmp127 + _tmp126 - _tmp129;
  const Scalar _tmp131 = _tmp121 * target_calibration_storage(1, 0);
  const Scalar _tmp132 = -2 * _tmp130 * _tmp131 + _tmp53;
  const Scalar _tmp133 = std::pow(_tmp124, Scalar(2)) + std::pow(_tmp132, Scalar(2)) + epsilon;
  const Scalar _tmp134 = std::pow(_tmp133, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp135 = Scalar(1.0) / (_tmp108 + gnc_mu - 1);
  const Scalar _tmp136 = epsilon + std::fabs(_tmp135);
  const Scalar _tmp137 = _tmp135 + 2;
  const Scalar _tmp138 = _tmp137 + 2 * epsilon *
                                       (std::min<Scalar>(0, (((_tmp137) > 0) - ((_tmp137) < 0))) +
                                        Scalar(1) / Scalar(2));
  const Scalar _tmp139 = _tmp133 * _tmp60 / _tmp136 + 1;
  const Scalar _tmp140 =
      std::sqrt(Scalar(2)) *
      std::sqrt(Scalar(
          _tmp136 * (std::pow(_tmp139, Scalar((Scalar(1) / Scalar(2)) * _tmp138)) - 1) / _tmp138));
  const Scalar _tmp141 = std::max<Scalar>(0, _tmp110);
  const Scalar _tmp142 = _tmp140 * _tmp141 * _tmp52;
  const Scalar _tmp143 = _tmp134 * _tmp142;
  const Scalar _tmp144 = _tmp130 * target_calibration_storage(1, 0);
  const Scalar _tmp145 =
      _tmp112 * _tmp144 + _tmp131 * (_tmp125 * _tmp89 - _tmp127 * _tmp77 + _tmp128 * _tmp85);
  const Scalar _tmp146 = _tmp123 * _tmp124 + _tmp132 * _tmp145;
  const Scalar _tmp147 = _tmp124 * _tmp146;
  const Scalar _tmp148 = _tmp134 *
                         std::pow(_tmp139, Scalar((Scalar(1) / Scalar(2)) * _tmp138 - 1)) *
                         _tmp141 * _tmp52 * _tmp60 / _tmp140;
  const Scalar _tmp149 = _tmp142 / (_tmp133 * std::sqrt(_tmp133));
  const Scalar _tmp150 = _tmp123 * _tmp143 + _tmp147 * _tmp148 - _tmp147 * _tmp149;
  const Scalar _tmp151 = _tmp132 * _tmp149;
  const Scalar _tmp152 = _tmp132 * _tmp148;
  const Scalar _tmp153 = -_tmp143 * _tmp145 + _tmp146 * _tmp151 - _tmp146 * _tmp152;
  const Scalar _tmp154 = _tmp71 * _tmp93;
  const Scalar _tmp155 = -4 * _tmp154 * _tmp73 + 4 * _tmp97;
  const Scalar _tmp156 = _tmp71 * (_tmp6 + _tmp66 + _tmp82);
  const Scalar _tmp157 = -2 * _tmp156 + 2 * _tmp90 * _tmp93;
  const Scalar _tmp158 = 2 * _tmp103 + 2 * _tmp154 * _tmp83;
  const Scalar _tmp159 = _tmp155 * _tmp64 + _tmp157 * _tmp86 - _tmp158 * _tmp79;
  const Scalar _tmp160 = _tmp111 * _tmp144;
  const Scalar _tmp161 =
      _tmp131 * (-_tmp125 * _tmp157 - _tmp127 * _tmp155 + _tmp128 * _tmp158) + _tmp159 * _tmp160;
  const Scalar _tmp162 = _tmp111 * _tmp120;
  const Scalar _tmp163 =
      _tmp122 * (-_tmp114 * _tmp157 + _tmp115 * _tmp155 + _tmp117 * _tmp158) + _tmp159 * _tmp162;
  const Scalar _tmp164 = _tmp124 * _tmp163 + _tmp132 * _tmp161;
  const Scalar _tmp165 = _tmp124 * _tmp148;
  const Scalar _tmp166 = _tmp124 * _tmp149;
  const Scalar _tmp167 = _tmp143 * _tmp163 + _tmp164 * _tmp165 - _tmp164 * _tmp166;
  const Scalar _tmp168 = _tmp143 * _tmp161 - _tmp151 * _tmp164 + _tmp152 * _tmp164;
  const Scalar _tmp169 = 4 * _tmp102 * _tmp84 - 4 * _tmp154 * _tmp80;
  const Scalar _tmp170 = 2 * _tmp72 * _tmp93 + 2 * _tmp76 * _tmp98;
  const Scalar _tmp171 = -2 * _tmp156 * _tmp76 - 2 * _tmp91 * _tmp93;
  const Scalar _tmp172 = _tmp111 * (-_tmp169 * _tmp79 + _tmp170 * _tmp64 + _tmp171 * _tmp86);
  const Scalar _tmp173 =
      _tmp120 * _tmp172 + _tmp122 * (-_tmp114 * _tmp171 + _tmp115 * _tmp170 + _tmp117 * _tmp169);
  const Scalar _tmp174 =
      _tmp131 * (-_tmp125 * _tmp171 - _tmp127 * _tmp170 + _tmp128 * _tmp169) + _tmp144 * _tmp172;
  const Scalar _tmp175 = _tmp124 * _tmp173 + _tmp132 * _tmp174;
  const Scalar _tmp176 = _tmp143 * _tmp173 + _tmp165 * _tmp175 - _tmp166 * _tmp175;
  const Scalar _tmp177 = -_tmp143 * _tmp174 + _tmp151 * _tmp175 - _tmp152 * _tmp175;
  const Scalar _tmp178 = _tmp122 * source_inverse_range;
  const Scalar _tmp179 = _tmp86 * source_inverse_range;
  const Scalar _tmp180 = _tmp114 * _tmp178 - _tmp162 * _tmp179;
  const Scalar _tmp181 = _tmp131 * source_inverse_range;
  const Scalar _tmp182 = -_tmp125 * _tmp181 + _tmp160 * _tmp179;
  const Scalar _tmp183 = _tmp124 * _tmp180 - _tmp132 * _tmp182;
  const Scalar _tmp184 = _tmp143 * _tmp180 + _tmp165 * _tmp183 - _tmp166 * _tmp183;
  const Scalar _tmp185 = 2 * _tmp184;
  const Scalar _tmp186 = -_tmp143 * _tmp182 - _tmp151 * _tmp183 + _tmp152 * _tmp183;
  const Scalar _tmp187 = 2 * _tmp186;
  const Scalar _tmp188 = _tmp64 * source_inverse_range;
  const Scalar _tmp189 = _tmp115 * _tmp178 + _tmp162 * _tmp188;
  const Scalar _tmp190 = -_tmp127 * _tmp181 + _tmp160 * _tmp188;
  const Scalar _tmp191 = _tmp124 * _tmp189 + _tmp132 * _tmp190;
  const Scalar _tmp192 = _tmp143 * _tmp189 + _tmp165 * _tmp191 - _tmp166 * _tmp191;
  const Scalar _tmp193 = 2 * _tmp192;
  const Scalar _tmp194 = _tmp143 * _tmp190 - _tmp151 * _tmp191 + _tmp152 * _tmp191;
  const Scalar _tmp195 = 2 * _tmp194;
  const Scalar _tmp196 = _tmp79 * source_inverse_range;
  const Scalar _tmp197 = _tmp117 * _tmp178 - _tmp162 * _tmp196;
  const Scalar _tmp198 = _tmp128 * _tmp181 - _tmp160 * _tmp196;
  const Scalar _tmp199 = _tmp124 * _tmp197 + _tmp132 * _tmp198;
  const Scalar _tmp200 = _tmp143 * _tmp197 + _tmp165 * _tmp199 - _tmp166 * _tmp199;
  const Scalar _tmp201 = 2 * _tmp200;
  const Scalar _tmp202 = _tmp143 * _tmp198 - _tmp151 * _tmp199 + _tmp152 * _tmp199;
  const Scalar _tmp203 = 2 * _tmp202;
  const Scalar _tmp204 = 2 * _tmp126;
  const Scalar _tmp205 = std::pow(_target_pose[3], Scalar(2));
  const Scalar _tmp206 = -_tmp205;
  const Scalar _tmp207 = -_tmp0 + _tmp2;
  const Scalar _tmp208 = _tmp100 * (_tmp206 + _tmp207 + _tmp44);
  const Scalar _tmp209 = 2 * _tmp129;
  const Scalar _tmp210 = _tmp204 + _tmp208 - _tmp209;
  const Scalar _tmp211 = _tmp162 * _tmp210;
  const Scalar _tmp212 = 2 * _tmp96;
  const Scalar _tmp213 = 2 * _tmp101;
  const Scalar _tmp214 = -_tmp44;
  const Scalar _tmp215 = _tmp105 * (_tmp206 + _tmp214 + _tmp78);
  const Scalar _tmp216 = _tmp131 * (_tmp212 + _tmp213 - _tmp215) + _tmp160 * _tmp210;
  const Scalar _tmp217 = _tmp124 * _tmp211 + _tmp132 * _tmp216;
  const Scalar _tmp218 = -_tmp143 * _tmp211 - _tmp165 * _tmp217 + _tmp166 * _tmp217;
  const Scalar _tmp219 = _tmp143 * _tmp216 - _tmp151 * _tmp217 + _tmp152 * _tmp217;
  const Scalar _tmp220 = _tmp95 * (_tmp205 + _tmp207 + _tmp214);
  const Scalar _tmp221 = 2 * _tmp116;
  const Scalar _tmp222 = 2 * _tmp118;
  const Scalar _tmp223 = _tmp220 + _tmp221 + _tmp222;
  const Scalar _tmp224 = _tmp160 * _tmp223;
  const Scalar _tmp225 = _tmp122 * (-_tmp212 - _tmp213 + _tmp215) + _tmp162 * _tmp223;
  const Scalar _tmp226 = _tmp124 * _tmp225 + _tmp132 * _tmp224;
  const Scalar _tmp227 = -_tmp143 * _tmp225 - _tmp165 * _tmp226 + _tmp166 * _tmp226;
  const Scalar _tmp228 = _tmp143 * _tmp224 - _tmp151 * _tmp226 + _tmp152 * _tmp226;
  const Scalar _tmp229 = _tmp131 * (-_tmp220 - _tmp221 - _tmp222);
  const Scalar _tmp230 = _tmp122 * (-_tmp204 - _tmp208 + _tmp209);
  const Scalar _tmp231 = _tmp124 * _tmp230 + _tmp132 * _tmp229;
  const Scalar _tmp232 = -_tmp143 * _tmp230 - _tmp165 * _tmp231 + _tmp166 * _tmp231;
  const Scalar _tmp233 = _tmp143 * _tmp229 - _tmp151 * _tmp231 + _tmp152 * _tmp231;
  const Scalar _tmp234 = -_tmp104 * _tmp79 + _tmp64 * _tmp99 + _tmp86 * _tmp94;
  const Scalar _tmp235 =
      _tmp122 * (_tmp104 * _tmp117 - _tmp114 * _tmp94 + _tmp115 * _tmp99) + _tmp162 * _tmp234;
  const Scalar _tmp236 =
      -_tmp131 * (-_tmp104 * _tmp128 + _tmp125 * _tmp94 + _tmp127 * _tmp99) + _tmp160 * _tmp234;
  const Scalar _tmp237 = _tmp124 * _tmp235 + _tmp132 * _tmp236;
  const Scalar _tmp238 = _tmp143 * _tmp235 + _tmp165 * _tmp237 - _tmp166 * _tmp237;
  const Scalar _tmp239 = 2 * _tmp238;
  const Scalar _tmp240 = _tmp143 * _tmp236 - _tmp151 * _tmp237 + _tmp152 * _tmp237;
  const Scalar _tmp241 = 2 * _tmp240;
  const Scalar _tmp242 = _tmp150 * _tmp185;
  const Scalar _tmp243 = _tmp153 * _tmp187;
  const Scalar _tmp244 = _tmp150 * _tmp193;
  const Scalar _tmp245 = _tmp153 * _tmp195;
  const Scalar _tmp246 = _tmp150 * _tmp201;
  const Scalar _tmp247 = _tmp153 * _tmp203;
  const Scalar _tmp248 = _tmp168 * _tmp187;
  const Scalar _tmp249 = _tmp167 * _tmp185;
  const Scalar _tmp250 = _tmp168 * _tmp195;
  const Scalar _tmp251 = _tmp167 * _tmp193;
  const Scalar _tmp252 = _tmp167 * _tmp201;
  const Scalar _tmp253 = _tmp168 * _tmp203;
  const Scalar _tmp254 = _tmp176 * _tmp185;
  const Scalar _tmp255 = _tmp177 * _tmp187;
  const Scalar _tmp256 = _tmp177 * _tmp195;
  const Scalar _tmp257 = _tmp176 * _tmp193;
  const Scalar _tmp258 = _tmp177 * _tmp203;
  const Scalar _tmp259 = _tmp176 * _tmp201;
  const Scalar _tmp260 = 4 * std::pow(_tmp186, Scalar(2));
  const Scalar _tmp261 = 4 * std::pow(_tmp184, Scalar(2));
  const Scalar _tmp262 = _tmp260 + _tmp261;
  const Scalar _tmp263 = 4 * _tmp186;
  const Scalar _tmp264 = _tmp194 * _tmp263;
  const Scalar _tmp265 = 4 * _tmp192;
  const Scalar _tmp266 = _tmp184 * _tmp265;
  const Scalar _tmp267 = -_tmp264 - _tmp266;
  const Scalar _tmp268 = 4 * _tmp184 * _tmp200;
  const Scalar _tmp269 = _tmp202 * _tmp263;
  const Scalar _tmp270 = -_tmp268 - _tmp269;
  const Scalar _tmp271 = _tmp187 * _tmp219;
  const Scalar _tmp272 = _tmp185 * _tmp218;
  const Scalar _tmp273 = _tmp187 * _tmp228;
  const Scalar _tmp274 = _tmp185 * _tmp227;
  const Scalar _tmp275 = _tmp185 * _tmp232;
  const Scalar _tmp276 = _tmp187 * _tmp233;
  const Scalar _tmp277 = _tmp264 + _tmp266;
  const Scalar _tmp278 = _tmp268 + _tmp269;
  const Scalar _tmp279 = 4 * _tmp240;
  const Scalar _tmp280 = _tmp186 * _tmp279;
  const Scalar _tmp281 = 4 * _tmp238;
  const Scalar _tmp282 = _tmp184 * _tmp281;
  const Scalar _tmp283 = 4 * std::pow(_tmp194, Scalar(2));
  const Scalar _tmp284 = 4 * std::pow(_tmp192, Scalar(2));
  const Scalar _tmp285 = _tmp283 + _tmp284;
  const Scalar _tmp286 = 4 * _tmp194 * _tmp202;
  const Scalar _tmp287 = _tmp200 * _tmp265;
  const Scalar _tmp288 = _tmp286 + _tmp287;
  const Scalar _tmp289 = _tmp195 * _tmp219;
  const Scalar _tmp290 = _tmp193 * _tmp218;
  const Scalar _tmp291 = _tmp195 * _tmp228;
  const Scalar _tmp292 = _tmp193 * _tmp227;
  const Scalar _tmp293 = _tmp195 * _tmp233;
  const Scalar _tmp294 = _tmp193 * _tmp232;
  const Scalar _tmp295 = -_tmp286 - _tmp287;
  const Scalar _tmp296 = _tmp194 * _tmp279;
  const Scalar _tmp297 = _tmp238 * _tmp265;
  const Scalar _tmp298 = 4 * std::pow(_tmp202, Scalar(2));
  const Scalar _tmp299 = 4 * std::pow(_tmp200, Scalar(2));
  const Scalar _tmp300 = _tmp298 + _tmp299;
  const Scalar _tmp301 = _tmp201 * _tmp218;
  const Scalar _tmp302 = _tmp203 * _tmp219;
  const Scalar _tmp303 = _tmp203 * _tmp228;
  const Scalar _tmp304 = _tmp201 * _tmp227;
  const Scalar _tmp305 = _tmp201 * _tmp232;
  const Scalar _tmp306 = _tmp203 * _tmp233;
  const Scalar _tmp307 = _tmp202 * _tmp279;
  const Scalar _tmp308 = _tmp200 * _tmp281;
  const Scalar _tmp309 = _tmp187 * _tmp63;
  const Scalar _tmp310 = _tmp185 * _tmp62;
  const Scalar _tmp311 = _tmp195 * _tmp63;
  const Scalar _tmp312 = _tmp193 * _tmp62;
  const Scalar _tmp313 = _tmp201 * _tmp62;
  const Scalar _tmp314 = _tmp203 * _tmp63;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 2, 1>& _res = (*res);

    _res(0, 0) = _tmp62;
    _res(1, 0) = _tmp63;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 2, 13>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp150;
    _jacobian(1, 0) = -_tmp153;
    _jacobian(0, 1) = _tmp167;
    _jacobian(1, 1) = _tmp168;
    _jacobian(0, 2) = _tmp176;
    _jacobian(1, 2) = -_tmp177;
    _jacobian(0, 3) = -_tmp185;
    _jacobian(1, 3) = -_tmp187;
    _jacobian(0, 4) = _tmp193;
    _jacobian(1, 4) = _tmp195;
    _jacobian(0, 5) = _tmp201;
    _jacobian(1, 5) = _tmp203;
    _jacobian(0, 6) = -_tmp218;
    _jacobian(1, 6) = _tmp219;
    _jacobian(0, 7) = -_tmp227;
    _jacobian(1, 7) = _tmp228;
    _jacobian(0, 8) = -_tmp232;
    _jacobian(1, 8) = _tmp233;
    _jacobian(0, 9) = _tmp185;
    _jacobian(1, 9) = _tmp187;
    _jacobian(0, 10) = -_tmp193;
    _jacobian(1, 10) = -_tmp195;
    _jacobian(0, 11) = -_tmp201;
    _jacobian(1, 11) = -_tmp203;
    _jacobian(0, 12) = -_tmp239;
    _jacobian(1, 12) = -_tmp241;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 13, 13>& _hessian = (*hessian);

    _hessian(0, 0) = std::pow(_tmp150, Scalar(2)) + std::pow(_tmp153, Scalar(2));
    _hessian(1, 0) = _tmp150 * _tmp167 - _tmp153 * _tmp168;
    _hessian(2, 0) = _tmp150 * _tmp176 + _tmp153 * _tmp177;
    _hessian(3, 0) = -_tmp242 + _tmp243;
    _hessian(4, 0) = _tmp244 - _tmp245;
    _hessian(5, 0) = _tmp246 - _tmp247;
    _hessian(6, 0) = -_tmp150 * _tmp218 - _tmp153 * _tmp219;
    _hessian(7, 0) = -_tmp150 * _tmp227 - _tmp153 * _tmp228;
    _hessian(8, 0) = -_tmp150 * _tmp232 - _tmp153 * _tmp233;
    _hessian(9, 0) = _tmp242 - _tmp243;
    _hessian(10, 0) = -_tmp244 + _tmp245;
    _hessian(11, 0) = -_tmp246 + _tmp247;
    _hessian(12, 0) = -_tmp150 * _tmp239 + _tmp153 * _tmp241;
    _hessian(0, 1) = 0;
    _hessian(1, 1) = std::pow(_tmp167, Scalar(2)) + std::pow(_tmp168, Scalar(2));
    _hessian(2, 1) = _tmp167 * _tmp176 - _tmp168 * _tmp177;
    _hessian(3, 1) = -_tmp248 - _tmp249;
    _hessian(4, 1) = _tmp250 + _tmp251;
    _hessian(5, 1) = _tmp252 + _tmp253;
    _hessian(6, 1) = -_tmp167 * _tmp218 + _tmp168 * _tmp219;
    _hessian(7, 1) = -_tmp167 * _tmp227 + _tmp168 * _tmp228;
    _hessian(8, 1) = -_tmp167 * _tmp232 + _tmp168 * _tmp233;
    _hessian(9, 1) = _tmp248 + _tmp249;
    _hessian(10, 1) = -_tmp250 - _tmp251;
    _hessian(11, 1) = -_tmp252 - _tmp253;
    _hessian(12, 1) = -_tmp167 * _tmp239 - _tmp168 * _tmp241;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) = std::pow(_tmp176, Scalar(2)) + std::pow(_tmp177, Scalar(2));
    _hessian(3, 2) = -_tmp254 + _tmp255;
    _hessian(4, 2) = -_tmp256 + _tmp257;
    _hessian(5, 2) = -_tmp258 + _tmp259;
    _hessian(6, 2) = -_tmp176 * _tmp218 - _tmp177 * _tmp219;
    _hessian(7, 2) = -_tmp176 * _tmp227 - _tmp177 * _tmp228;
    _hessian(8, 2) = -_tmp176 * _tmp232 - _tmp177 * _tmp233;
    _hessian(9, 2) = _tmp254 - _tmp255;
    _hessian(10, 2) = _tmp256 - _tmp257;
    _hessian(11, 2) = _tmp258 - _tmp259;
    _hessian(12, 2) = -_tmp176 * _tmp239 + _tmp177 * _tmp241;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = _tmp262;
    _hessian(4, 3) = _tmp267;
    _hessian(5, 3) = _tmp270;
    _hessian(6, 3) = -_tmp271 + _tmp272;
    _hessian(7, 3) = -_tmp273 + _tmp274;
    _hessian(8, 3) = _tmp275 - _tmp276;
    _hessian(9, 3) = -_tmp260 - _tmp261;
    _hessian(10, 3) = _tmp277;
    _hessian(11, 3) = _tmp278;
    _hessian(12, 3) = _tmp280 + _tmp282;
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) = _tmp285;
    _hessian(5, 4) = _tmp288;
    _hessian(6, 4) = _tmp289 - _tmp290;
    _hessian(7, 4) = _tmp291 - _tmp292;
    _hessian(8, 4) = _tmp293 - _tmp294;
    _hessian(9, 4) = _tmp277;
    _hessian(10, 4) = -_tmp283 - _tmp284;
    _hessian(11, 4) = _tmp295;
    _hessian(12, 4) = -_tmp296 - _tmp297;
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) = _tmp300;
    _hessian(6, 5) = -_tmp301 + _tmp302;
    _hessian(7, 5) = _tmp303 - _tmp304;
    _hessian(8, 5) = -_tmp305 + _tmp306;
    _hessian(9, 5) = _tmp278;
    _hessian(10, 5) = _tmp295;
    _hessian(11, 5) = -_tmp298 - _tmp299;
    _hessian(12, 5) = -_tmp307 - _tmp308;
    _hessian(0, 6) = 0;
    _hessian(1, 6) = 0;
    _hessian(2, 6) = 0;
    _hessian(3, 6) = 0;
    _hessian(4, 6) = 0;
    _hessian(5, 6) = 0;
    _hessian(6, 6) = std::pow(_tmp218, Scalar(2)) + std::pow(_tmp219, Scalar(2));
    _hessian(7, 6) = _tmp218 * _tmp227 + _tmp219 * _tmp228;
    _hessian(8, 6) = _tmp218 * _tmp232 + _tmp219 * _tmp233;
    _hessian(9, 6) = _tmp271 - _tmp272;
    _hessian(10, 6) = -_tmp289 + _tmp290;
    _hessian(11, 6) = _tmp301 - _tmp302;
    _hessian(12, 6) = _tmp218 * _tmp239 - _tmp219 * _tmp241;
    _hessian(0, 7) = 0;
    _hessian(1, 7) = 0;
    _hessian(2, 7) = 0;
    _hessian(3, 7) = 0;
    _hessian(4, 7) = 0;
    _hessian(5, 7) = 0;
    _hessian(6, 7) = 0;
    _hessian(7, 7) = std::pow(_tmp227, Scalar(2)) + std::pow(_tmp228, Scalar(2));
    _hessian(8, 7) = _tmp227 * _tmp232 + _tmp228 * _tmp233;
    _hessian(9, 7) = _tmp273 - _tmp274;
    _hessian(10, 7) = -_tmp291 + _tmp292;
    _hessian(11, 7) = -_tmp303 + _tmp304;
    _hessian(12, 7) = _tmp227 * _tmp239 - _tmp228 * _tmp241;
    _hessian(0, 8) = 0;
    _hessian(1, 8) = 0;
    _hessian(2, 8) = 0;
    _hessian(3, 8) = 0;
    _hessian(4, 8) = 0;
    _hessian(5, 8) = 0;
    _hessian(6, 8) = 0;
    _hessian(7, 8) = 0;
    _hessian(8, 8) = std::pow(_tmp232, Scalar(2)) + std::pow(_tmp233, Scalar(2));
    _hessian(9, 8) = -_tmp275 + _tmp276;
    _hessian(10, 8) = -_tmp293 + _tmp294;
    _hessian(11, 8) = _tmp305 - _tmp306;
    _hessian(12, 8) = _tmp232 * _tmp239 - _tmp233 * _tmp241;
    _hessian(0, 9) = 0;
    _hessian(1, 9) = 0;
    _hessian(2, 9) = 0;
    _hessian(3, 9) = 0;
    _hessian(4, 9) = 0;
    _hessian(5, 9) = 0;
    _hessian(6, 9) = 0;
    _hessian(7, 9) = 0;
    _hessian(8, 9) = 0;
    _hessian(9, 9) = _tmp262;
    _hessian(10, 9) = _tmp267;
    _hessian(11, 9) = _tmp270;
    _hessian(12, 9) = -_tmp280 - _tmp282;
    _hessian(0, 10) = 0;
    _hessian(1, 10) = 0;
    _hessian(2, 10) = 0;
    _hessian(3, 10) = 0;
    _hessian(4, 10) = 0;
    _hessian(5, 10) = 0;
    _hessian(6, 10) = 0;
    _hessian(7, 10) = 0;
    _hessian(8, 10) = 0;
    _hessian(9, 10) = 0;
    _hessian(10, 10) = _tmp285;
    _hessian(11, 10) = _tmp288;
    _hessian(12, 10) = _tmp296 + _tmp297;
    _hessian(0, 11) = 0;
    _hessian(1, 11) = 0;
    _hessian(2, 11) = 0;
    _hessian(3, 11) = 0;
    _hessian(4, 11) = 0;
    _hessian(5, 11) = 0;
    _hessian(6, 11) = 0;
    _hessian(7, 11) = 0;
    _hessian(8, 11) = 0;
    _hessian(9, 11) = 0;
    _hessian(10, 11) = 0;
    _hessian(11, 11) = _tmp300;
    _hessian(12, 11) = _tmp307 + _tmp308;
    _hessian(0, 12) = 0;
    _hessian(1, 12) = 0;
    _hessian(2, 12) = 0;
    _hessian(3, 12) = 0;
    _hessian(4, 12) = 0;
    _hessian(5, 12) = 0;
    _hessian(6, 12) = 0;
    _hessian(7, 12) = 0;
    _hessian(8, 12) = 0;
    _hessian(9, 12) = 0;
    _hessian(10, 12) = 0;
    _hessian(11, 12) = 0;
    _hessian(12, 12) = 4 * std::pow(_tmp238, Scalar(2)) + 4 * std::pow(_tmp240, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 13, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp150 * _tmp62 - _tmp153 * _tmp63;
    _rhs(1, 0) = _tmp167 * _tmp62 + _tmp168 * _tmp63;
    _rhs(2, 0) = _tmp176 * _tmp62 - _tmp177 * _tmp63;
    _rhs(3, 0) = -_tmp309 - _tmp310;
    _rhs(4, 0) = _tmp311 + _tmp312;
    _rhs(5, 0) = _tmp313 + _tmp314;
    _rhs(6, 0) = -_tmp218 * _tmp62 + _tmp219 * _tmp63;
    _rhs(7, 0) = -_tmp227 * _tmp62 + _tmp228 * _tmp63;
    _rhs(8, 0) = -_tmp232 * _tmp62 + _tmp233 * _tmp63;
    _rhs(9, 0) = _tmp309 + _tmp310;
    _rhs(10, 0) = -_tmp311 - _tmp312;
    _rhs(11, 0) = -_tmp313 - _tmp314;
    _rhs(12, 0) = -_tmp239 * _tmp62 - _tmp241 * _tmp63;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
