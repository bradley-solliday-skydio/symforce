// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     backends/cpp/templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Return the 2dof residual of reprojecting the landmark ray into the target spherical camera and
 * comparing it against the correspondence.
 *
 * The landmark is specified as a camera point in the source camera with an inverse range; this
 * means the landmark is fixed in the source camera and always has residual 0 there (this 0 residual
 * is not returned, only the residual in the target camera is returned).
 *
 * The norm of the residual is whitened using the Barron noise model.  Whitening each component of
 * the reprojection error separately would result in rejecting individual components as outliers.
 * Instead, we minimize the whitened norm of the full reprojection error for each point.  See the
 * docstring for `NoiseModel.whiten_norm` for more information on this, and the docstring of
 * `BarronNoiseModel` for more information on the noise model.
 *
 * Args:
 *     source_pose: The pose of the source camera
 *     target_pose: The pose of the target camera
 *     target_calibration_storage: The storage vector of the target spherical camera calibration
 *     source_inverse_range: The inverse range of the landmark in the source camera
 *     p_camera_source: The location of the landmark in the source camera coordinate, will be
 * normalized target_pixel: The location of the correspondence in the target camera weight: The
 * weight of the factor gnc_mu: The mu convexity parameter for the Barron noise model gnc_scale: The
 * scale parameter for the Barron noise model epsilon: Small positive value
 *     target_camera_model_class: The subclass of CameraCal to use as the target camera model
 *
 * Outputs:
 *     res: 2dof whiten residual of the reprojection
 *     jacobian: (2x13) jacobian of res wrt args source_pose (6), target_pose (6),
 *               source_inverse_range (1)
 *     hessian: (13x13) Gauss-Newton hessian for args source_pose (6), target_pose (6),
 *              source_inverse_range (1)
 *     rhs: (13x1) Gauss-Newton rhs for args source_pose (6), target_pose (6), source_inverse_range
 *          (1)
 */
template <typename Scalar>
void InverseRangeLandmarkPolynomialReprojectionErrorFactor(
    const sym::Pose3<Scalar>& source_pose, const sym::Pose3<Scalar>& target_pose,
    const Eigen::Matrix<Scalar, 8, 1>& target_calibration_storage,
    const Scalar source_inverse_range, const Eigen::Matrix<Scalar, 3, 1>& p_camera_source,
    const Eigen::Matrix<Scalar, 2, 1>& target_pixel, const Scalar weight, const Scalar gnc_mu,
    const Scalar gnc_scale, const Scalar epsilon, Eigen::Matrix<Scalar, 2, 1>* const res = nullptr,
    Eigen::Matrix<Scalar, 2, 13>* const jacobian = nullptr,
    Eigen::Matrix<Scalar, 13, 13>* const hessian = nullptr,
    Eigen::Matrix<Scalar, 13, 1>* const rhs = nullptr) {
  // Total ops: 1274

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _source_pose = source_pose.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _target_pose = target_pose.Data();

  // Intermediate terms (336)
  const Scalar _tmp0 = _target_pose[0] * _target_pose[2];
  const Scalar _tmp1 = 2 * _tmp0;
  const Scalar _tmp2 = _target_pose[1] * _target_pose[3];
  const Scalar _tmp3 = 2 * _tmp2;
  const Scalar _tmp4 = _source_pose[0] * _source_pose[3];
  const Scalar _tmp5 = 2 * _tmp4;
  const Scalar _tmp6 = _source_pose[1] * _source_pose[2];
  const Scalar _tmp7 = 2 * _tmp6;
  const Scalar _tmp8 = std::pow(Scalar(epsilon + std::pow(p_camera_source(0, 0), Scalar(2)) +
                                       std::pow(p_camera_source(1, 0), Scalar(2)) +
                                       std::pow(p_camera_source(2, 0), Scalar(2))),
                                Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp9 = _tmp8 * p_camera_source(1, 0);
  const Scalar _tmp10 = _source_pose[0] * _source_pose[2];
  const Scalar _tmp11 = 2 * _tmp10;
  const Scalar _tmp12 = _source_pose[1] * _source_pose[3];
  const Scalar _tmp13 = 2 * _tmp12;
  const Scalar _tmp14 = _tmp8 * p_camera_source(0, 0);
  const Scalar _tmp15 = std::pow(_source_pose[1], Scalar(2));
  const Scalar _tmp16 = -2 * _tmp15;
  const Scalar _tmp17 = std::pow(_source_pose[0], Scalar(2));
  const Scalar _tmp18 = -2 * _tmp17;
  const Scalar _tmp19 = _tmp8 * p_camera_source(2, 0);
  const Scalar _tmp20 = _tmp14 * (_tmp11 - _tmp13) + _tmp19 * (_tmp16 + _tmp18 + 1) +
                        _tmp9 * (_tmp5 + _tmp7) +
                        source_inverse_range * (_source_pose[6] - _target_pose[6]);
  const Scalar _tmp21 = _target_pose[2] * _target_pose[3];
  const Scalar _tmp22 = 2 * _tmp21;
  const Scalar _tmp23 = _target_pose[0] * _target_pose[1];
  const Scalar _tmp24 = 2 * _tmp23;
  const Scalar _tmp25 = _source_pose[0] * _source_pose[1];
  const Scalar _tmp26 = 2 * _tmp25;
  const Scalar _tmp27 = _source_pose[2] * _source_pose[3];
  const Scalar _tmp28 = 2 * _tmp27;
  const Scalar _tmp29 = std::pow(_source_pose[2], Scalar(2));
  const Scalar _tmp30 = 1 - 2 * _tmp29;
  const Scalar _tmp31 = _tmp14 * (_tmp26 + _tmp28) + _tmp19 * (-_tmp5 + _tmp7) +
                        _tmp9 * (_tmp18 + _tmp30) +
                        source_inverse_range * (_source_pose[5] - _target_pose[5]);
  const Scalar _tmp32 = std::pow(_target_pose[1], Scalar(2));
  const Scalar _tmp33 = -2 * _tmp32;
  const Scalar _tmp34 = std::pow(_target_pose[2], Scalar(2));
  const Scalar _tmp35 = -2 * _tmp34;
  const Scalar _tmp36 = _tmp14 * (_tmp16 + _tmp30) + _tmp19 * (_tmp11 + _tmp13) +
                        _tmp9 * (_tmp26 - _tmp28) +
                        source_inverse_range * (_source_pose[4] - _target_pose[4]);
  const Scalar _tmp37 =
      _tmp20 * (_tmp1 - _tmp3) + _tmp31 * (_tmp22 + _tmp24) + _tmp36 * (_tmp33 + _tmp35 + 1);
  const Scalar _tmp38 = std::pow(_target_pose[0], Scalar(2));
  const Scalar _tmp39 = 1 - 2 * _tmp38;
  const Scalar _tmp40 = _target_pose[1] * _target_pose[2];
  const Scalar _tmp41 = 2 * _tmp40;
  const Scalar _tmp42 = _target_pose[0] * _target_pose[3];
  const Scalar _tmp43 = 2 * _tmp42;
  const Scalar _tmp44 =
      _tmp20 * (_tmp33 + _tmp39) + _tmp31 * (_tmp41 - _tmp43) + _tmp36 * (_tmp1 + _tmp3);
  const Scalar _tmp45 = std::max<Scalar>(epsilon, std::fabs(_tmp44));
  const Scalar _tmp46 = std::pow(_tmp45, Scalar(-2));
  const Scalar _tmp47 =
      _tmp20 * (_tmp41 + _tmp43) + _tmp31 * (_tmp35 + _tmp39) + _tmp36 * (-_tmp22 + _tmp24);
  const Scalar _tmp48 =
      std::pow(_tmp37, Scalar(2)) * _tmp46 + _tmp46 * std::pow(_tmp47, Scalar(2)) + epsilon;
  const Scalar _tmp49 =
      (Scalar(1.0) *
           [&]() {
             const Scalar base = _tmp48;
             return base * base * base;
           }() *
           target_calibration_storage(7, 0) +
       Scalar(1.0) * std::pow(_tmp48, Scalar(2)) * target_calibration_storage(6, 0) +
       Scalar(1.0) * _tmp48 * target_calibration_storage(5, 0) + Scalar(1.0)) /
      _tmp45;
  const Scalar _tmp50 = target_calibration_storage(2, 0) - target_pixel(0, 0);
  const Scalar _tmp51 = _tmp37 * _tmp49 * target_calibration_storage(0, 0) + _tmp50;
  const Scalar _tmp52 = std::sqrt(weight);
  const Scalar _tmp53 = Scalar(1.0) / (epsilon - gnc_mu + 1);
  const Scalar _tmp54 = epsilon + std::fabs(_tmp53);
  const Scalar _tmp55 = 2 - _tmp53;
  const Scalar _tmp56 =
      _tmp55 + epsilon * (2 * std::min<Scalar>(0, (((_tmp55) > 0) - ((_tmp55) < 0))) + 1);
  const Scalar _tmp57 = target_calibration_storage(3, 0) - target_pixel(1, 0);
  const Scalar _tmp58 = _tmp47 * _tmp49 * target_calibration_storage(1, 0) + _tmp57;
  const Scalar _tmp59 = std::pow(_tmp51, Scalar(2)) + std::pow(_tmp58, Scalar(2)) + epsilon;
  const Scalar _tmp60 = std::pow(gnc_scale, Scalar(-2));
  const Scalar _tmp61 =
      std::sqrt(Scalar(2)) * _tmp52 *
      std::sqrt(Scalar(_tmp54 *
                       (std::pow(Scalar(1 + _tmp59 * _tmp60 / _tmp54),
                                 Scalar((Scalar(1) / Scalar(2)) * _tmp56)) -
                        1) /
                       _tmp56)) *
      std::max<Scalar>(
          0, std::min<Scalar>((((_tmp44) > 0) - ((_tmp44) < 0)),
                              (((-std::sqrt(_tmp48) + target_calibration_storage(4, 0)) > 0) -
                               ((-std::sqrt(_tmp48) + target_calibration_storage(4, 0)) < 0)))) /
      std::sqrt(_tmp59);
  const Scalar _tmp62 = _tmp51 * _tmp61;
  const Scalar _tmp63 = _tmp58 * _tmp61;
  const Scalar _tmp64 = _tmp32 + _tmp34 + Scalar(-1) / Scalar(2);
  const Scalar _tmp65 = _tmp29 + Scalar(-1) / Scalar(2);
  const Scalar _tmp66 = 2 * _tmp14;
  const Scalar _tmp67 = _tmp25 - _tmp27;
  const Scalar _tmp68 = 2 * _tmp9;
  const Scalar _tmp69 = _tmp10 + _tmp12;
  const Scalar _tmp70 = 2 * _tmp69;
  const Scalar _tmp71 = -_source_pose[4] + _target_pose[4];
  const Scalar _tmp72 = _tmp19 * _tmp70 - _tmp66 * (_tmp15 + _tmp65) + _tmp67 * _tmp68 -
                        _tmp71 * source_inverse_range;
  const Scalar _tmp73 = _tmp0 - _tmp2;
  const Scalar _tmp74 = _tmp4 + _tmp6;
  const Scalar _tmp75 = 2 * _tmp74;
  const Scalar _tmp76 = _tmp10 - _tmp12;
  const Scalar _tmp77 = 2 * _tmp76;
  const Scalar _tmp78 = -_source_pose[6] + _target_pose[6];
  const Scalar _tmp79 = _tmp14 * _tmp77 - 2 * _tmp19 * (_tmp15 + _tmp17 + Scalar(-1) / Scalar(2)) +
                        _tmp75 * _tmp9 - _tmp78 * source_inverse_range;
  const Scalar _tmp80 = _tmp73 * _tmp79;
  const Scalar _tmp81 = _tmp21 + _tmp23;
  const Scalar _tmp82 = _tmp25 + _tmp27;
  const Scalar _tmp83 = _tmp4 - _tmp6;
  const Scalar _tmp84 = 2 * _tmp83;
  const Scalar _tmp85 = -_source_pose[5] + _target_pose[5];
  const Scalar _tmp86 = -_tmp19 * _tmp84 + _tmp66 * _tmp82 - _tmp68 * (_tmp17 + _tmp65) -
                        _tmp85 * source_inverse_range;
  const Scalar _tmp87 = _tmp81 * _tmp86;
  const Scalar _tmp88 = _tmp64 * _tmp72 - _tmp80 - _tmp87;
  const Scalar _tmp89 = _tmp0 + _tmp2;
  const Scalar _tmp90 = _tmp72 * _tmp89;
  const Scalar _tmp91 = _tmp38 + Scalar(-1) / Scalar(2);
  const Scalar _tmp92 = _tmp32 + _tmp91;
  const Scalar _tmp93 = _tmp40 - _tmp42;
  const Scalar _tmp94 = _tmp86 * _tmp93;
  const Scalar _tmp95 = -_tmp79 * _tmp92 + _tmp90 + _tmp94;
  const Scalar _tmp96 = 2 * std::fabs(_tmp95);
  const Scalar _tmp97 = std::max<Scalar>(_tmp96, epsilon);
  const Scalar _tmp98 = Scalar(1.0) / (_tmp97);
  const Scalar _tmp99 = _tmp98 * target_calibration_storage(0, 0);
  const Scalar _tmp100 = _tmp21 - _tmp23;
  const Scalar _tmp101 = _tmp100 * _tmp72;
  const Scalar _tmp102 = _tmp40 + _tmp42;
  const Scalar _tmp103 = _tmp102 * _tmp79;
  const Scalar _tmp104 = _tmp34 + _tmp91;
  const Scalar _tmp105 = _tmp101 - _tmp103 + _tmp104 * _tmp86;
  const Scalar _tmp106 = std::pow(_tmp105, Scalar(2));
  const Scalar _tmp107 = std::pow(_tmp97, Scalar(-2));
  const Scalar _tmp108 = 4 * _tmp107;
  const Scalar _tmp109 = std::pow(_tmp88, Scalar(2));
  const Scalar _tmp110 = _tmp106 * _tmp108 + _tmp108 * _tmp109 + epsilon;
  const Scalar _tmp111 = std::pow(_tmp110, Scalar(2));
  const Scalar _tmp112 =
      [&]() {
        const Scalar base = _tmp110;
        return base * base * base;
      }() *
          target_calibration_storage(7, 0) +
      _tmp110 * target_calibration_storage(5, 0) + _tmp111 * target_calibration_storage(6, 0) +
      Scalar(1.0);
  const Scalar _tmp113 = Scalar(2.0) * _tmp112;
  const Scalar _tmp114 = _tmp113 * _tmp99;
  const Scalar _tmp115 = -_tmp114 * _tmp88 + _tmp50;
  const Scalar _tmp116 = std::pow(_source_pose[3], Scalar(2));
  const Scalar _tmp117 = -_tmp116;
  const Scalar _tmp118 = -_tmp15;
  const Scalar _tmp119 = _tmp117 + _tmp118 + _tmp17 + _tmp29;
  const Scalar _tmp120 = 2 * _tmp119 * _tmp19 - 2 * _tmp84 * _tmp9;
  const Scalar _tmp121 = -_tmp17 + _tmp29;
  const Scalar _tmp122 = _tmp116 + _tmp118 + _tmp121;
  const Scalar _tmp123 = 2 * _tmp122 * _tmp9 - 2 * _tmp19 * _tmp75;
  const Scalar _tmp124 = 4 * _tmp19 * _tmp67 - 4 * _tmp69 * _tmp9;
  const Scalar _tmp125 = _tmp120 * _tmp93 - _tmp123 * _tmp92 - _tmp124 * _tmp89;
  const Scalar _tmp126 = -epsilon;
  const Scalar _tmp127 = (((_tmp95) > 0) - ((_tmp95) < 0));
  const Scalar _tmp128 = _tmp127 * ((((_tmp126 + _tmp96) > 0) - ((_tmp126 + _tmp96) < 0)) + 1);
  const Scalar _tmp129 = Scalar(1.0) * _tmp112;
  const Scalar _tmp130 = _tmp128 * _tmp129;
  const Scalar _tmp131 = _tmp107 * _tmp88;
  const Scalar _tmp132 = _tmp131 * target_calibration_storage(0, 0);
  const Scalar _tmp133 = _tmp130 * _tmp132;
  const Scalar _tmp134 = _tmp100 * _tmp124 + _tmp102 * _tmp123 - _tmp104 * _tmp120;
  const Scalar _tmp135 = _tmp105 * _tmp107;
  const Scalar _tmp136 = _tmp128 / [&]() {
    const Scalar base = _tmp97;
    return base * base * base;
  }();
  const Scalar _tmp137 = _tmp109 * _tmp136;
  const Scalar _tmp138 = _tmp120 * _tmp81 + _tmp123 * _tmp73 + _tmp124 * _tmp64;
  const Scalar _tmp139 = _tmp106 * _tmp136;
  const Scalar _tmp140 =
      _tmp125 * _tmp137 + _tmp125 * _tmp139 + _tmp131 * _tmp138 + _tmp134 * _tmp135;
  const Scalar _tmp141 = _tmp111 * target_calibration_storage(7, 0);
  const Scalar _tmp142 = Scalar(12.0) * _tmp141;
  const Scalar _tmp143 = _tmp110 * target_calibration_storage(6, 0);
  const Scalar _tmp144 = Scalar(8.0) * _tmp143;
  const Scalar _tmp145 = Scalar(4.0) * target_calibration_storage(5, 0);
  const Scalar _tmp146 = -_tmp140 * _tmp142 - _tmp140 * _tmp144 - _tmp140 * _tmp145;
  const Scalar _tmp147 = _tmp88 * _tmp99;
  const Scalar _tmp148 = 2 * _tmp147;
  const Scalar _tmp149 = _tmp129 * _tmp99;
  const Scalar _tmp150 = _tmp125 * _tmp133 + _tmp138 * _tmp149 - _tmp146 * _tmp148;
  const Scalar _tmp151 = _tmp98 * target_calibration_storage(1, 0);
  const Scalar _tmp152 = _tmp105 * _tmp151;
  const Scalar _tmp153 = 2 * _tmp152;
  const Scalar _tmp154 = _tmp135 * target_calibration_storage(1, 0);
  const Scalar _tmp155 = _tmp130 * _tmp154;
  const Scalar _tmp156 = _tmp129 * _tmp151;
  const Scalar _tmp157 = _tmp125 * _tmp155 + _tmp134 * _tmp156 - _tmp146 * _tmp153;
  const Scalar _tmp158 = -_tmp113 * _tmp152 + _tmp57;
  const Scalar _tmp159 = _tmp115 * _tmp150 + _tmp157 * _tmp158;
  const Scalar _tmp160 = std::pow(_tmp115, Scalar(2)) + std::pow(_tmp158, Scalar(2)) + epsilon;
  const Scalar _tmp161 = std::pow(_tmp160, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp162 = std::max<Scalar>(
      0,
      std::min<Scalar>(_tmp127, (((-std::sqrt(_tmp110) + target_calibration_storage(4, 0)) > 0) -
                                 ((-std::sqrt(_tmp110) + target_calibration_storage(4, 0)) < 0))));
  const Scalar _tmp163 = Scalar(1.0) / (_tmp126 + gnc_mu - 1);
  const Scalar _tmp164 = epsilon + std::fabs(_tmp163);
  const Scalar _tmp165 = _tmp160 * _tmp60 / _tmp164 + 1;
  const Scalar _tmp166 = _tmp163 + 2;
  const Scalar _tmp167 = _tmp166 + 2 * epsilon *
                                       (std::min<Scalar>(0, (((_tmp166) > 0) - ((_tmp166) < 0))) +
                                        Scalar(1) / Scalar(2));
  const Scalar _tmp168 =
      std::sqrt(Scalar(2)) *
      std::sqrt(Scalar(
          _tmp164 * (std::pow(_tmp165, Scalar((Scalar(1) / Scalar(2)) * _tmp167)) - 1) / _tmp167));
  const Scalar _tmp169 = _tmp161 * _tmp162 *
                         std::pow(_tmp165, Scalar((Scalar(1) / Scalar(2)) * _tmp167 - 1)) * _tmp52 *
                         _tmp60 / _tmp168;
  const Scalar _tmp170 = _tmp115 * _tmp169;
  const Scalar _tmp171 = _tmp162 * _tmp168 * _tmp52;
  const Scalar _tmp172 = _tmp171 / (_tmp160 * std::sqrt(_tmp160));
  const Scalar _tmp173 = _tmp115 * _tmp172;
  const Scalar _tmp174 = _tmp161 * _tmp171;
  const Scalar _tmp175 = _tmp150 * _tmp174 + _tmp159 * _tmp170 - _tmp159 * _tmp173;
  const Scalar _tmp176 = _tmp158 * _tmp172;
  const Scalar _tmp177 = _tmp158 * _tmp169;
  const Scalar _tmp178 = -_tmp157 * _tmp174 + _tmp159 * _tmp176 - _tmp159 * _tmp177;
  const Scalar _tmp179 = _tmp117 + _tmp121 + _tmp15;
  const Scalar _tmp180 = -2 * _tmp14 * _tmp70 - 2 * _tmp179 * _tmp19;
  const Scalar _tmp181 = -2 * _tmp122 * _tmp14 + 2 * _tmp19 * _tmp77;
  const Scalar _tmp182 = 4 * _tmp14 * _tmp83 + 4 * _tmp19 * _tmp82;
  const Scalar _tmp183 = -_tmp180 * _tmp64 + _tmp181 * _tmp73 + _tmp182 * _tmp81;
  const Scalar _tmp184 = _tmp180 * _tmp89 - _tmp181 * _tmp92 + _tmp182 * _tmp93;
  const Scalar _tmp185 = -_tmp100 * _tmp180 + _tmp102 * _tmp181 - _tmp104 * _tmp182;
  const Scalar _tmp186 =
      _tmp131 * _tmp183 + _tmp135 * _tmp185 + _tmp137 * _tmp184 + _tmp139 * _tmp184;
  const Scalar _tmp187 = -_tmp142 * _tmp186 - _tmp144 * _tmp186 - _tmp145 * _tmp186;
  const Scalar _tmp188 = _tmp133 * _tmp184 - _tmp148 * _tmp187 + _tmp149 * _tmp183;
  const Scalar _tmp189 = -_tmp153 * _tmp187 + _tmp155 * _tmp184 + _tmp156 * _tmp185;
  const Scalar _tmp190 = _tmp115 * _tmp188 + _tmp158 * _tmp189;
  const Scalar _tmp191 = _tmp170 * _tmp190 - _tmp173 * _tmp190 + _tmp174 * _tmp188;
  const Scalar _tmp192 = _tmp174 * _tmp189 - _tmp176 * _tmp190 + _tmp177 * _tmp190;
  const Scalar _tmp193 = 4 * _tmp14 * _tmp74 - 4 * _tmp76 * _tmp9;
  const Scalar _tmp194 = 2 * _tmp179 * _tmp9 + 2 * _tmp66 * _tmp67;
  const Scalar _tmp195 = -2 * _tmp119 * _tmp14 - 2 * _tmp68 * _tmp82;
  const Scalar _tmp196 = -_tmp193 * _tmp92 + _tmp194 * _tmp89 + _tmp195 * _tmp93;
  const Scalar _tmp197 = _tmp193 * _tmp73 - _tmp194 * _tmp64 + _tmp195 * _tmp81;
  const Scalar _tmp198 = -_tmp100 * _tmp194 + _tmp102 * _tmp193 - _tmp104 * _tmp195;
  const Scalar _tmp199 =
      _tmp131 * _tmp197 + _tmp135 * _tmp198 + _tmp137 * _tmp196 + _tmp139 * _tmp196;
  const Scalar _tmp200 = -_tmp142 * _tmp199 - _tmp144 * _tmp199 - _tmp145 * _tmp199;
  const Scalar _tmp201 = _tmp130 * _tmp196;
  const Scalar _tmp202 = _tmp132 * _tmp201 - _tmp148 * _tmp200 + _tmp149 * _tmp197;
  const Scalar _tmp203 = -_tmp153 * _tmp200 + _tmp154 * _tmp201 + _tmp156 * _tmp198;
  const Scalar _tmp204 = _tmp115 * _tmp202 + _tmp158 * _tmp203;
  const Scalar _tmp205 = _tmp170 * _tmp204 - _tmp173 * _tmp204 + _tmp174 * _tmp202;
  const Scalar _tmp206 = -_tmp174 * _tmp203 + _tmp176 * _tmp204 - _tmp177 * _tmp204;
  const Scalar _tmp207 = _tmp113 * _tmp151;
  const Scalar _tmp208 = _tmp207 * source_inverse_range;
  const Scalar _tmp209 = _tmp100 * _tmp208;
  const Scalar _tmp210 = _tmp135 * source_inverse_range;
  const Scalar _tmp211 = _tmp210 * target_calibration_storage(1, 0);
  const Scalar _tmp212 = _tmp113 * _tmp128;
  const Scalar _tmp213 = _tmp212 * _tmp89;
  const Scalar _tmp214 = _tmp211 * _tmp213;
  const Scalar _tmp215 = _tmp89 * source_inverse_range;
  const Scalar _tmp216 = _tmp131 * source_inverse_range;
  const Scalar _tmp217 =
      _tmp100 * _tmp210 - _tmp137 * _tmp215 - _tmp139 * _tmp215 + _tmp216 * _tmp64;
  const Scalar _tmp218 = Scalar(8.0) * target_calibration_storage(5, 0);
  const Scalar _tmp219 = _tmp217 * _tmp218;
  const Scalar _tmp220 = Scalar(24.0) * _tmp141;
  const Scalar _tmp221 = _tmp217 * _tmp220;
  const Scalar _tmp222 = Scalar(16.0) * _tmp143;
  const Scalar _tmp223 = _tmp217 * _tmp222;
  const Scalar _tmp224 = _tmp219 + _tmp221 + _tmp223;
  const Scalar _tmp225 = -_tmp153 * _tmp224 - _tmp209 + _tmp214;
  const Scalar _tmp226 = _tmp216 * target_calibration_storage(0, 0);
  const Scalar _tmp227 = _tmp213 * _tmp226;
  const Scalar _tmp228 = _tmp114 * source_inverse_range;
  const Scalar _tmp229 = _tmp228 * _tmp64;
  const Scalar _tmp230 = -_tmp148 * _tmp224 + _tmp227 - _tmp229;
  const Scalar _tmp231 = _tmp115 * _tmp230 + _tmp158 * _tmp225;
  const Scalar _tmp232 = -_tmp170 * _tmp231 + _tmp173 * _tmp231 - _tmp174 * _tmp230;
  const Scalar _tmp233 = -_tmp174 * _tmp225 + _tmp176 * _tmp231 - _tmp177 * _tmp231;
  const Scalar _tmp234 = _tmp137 * source_inverse_range;
  const Scalar _tmp235 = _tmp139 * source_inverse_range;
  const Scalar _tmp236 =
      -_tmp104 * _tmp210 + _tmp216 * _tmp81 + _tmp234 * _tmp93 + _tmp235 * _tmp93;
  const Scalar _tmp237 = _tmp222 * _tmp236;
  const Scalar _tmp238 = _tmp220 * _tmp236;
  const Scalar _tmp239 = _tmp218 * _tmp236;
  const Scalar _tmp240 = -_tmp237 - _tmp238 - _tmp239;
  const Scalar _tmp241 = _tmp212 * _tmp93;
  const Scalar _tmp242 = _tmp211 * _tmp241;
  const Scalar _tmp243 = _tmp104 * _tmp208;
  const Scalar _tmp244 = -_tmp153 * _tmp240 + _tmp242 - _tmp243;
  const Scalar _tmp245 = _tmp226 * _tmp241;
  const Scalar _tmp246 = _tmp228 * _tmp81;
  const Scalar _tmp247 = -_tmp148 * _tmp240 + _tmp245 + _tmp246;
  const Scalar _tmp248 = _tmp115 * _tmp247 + _tmp158 * _tmp244;
  const Scalar _tmp249 = _tmp170 * _tmp248 - _tmp173 * _tmp248 + _tmp174 * _tmp247;
  const Scalar _tmp250 = _tmp174 * _tmp244 - _tmp176 * _tmp248 + _tmp177 * _tmp248;
  const Scalar _tmp251 = _tmp212 * _tmp92;
  const Scalar _tmp252 = _tmp211 * _tmp251;
  const Scalar _tmp253 =
      -_tmp102 * _tmp210 - _tmp216 * _tmp73 + _tmp234 * _tmp92 + _tmp235 * _tmp92;
  const Scalar _tmp254 = _tmp218 * _tmp253;
  const Scalar _tmp255 = _tmp222 * _tmp253;
  const Scalar _tmp256 = _tmp220 * _tmp253;
  const Scalar _tmp257 = _tmp254 + _tmp255 + _tmp256;
  const Scalar _tmp258 = _tmp102 * _tmp208;
  const Scalar _tmp259 = -_tmp153 * _tmp257 - _tmp252 + _tmp258;
  const Scalar _tmp260 = _tmp226 * _tmp251;
  const Scalar _tmp261 = _tmp228 * _tmp73;
  const Scalar _tmp262 = -_tmp148 * _tmp257 - _tmp260 + _tmp261;
  const Scalar _tmp263 = _tmp115 * _tmp262 + _tmp158 * _tmp259;
  const Scalar _tmp264 = _tmp170 * _tmp263 - _tmp173 * _tmp263 + _tmp174 * _tmp262;
  const Scalar _tmp265 = _tmp174 * _tmp259 - _tmp176 * _tmp263 + _tmp177 * _tmp263;
  const Scalar _tmp266 = 2 * _tmp101;
  const Scalar _tmp267 = 2 * _tmp103;
  const Scalar _tmp268 = std::pow(_target_pose[3], Scalar(2));
  const Scalar _tmp269 = -_tmp268;
  const Scalar _tmp270 = -_tmp32 + _tmp38;
  const Scalar _tmp271 = _tmp86 * (_tmp269 + _tmp270 + _tmp34);
  const Scalar _tmp272 = _tmp266 - _tmp267 + _tmp271;
  const Scalar _tmp273 = 2 * _tmp90;
  const Scalar _tmp274 = -_tmp34;
  const Scalar _tmp275 = _tmp79 * (_tmp269 + _tmp274 + _tmp32 + _tmp38);
  const Scalar _tmp276 = 2 * _tmp94;
  const Scalar _tmp277 = _tmp273 - _tmp275 + _tmp276;
  const Scalar _tmp278 = _tmp135 * _tmp277 + _tmp137 * _tmp272 + _tmp139 * _tmp272;
  const Scalar _tmp279 = -_tmp142 * _tmp278 - _tmp144 * _tmp278 - _tmp145 * _tmp278;
  const Scalar _tmp280 = _tmp133 * _tmp272 - _tmp148 * _tmp279;
  const Scalar _tmp281 = -_tmp153 * _tmp279 + _tmp155 * _tmp272 + _tmp156 * _tmp277;
  const Scalar _tmp282 = _tmp115 * _tmp280 + _tmp158 * _tmp281;
  const Scalar _tmp283 = _tmp170 * _tmp282 - _tmp173 * _tmp282 + _tmp174 * _tmp280;
  const Scalar _tmp284 = _tmp174 * _tmp281 - _tmp176 * _tmp282 + _tmp177 * _tmp282;
  const Scalar _tmp285 = _tmp72 * (_tmp268 + _tmp270 + _tmp274);
  const Scalar _tmp286 = 2 * _tmp80;
  const Scalar _tmp287 = 2 * _tmp87;
  const Scalar _tmp288 = _tmp285 + _tmp286 + _tmp287;
  const Scalar _tmp289 = -_tmp273 + _tmp275 - _tmp276;
  const Scalar _tmp290 = _tmp131 * _tmp289 + _tmp137 * _tmp288 + _tmp139 * _tmp288;
  const Scalar _tmp291 = -2 * _tmp142 * _tmp290 - 2 * _tmp144 * _tmp290 - 2 * _tmp145 * _tmp290;
  const Scalar _tmp292 = -_tmp152 * _tmp291 + _tmp155 * _tmp288;
  const Scalar _tmp293 = _tmp133 * _tmp288 - _tmp147 * _tmp291 + _tmp149 * _tmp289;
  const Scalar _tmp294 = _tmp115 * _tmp293 + _tmp158 * _tmp292;
  const Scalar _tmp295 = _tmp170 * _tmp294 - _tmp173 * _tmp294 + _tmp174 * _tmp293;
  const Scalar _tmp296 = -_tmp174 * _tmp292 + _tmp176 * _tmp294 - _tmp177 * _tmp294;
  const Scalar _tmp297 = -_tmp266 + _tmp267 - _tmp271;
  const Scalar _tmp298 = -_tmp285 - _tmp286 - _tmp287;
  const Scalar _tmp299 = _tmp131 * _tmp297 + _tmp135 * _tmp298;
  const Scalar _tmp300 = -_tmp142 * _tmp299 - _tmp144 * _tmp299 - _tmp145 * _tmp299;
  const Scalar _tmp301 = -_tmp153 * _tmp300 + _tmp156 * _tmp298;
  const Scalar _tmp302 = -_tmp148 * _tmp300 + _tmp149 * _tmp297;
  const Scalar _tmp303 = _tmp115 * _tmp302 + _tmp158 * _tmp301;
  const Scalar _tmp304 = -_tmp170 * _tmp303 + _tmp173 * _tmp303 - _tmp174 * _tmp302;
  const Scalar _tmp305 = _tmp174 * _tmp301 - _tmp176 * _tmp303 + _tmp177 * _tmp303;
  const Scalar _tmp306 = -_tmp219 - _tmp221 - _tmp223;
  const Scalar _tmp307 = -_tmp153 * _tmp306 + _tmp209 - _tmp214;
  const Scalar _tmp308 = -_tmp148 * _tmp306 - _tmp227 + _tmp229;
  const Scalar _tmp309 = _tmp115 * _tmp308 + _tmp158 * _tmp307;
  const Scalar _tmp310 = _tmp170 * _tmp309 - _tmp173 * _tmp309 + _tmp174 * _tmp308;
  const Scalar _tmp311 = _tmp174 * _tmp307 - _tmp176 * _tmp309 + _tmp177 * _tmp309;
  const Scalar _tmp312 = _tmp237 + _tmp238 + _tmp239;
  const Scalar _tmp313 = -_tmp148 * _tmp312 - _tmp245 - _tmp246;
  const Scalar _tmp314 = -_tmp153 * _tmp312 - _tmp242 + _tmp243;
  const Scalar _tmp315 = _tmp115 * _tmp313 + _tmp158 * _tmp314;
  const Scalar _tmp316 = -_tmp170 * _tmp315 + _tmp173 * _tmp315 - _tmp174 * _tmp313;
  const Scalar _tmp317 = _tmp174 * _tmp314 - _tmp176 * _tmp315 + _tmp177 * _tmp315;
  const Scalar _tmp318 = -_tmp254 - _tmp255 - _tmp256;
  const Scalar _tmp319 = -_tmp148 * _tmp318 + _tmp260 - _tmp261;
  const Scalar _tmp320 = -_tmp153 * _tmp318 + _tmp252 - _tmp258;
  const Scalar _tmp321 = _tmp115 * _tmp319 + _tmp158 * _tmp320;
  const Scalar _tmp322 = _tmp115 * _tmp321;
  const Scalar _tmp323 = _tmp169 * _tmp322 - _tmp172 * _tmp322 + _tmp174 * _tmp319;
  const Scalar _tmp324 = -_tmp174 * _tmp320 + _tmp176 * _tmp321 - _tmp177 * _tmp321;
  const Scalar _tmp325 = _tmp100 * _tmp71 - _tmp102 * _tmp78 + _tmp104 * _tmp85;
  const Scalar _tmp326 = _tmp71 * _tmp89 - _tmp78 * _tmp92 + _tmp85 * _tmp93;
  const Scalar _tmp327 = -_tmp64 * _tmp71 + _tmp73 * _tmp78 + _tmp81 * _tmp85;
  const Scalar _tmp328 =
      -_tmp131 * _tmp327 + _tmp135 * _tmp325 - _tmp137 * _tmp326 - _tmp139 * _tmp326;
  const Scalar _tmp329 = -_tmp218 * _tmp328 - _tmp220 * _tmp328 - _tmp222 * _tmp328;
  const Scalar _tmp330 = _tmp212 * _tmp326;
  const Scalar _tmp331 = -_tmp153 * _tmp329 - _tmp154 * _tmp330 + _tmp207 * _tmp325;
  const Scalar _tmp332 = -_tmp114 * _tmp327 - _tmp132 * _tmp330 - _tmp148 * _tmp329;
  const Scalar _tmp333 = _tmp115 * _tmp332 + _tmp158 * _tmp331;
  const Scalar _tmp334 = _tmp170 * _tmp333 - _tmp173 * _tmp333 + _tmp174 * _tmp332;
  const Scalar _tmp335 = _tmp174 * _tmp331 - _tmp176 * _tmp333 + _tmp177 * _tmp333;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 2, 1>& _res = (*res);

    _res(0, 0) = _tmp62;
    _res(1, 0) = _tmp63;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 2, 13>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp175;
    _jacobian(1, 0) = -_tmp178;
    _jacobian(0, 1) = _tmp191;
    _jacobian(1, 1) = _tmp192;
    _jacobian(0, 2) = _tmp205;
    _jacobian(1, 2) = -_tmp206;
    _jacobian(0, 3) = -_tmp232;
    _jacobian(1, 3) = -_tmp233;
    _jacobian(0, 4) = _tmp249;
    _jacobian(1, 4) = _tmp250;
    _jacobian(0, 5) = _tmp264;
    _jacobian(1, 5) = _tmp265;
    _jacobian(0, 6) = _tmp283;
    _jacobian(1, 6) = _tmp284;
    _jacobian(0, 7) = _tmp295;
    _jacobian(1, 7) = -_tmp296;
    _jacobian(0, 8) = -_tmp304;
    _jacobian(1, 8) = _tmp305;
    _jacobian(0, 9) = _tmp310;
    _jacobian(1, 9) = _tmp311;
    _jacobian(0, 10) = -_tmp316;
    _jacobian(1, 10) = _tmp317;
    _jacobian(0, 11) = _tmp323;
    _jacobian(1, 11) = -_tmp324;
    _jacobian(0, 12) = _tmp334;
    _jacobian(1, 12) = _tmp335;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 13, 13>& _hessian = (*hessian);

    _hessian(0, 0) = std::pow(_tmp175, Scalar(2)) + std::pow(_tmp178, Scalar(2));
    _hessian(1, 0) = _tmp175 * _tmp191 - _tmp178 * _tmp192;
    _hessian(2, 0) = _tmp175 * _tmp205 + _tmp178 * _tmp206;
    _hessian(3, 0) = -_tmp175 * _tmp232 + _tmp178 * _tmp233;
    _hessian(4, 0) = _tmp175 * _tmp249 - _tmp178 * _tmp250;
    _hessian(5, 0) = _tmp175 * _tmp264 - _tmp178 * _tmp265;
    _hessian(6, 0) = _tmp175 * _tmp283 - _tmp178 * _tmp284;
    _hessian(7, 0) = _tmp175 * _tmp295 + _tmp178 * _tmp296;
    _hessian(8, 0) = -_tmp175 * _tmp304 - _tmp178 * _tmp305;
    _hessian(9, 0) = _tmp175 * _tmp310 - _tmp178 * _tmp311;
    _hessian(10, 0) = -_tmp175 * _tmp316 - _tmp178 * _tmp317;
    _hessian(11, 0) = _tmp175 * _tmp323 + _tmp178 * _tmp324;
    _hessian(12, 0) = _tmp175 * _tmp334 - _tmp178 * _tmp335;
    _hessian(0, 1) = 0;
    _hessian(1, 1) = std::pow(_tmp191, Scalar(2)) + std::pow(_tmp192, Scalar(2));
    _hessian(2, 1) = _tmp191 * _tmp205 - _tmp192 * _tmp206;
    _hessian(3, 1) = -_tmp191 * _tmp232 - _tmp192 * _tmp233;
    _hessian(4, 1) = _tmp191 * _tmp249 + _tmp192 * _tmp250;
    _hessian(5, 1) = _tmp191 * _tmp264 + _tmp192 * _tmp265;
    _hessian(6, 1) = _tmp191 * _tmp283 + _tmp192 * _tmp284;
    _hessian(7, 1) = _tmp191 * _tmp295 - _tmp192 * _tmp296;
    _hessian(8, 1) = -_tmp191 * _tmp304 + _tmp192 * _tmp305;
    _hessian(9, 1) = _tmp191 * _tmp310 + _tmp192 * _tmp311;
    _hessian(10, 1) = -_tmp191 * _tmp316 + _tmp192 * _tmp317;
    _hessian(11, 1) = _tmp191 * _tmp323 - _tmp192 * _tmp324;
    _hessian(12, 1) = _tmp191 * _tmp334 + _tmp192 * _tmp335;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) = std::pow(_tmp205, Scalar(2)) + std::pow(_tmp206, Scalar(2));
    _hessian(3, 2) = -_tmp205 * _tmp232 + _tmp206 * _tmp233;
    _hessian(4, 2) = _tmp205 * _tmp249 - _tmp206 * _tmp250;
    _hessian(5, 2) = _tmp205 * _tmp264 - _tmp206 * _tmp265;
    _hessian(6, 2) = _tmp205 * _tmp283 - _tmp206 * _tmp284;
    _hessian(7, 2) = _tmp205 * _tmp295 + _tmp206 * _tmp296;
    _hessian(8, 2) = -_tmp205 * _tmp304 - _tmp206 * _tmp305;
    _hessian(9, 2) = _tmp205 * _tmp310 - _tmp206 * _tmp311;
    _hessian(10, 2) = -_tmp205 * _tmp316 - _tmp206 * _tmp317;
    _hessian(11, 2) = _tmp205 * _tmp323 + _tmp206 * _tmp324;
    _hessian(12, 2) = _tmp205 * _tmp334 - _tmp206 * _tmp335;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = std::pow(_tmp232, Scalar(2)) + std::pow(_tmp233, Scalar(2));
    _hessian(4, 3) = -_tmp232 * _tmp249 - _tmp233 * _tmp250;
    _hessian(5, 3) = -_tmp232 * _tmp264 - _tmp233 * _tmp265;
    _hessian(6, 3) = -_tmp232 * _tmp283 - _tmp233 * _tmp284;
    _hessian(7, 3) = -_tmp232 * _tmp295 + _tmp233 * _tmp296;
    _hessian(8, 3) = _tmp232 * _tmp304 - _tmp233 * _tmp305;
    _hessian(9, 3) = -_tmp232 * _tmp310 - _tmp233 * _tmp311;
    _hessian(10, 3) = _tmp232 * _tmp316 - _tmp233 * _tmp317;
    _hessian(11, 3) = -_tmp232 * _tmp323 + _tmp233 * _tmp324;
    _hessian(12, 3) = -_tmp232 * _tmp334 - _tmp233 * _tmp335;
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) = std::pow(_tmp249, Scalar(2)) + std::pow(_tmp250, Scalar(2));
    _hessian(5, 4) = _tmp249 * _tmp264 + _tmp250 * _tmp265;
    _hessian(6, 4) = _tmp249 * _tmp283 + _tmp250 * _tmp284;
    _hessian(7, 4) = _tmp249 * _tmp295 - _tmp250 * _tmp296;
    _hessian(8, 4) = -_tmp249 * _tmp304 + _tmp250 * _tmp305;
    _hessian(9, 4) = _tmp249 * _tmp310 + _tmp250 * _tmp311;
    _hessian(10, 4) = -_tmp249 * _tmp316 + _tmp250 * _tmp317;
    _hessian(11, 4) = _tmp249 * _tmp323 - _tmp250 * _tmp324;
    _hessian(12, 4) = _tmp249 * _tmp334 + _tmp250 * _tmp335;
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) = std::pow(_tmp264, Scalar(2)) + std::pow(_tmp265, Scalar(2));
    _hessian(6, 5) = _tmp264 * _tmp283 + _tmp265 * _tmp284;
    _hessian(7, 5) = _tmp264 * _tmp295 - _tmp265 * _tmp296;
    _hessian(8, 5) = -_tmp264 * _tmp304 + _tmp265 * _tmp305;
    _hessian(9, 5) = _tmp264 * _tmp310 + _tmp265 * _tmp311;
    _hessian(10, 5) = -_tmp264 * _tmp316 + _tmp265 * _tmp317;
    _hessian(11, 5) = _tmp264 * _tmp323 - _tmp265 * _tmp324;
    _hessian(12, 5) = _tmp264 * _tmp334 + _tmp265 * _tmp335;
    _hessian(0, 6) = 0;
    _hessian(1, 6) = 0;
    _hessian(2, 6) = 0;
    _hessian(3, 6) = 0;
    _hessian(4, 6) = 0;
    _hessian(5, 6) = 0;
    _hessian(6, 6) = std::pow(_tmp283, Scalar(2)) + std::pow(_tmp284, Scalar(2));
    _hessian(7, 6) = _tmp283 * _tmp295 - _tmp284 * _tmp296;
    _hessian(8, 6) = -_tmp283 * _tmp304 + _tmp284 * _tmp305;
    _hessian(9, 6) = _tmp283 * _tmp310 + _tmp284 * _tmp311;
    _hessian(10, 6) = -_tmp283 * _tmp316 + _tmp284 * _tmp317;
    _hessian(11, 6) = _tmp283 * _tmp323 - _tmp284 * _tmp324;
    _hessian(12, 6) = _tmp283 * _tmp334 + _tmp284 * _tmp335;
    _hessian(0, 7) = 0;
    _hessian(1, 7) = 0;
    _hessian(2, 7) = 0;
    _hessian(3, 7) = 0;
    _hessian(4, 7) = 0;
    _hessian(5, 7) = 0;
    _hessian(6, 7) = 0;
    _hessian(7, 7) = std::pow(_tmp295, Scalar(2)) + std::pow(_tmp296, Scalar(2));
    _hessian(8, 7) = -_tmp295 * _tmp304 - _tmp296 * _tmp305;
    _hessian(9, 7) = _tmp295 * _tmp310 - _tmp296 * _tmp311;
    _hessian(10, 7) = -_tmp295 * _tmp316 - _tmp296 * _tmp317;
    _hessian(11, 7) = _tmp295 * _tmp323 + _tmp296 * _tmp324;
    _hessian(12, 7) = _tmp295 * _tmp334 - _tmp296 * _tmp335;
    _hessian(0, 8) = 0;
    _hessian(1, 8) = 0;
    _hessian(2, 8) = 0;
    _hessian(3, 8) = 0;
    _hessian(4, 8) = 0;
    _hessian(5, 8) = 0;
    _hessian(6, 8) = 0;
    _hessian(7, 8) = 0;
    _hessian(8, 8) = std::pow(_tmp304, Scalar(2)) + std::pow(_tmp305, Scalar(2));
    _hessian(9, 8) = -_tmp304 * _tmp310 + _tmp305 * _tmp311;
    _hessian(10, 8) = _tmp304 * _tmp316 + _tmp305 * _tmp317;
    _hessian(11, 8) = -_tmp304 * _tmp323 - _tmp305 * _tmp324;
    _hessian(12, 8) = -_tmp304 * _tmp334 + _tmp305 * _tmp335;
    _hessian(0, 9) = 0;
    _hessian(1, 9) = 0;
    _hessian(2, 9) = 0;
    _hessian(3, 9) = 0;
    _hessian(4, 9) = 0;
    _hessian(5, 9) = 0;
    _hessian(6, 9) = 0;
    _hessian(7, 9) = 0;
    _hessian(8, 9) = 0;
    _hessian(9, 9) = std::pow(_tmp310, Scalar(2)) + std::pow(_tmp311, Scalar(2));
    _hessian(10, 9) = -_tmp310 * _tmp316 + _tmp311 * _tmp317;
    _hessian(11, 9) = _tmp310 * _tmp323 - _tmp311 * _tmp324;
    _hessian(12, 9) = _tmp310 * _tmp334 + _tmp311 * _tmp335;
    _hessian(0, 10) = 0;
    _hessian(1, 10) = 0;
    _hessian(2, 10) = 0;
    _hessian(3, 10) = 0;
    _hessian(4, 10) = 0;
    _hessian(5, 10) = 0;
    _hessian(6, 10) = 0;
    _hessian(7, 10) = 0;
    _hessian(8, 10) = 0;
    _hessian(9, 10) = 0;
    _hessian(10, 10) = std::pow(_tmp316, Scalar(2)) + std::pow(_tmp317, Scalar(2));
    _hessian(11, 10) = -_tmp316 * _tmp323 - _tmp317 * _tmp324;
    _hessian(12, 10) = -_tmp316 * _tmp334 + _tmp317 * _tmp335;
    _hessian(0, 11) = 0;
    _hessian(1, 11) = 0;
    _hessian(2, 11) = 0;
    _hessian(3, 11) = 0;
    _hessian(4, 11) = 0;
    _hessian(5, 11) = 0;
    _hessian(6, 11) = 0;
    _hessian(7, 11) = 0;
    _hessian(8, 11) = 0;
    _hessian(9, 11) = 0;
    _hessian(10, 11) = 0;
    _hessian(11, 11) = std::pow(_tmp323, Scalar(2)) + std::pow(_tmp324, Scalar(2));
    _hessian(12, 11) = _tmp323 * _tmp334 - _tmp324 * _tmp335;
    _hessian(0, 12) = 0;
    _hessian(1, 12) = 0;
    _hessian(2, 12) = 0;
    _hessian(3, 12) = 0;
    _hessian(4, 12) = 0;
    _hessian(5, 12) = 0;
    _hessian(6, 12) = 0;
    _hessian(7, 12) = 0;
    _hessian(8, 12) = 0;
    _hessian(9, 12) = 0;
    _hessian(10, 12) = 0;
    _hessian(11, 12) = 0;
    _hessian(12, 12) = std::pow(_tmp334, Scalar(2)) + std::pow(_tmp335, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 13, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp175 * _tmp62 - _tmp178 * _tmp63;
    _rhs(1, 0) = _tmp191 * _tmp62 + _tmp192 * _tmp63;
    _rhs(2, 0) = _tmp205 * _tmp62 - _tmp206 * _tmp63;
    _rhs(3, 0) = -_tmp232 * _tmp62 - _tmp233 * _tmp63;
    _rhs(4, 0) = _tmp249 * _tmp62 + _tmp250 * _tmp63;
    _rhs(5, 0) = _tmp264 * _tmp62 + _tmp265 * _tmp63;
    _rhs(6, 0) = _tmp283 * _tmp62 + _tmp284 * _tmp63;
    _rhs(7, 0) = _tmp295 * _tmp62 - _tmp296 * _tmp63;
    _rhs(8, 0) = -_tmp304 * _tmp62 + _tmp305 * _tmp63;
    _rhs(9, 0) = _tmp310 * _tmp62 + _tmp311 * _tmp63;
    _rhs(10, 0) = -_tmp316 * _tmp62 + _tmp317 * _tmp63;
    _rhs(11, 0) = _tmp323 * _tmp62 - _tmp324 * _tmp63;
    _rhs(12, 0) = _tmp334 * _tmp62 + _tmp335 * _tmp63;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
