// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     backends/cpp/templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>
#include <sym/rot3.h>

namespace sym {

/**
 * Residual that penalizes the difference between a value and prior (desired / measured value).
 *
 * In vector space terms that would be:
 *     prior - value
 *
 * In lie group terms:
 *     to_tangent(compose(inverse(value), prior))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     jacobian: (3x6) jacobian of res wrt arg value (6)
 *     hessian: (6x6) Gauss-Newton hessian for arg value (6)
 *     rhs: (6x1) Gauss-Newton rhs for arg value (6)
 */
template <typename Scalar>
void PriorFactorPose3Rotation(const sym::Pose3<Scalar>& value, const sym::Rot3<Scalar>& prior,
                              const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
                              Eigen::Matrix<Scalar, 3, 1>* const res = nullptr,
                              Eigen::Matrix<Scalar, 3, 6>* const jacobian = nullptr,
                              Eigen::Matrix<Scalar, 6, 6>* const hessian = nullptr,
                              Eigen::Matrix<Scalar, 6, 1>* const rhs = nullptr) {
  // Total ops: 332

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _value = value.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _prior = prior.Data();

  // Intermediate terms (86)
  const Scalar _tmp0 =
      _prior[0] * _value[2] - _prior[1] * _value[3] - _prior[2] * _value[0] + _prior[3] * _value[1];
  const Scalar _tmp1 = _prior[3] * _value[3];
  const Scalar _tmp2 = _prior[1] * _value[1];
  const Scalar _tmp3 = _prior[2] * _value[2];
  const Scalar _tmp4 = _prior[0] * _value[0];
  const Scalar _tmp5 = _tmp1 + _tmp2 + _tmp3 + _tmp4;
  const Scalar _tmp6 = std::min<Scalar>(std::fabs(_tmp5), 1 - epsilon);
  const Scalar _tmp7 = 2 * (2 * std::min<Scalar>(0, (((_tmp5) > 0) - ((_tmp5) < 0))) + 1) *
                       std::acos(_tmp6) / std::sqrt(Scalar(1 - std::pow(_tmp6, Scalar(2))));
  const Scalar _tmp8 = _tmp0 * _tmp7;
  const Scalar _tmp9 = _prior[0] * _value[1];
  const Scalar _tmp10 = _prior[3] * _value[2];
  const Scalar _tmp11 = _prior[1] * _value[0];
  const Scalar _tmp12 = _prior[2] * _value[3];
  const Scalar _tmp13 = _tmp7 * (_tmp10 + _tmp11 - _tmp12 - _tmp9);
  const Scalar _tmp14 = -_prior[0] * _value[3] - _prior[1] * _value[2] + _prior[2] * _value[1] +
                        _prior[3] * _value[0];
  const Scalar _tmp15 = _tmp14 * _tmp7;
  const Scalar _tmp16 =
      _tmp13 * sqrt_info(0, 2) + _tmp15 * sqrt_info(0, 0) + _tmp8 * sqrt_info(0, 1);
  const Scalar _tmp17 =
      _tmp13 * sqrt_info(1, 2) + _tmp15 * sqrt_info(1, 0) + _tmp8 * sqrt_info(1, 1);
  const Scalar _tmp18 =
      _tmp13 * sqrt_info(2, 2) + _tmp15 * sqrt_info(2, 0) + _tmp8 * sqrt_info(2, 1);
  const Scalar _tmp19 = std::pow(_tmp14, Scalar(2));
  const Scalar _tmp20 = _tmp1 + _tmp2 + _tmp3 + _tmp4;
  const Scalar _tmp21 = (((_tmp20) > 0) - ((_tmp20) < 0));
  const Scalar _tmp22 = std::min<Scalar>(0, _tmp21) + Scalar(1) / Scalar(2);
  const Scalar _tmp23 = std::fabs(_tmp20);
  const Scalar _tmp24 = epsilon - 1;
  const Scalar _tmp25 = std::min<Scalar>(_tmp23, -_tmp24);
  const Scalar _tmp26 = std::pow(_tmp25, Scalar(2)) - 1;
  const Scalar _tmp27 = _tmp21 * ((((_tmp23 + _tmp24) > 0) - ((_tmp23 + _tmp24) < 0)) - 1);
  const Scalar _tmp28 = _tmp27 / _tmp26;
  const Scalar _tmp29 = _tmp22 * _tmp28;
  const Scalar _tmp30 = _tmp29 * sqrt_info(0, 0);
  const Scalar _tmp31 = _tmp22 * sqrt_info(0, 2);
  const Scalar _tmp32 = -_tmp10 - _tmp11 + _tmp12 + _tmp9;
  const Scalar _tmp33 = _tmp14 * _tmp32;
  const Scalar _tmp34 = _tmp28 * _tmp33;
  const Scalar _tmp35 = -_tmp26;
  const Scalar _tmp36 = std::acos(_tmp25);
  const Scalar _tmp37 = 2 * _tmp36 / std::sqrt(_tmp35);
  const Scalar _tmp38 = _tmp0 * _tmp37;
  const Scalar _tmp39 = _tmp22 * sqrt_info(0, 0);
  const Scalar _tmp40 = _tmp25 * _tmp27 * _tmp36 / (_tmp35 * std::sqrt(_tmp35));
  const Scalar _tmp41 = _tmp19 * _tmp40;
  const Scalar _tmp42 = _tmp32 * _tmp37;
  const Scalar _tmp43 = _tmp22 * _tmp42;
  const Scalar _tmp44 = _tmp20 * _tmp37;
  const Scalar _tmp45 = _tmp22 * _tmp44;
  const Scalar _tmp46 = _tmp0 * _tmp14;
  const Scalar _tmp47 = _tmp29 * _tmp46;
  const Scalar _tmp48 = _tmp40 * _tmp46;
  const Scalar _tmp49 = _tmp22 * _tmp48;
  const Scalar _tmp50 = _tmp33 * _tmp40;
  const Scalar _tmp51 = _tmp19 * _tmp30 - _tmp31 * _tmp34 - _tmp31 * _tmp38 - _tmp31 * _tmp50 +
                        _tmp39 * _tmp41 - _tmp43 * sqrt_info(0, 1) + _tmp45 * sqrt_info(0, 0) +
                        _tmp47 * sqrt_info(0, 1) + _tmp49 * sqrt_info(0, 1);
  const Scalar _tmp52 = _tmp22 * sqrt_info(1, 0);
  const Scalar _tmp53 = _tmp19 * _tmp28;
  const Scalar _tmp54 = _tmp22 * sqrt_info(1, 2);
  const Scalar _tmp55 = -_tmp34 * _tmp54 - _tmp38 * _tmp54 + _tmp41 * _tmp52 -
                        _tmp43 * sqrt_info(1, 1) + _tmp44 * _tmp52 + _tmp47 * sqrt_info(1, 1) +
                        _tmp49 * sqrt_info(1, 1) - _tmp50 * _tmp54 + _tmp52 * _tmp53;
  const Scalar _tmp56 = _tmp22 * sqrt_info(2, 0);
  const Scalar _tmp57 = _tmp22 * sqrt_info(2, 2);
  const Scalar _tmp58 = _tmp32 * _tmp57;
  const Scalar _tmp59 = _tmp14 * _tmp28;
  const Scalar _tmp60 = _tmp22 * sqrt_info(2, 1);
  const Scalar _tmp61 = _tmp40 * _tmp58;
  const Scalar _tmp62 = -_tmp14 * _tmp61 - _tmp38 * _tmp57 + _tmp41 * _tmp56 -
                        _tmp43 * sqrt_info(2, 1) + _tmp45 * sqrt_info(2, 0) +
                        _tmp47 * sqrt_info(2, 1) + _tmp48 * _tmp60 + _tmp53 * _tmp56 -
                        _tmp58 * _tmp59;
  const Scalar _tmp63 = std::pow(_tmp0, Scalar(2));
  const Scalar _tmp64 = _tmp40 * _tmp63;
  const Scalar _tmp65 = _tmp22 * _tmp64;
  const Scalar _tmp66 = _tmp0 * _tmp28;
  const Scalar _tmp67 = _tmp32 * _tmp66;
  const Scalar _tmp68 = _tmp14 * _tmp37;
  const Scalar _tmp69 = _tmp29 * _tmp63;
  const Scalar _tmp70 = _tmp0 * _tmp32;
  const Scalar _tmp71 = _tmp40 * _tmp70;
  const Scalar _tmp72 = _tmp30 * _tmp46 - _tmp31 * _tmp67 + _tmp31 * _tmp68 - _tmp31 * _tmp71 +
                        _tmp39 * _tmp48 + _tmp43 * sqrt_info(0, 0) + _tmp45 * sqrt_info(0, 1) +
                        _tmp65 * sqrt_info(0, 1) + _tmp69 * sqrt_info(0, 1);
  const Scalar _tmp73 = _tmp32 * _tmp52;
  const Scalar _tmp74 = _tmp14 * _tmp66;
  const Scalar _tmp75 = _tmp37 * _tmp73 + _tmp45 * sqrt_info(1, 1) + _tmp48 * _tmp52 +
                        _tmp52 * _tmp74 - _tmp54 * _tmp67 + _tmp54 * _tmp68 - _tmp54 * _tmp71 +
                        _tmp65 * sqrt_info(1, 1) + _tmp69 * sqrt_info(1, 1);
  const Scalar _tmp76 = -_tmp0 * _tmp61 + _tmp42 * _tmp56 + _tmp45 * sqrt_info(2, 1) +
                        _tmp48 * _tmp56 + _tmp56 * _tmp74 + _tmp57 * _tmp68 - _tmp58 * _tmp66 +
                        _tmp60 * _tmp64 + _tmp69 * sqrt_info(2, 1);
  const Scalar _tmp77 = _tmp29 * _tmp70;
  const Scalar _tmp78 = _tmp22 * _tmp68;
  const Scalar _tmp79 = std::pow(_tmp32, Scalar(2));
  const Scalar _tmp80 = _tmp28 * _tmp79;
  const Scalar _tmp81 = _tmp40 * _tmp79;
  const Scalar _tmp82 = _tmp22 * _tmp71;
  const Scalar _tmp83 = -_tmp30 * _tmp33 + _tmp31 * _tmp44 + _tmp31 * _tmp80 + _tmp31 * _tmp81 +
                        _tmp38 * _tmp39 - _tmp39 * _tmp50 - _tmp77 * sqrt_info(0, 1) -
                        _tmp78 * sqrt_info(0, 1) - _tmp82 * sqrt_info(0, 1);
  const Scalar _tmp84 = -_tmp14 * _tmp40 * _tmp73 + _tmp38 * _tmp52 + _tmp44 * _tmp54 +
                        _tmp54 * _tmp80 + _tmp54 * _tmp81 - _tmp59 * _tmp73 -
                        _tmp77 * sqrt_info(1, 1) - _tmp78 * sqrt_info(1, 1) -
                        _tmp82 * sqrt_info(1, 1);
  const Scalar _tmp85 = -_tmp34 * _tmp56 + _tmp38 * _tmp56 + _tmp45 * sqrt_info(2, 2) -
                        _tmp50 * _tmp56 + _tmp57 * _tmp80 + _tmp57 * _tmp81 - _tmp60 * _tmp68 -
                        _tmp60 * _tmp71 - _tmp77 * sqrt_info(2, 1);

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);

    _res(0, 0) = _tmp16;
    _res(1, 0) = _tmp17;
    _res(2, 0) = _tmp18;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 3, 6>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp51;
    _jacobian(1, 0) = _tmp55;
    _jacobian(2, 0) = _tmp62;
    _jacobian(0, 1) = _tmp72;
    _jacobian(1, 1) = _tmp75;
    _jacobian(2, 1) = _tmp76;
    _jacobian(0, 2) = _tmp83;
    _jacobian(1, 2) = _tmp84;
    _jacobian(2, 2) = _tmp85;
    _jacobian(0, 3) = 0;
    _jacobian(1, 3) = 0;
    _jacobian(2, 3) = 0;
    _jacobian(0, 4) = 0;
    _jacobian(1, 4) = 0;
    _jacobian(2, 4) = 0;
    _jacobian(0, 5) = 0;
    _jacobian(1, 5) = 0;
    _jacobian(2, 5) = 0;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _hessian = (*hessian);

    _hessian.setZero();

    _hessian(0, 0) =
        std::pow(_tmp51, Scalar(2)) + std::pow(_tmp55, Scalar(2)) + std::pow(_tmp62, Scalar(2));
    _hessian(1, 0) = _tmp51 * _tmp72 + _tmp55 * _tmp75 + _tmp62 * _tmp76;
    _hessian(2, 0) = _tmp51 * _tmp83 + _tmp55 * _tmp84 + _tmp62 * _tmp85;
    _hessian(1, 1) =
        std::pow(_tmp72, Scalar(2)) + std::pow(_tmp75, Scalar(2)) + std::pow(_tmp76, Scalar(2));
    _hessian(2, 1) = _tmp72 * _tmp83 + _tmp75 * _tmp84 + _tmp76 * _tmp85;
    _hessian(2, 2) =
        std::pow(_tmp83, Scalar(2)) + std::pow(_tmp84, Scalar(2)) + std::pow(_tmp85, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 6, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp16 * _tmp51 + _tmp17 * _tmp55 + _tmp18 * _tmp62;
    _rhs(1, 0) = _tmp16 * _tmp72 + _tmp17 * _tmp75 + _tmp18 * _tmp76;
    _rhs(2, 0) = _tmp16 * _tmp83 + _tmp17 * _tmp84 + _tmp18 * _tmp85;
    _rhs(3, 0) = 0;
    _rhs(4, 0) = 0;
    _rhs(5, 0) = 0;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
