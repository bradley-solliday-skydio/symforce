// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/rot3.h>

namespace sym {

/**
 * Residual that penalizes the difference between a value and prior (desired / measured value).
 *
 * In vector space terms that would be:
 *     prior - value
 *
 * In lie group terms:
 *     to_tangent(compose(inverse(value), prior))
 *
 * Args:
 *     sqrt_info: Square root information matrix to whiten residual. This can be computed from
 *                a covariance matrix as the cholesky decomposition of the inverse. In the case
 *                of a diagonal it will contain 1/sigma values. Must match the tangent dim.
 *     jacobian: (3x3) jacobian of res wrt arg value (3)
 *     hessian: (3x3) Gauss-Newton hessian for arg value (3)
 *     rhs: (3x1) Gauss-Newton rhs for arg value (3)
 */
template <typename Scalar>
void PriorFactorRot3(const sym::Rot3<Scalar>& value, const sym::Rot3<Scalar>& prior,
                     const Eigen::Matrix<Scalar, 3, 3>& sqrt_info, const Scalar epsilon,
                     Eigen::Matrix<Scalar, 3, 1>* const res = nullptr,
                     Eigen::Matrix<Scalar, 3, 3>* const jacobian = nullptr,
                     Eigen::Matrix<Scalar, 3, 3>* const hessian = nullptr,
                     Eigen::Matrix<Scalar, 3, 1>* const rhs = nullptr) {
  // Total ops: 319

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _value = value.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _prior = prior.Data();

  // Intermediate terms (73)
  const Scalar _tmp0 =
      _prior[0] * _value[2] - _prior[1] * _value[3] - _prior[2] * _value[0] + _prior[3] * _value[1];
  const Scalar _tmp1 = _prior[3] * _value[3];
  const Scalar _tmp2 = _prior[0] * _value[0];
  const Scalar _tmp3 = _prior[2] * _value[2];
  const Scalar _tmp4 = _prior[1] * _value[1];
  const Scalar _tmp5 = _tmp1 + _tmp2 + _tmp3 + _tmp4;
  const Scalar _tmp6 = std::min<Scalar>(std::fabs(_tmp5), 1 - epsilon);
  const Scalar _tmp7 = (2 * std::min<Scalar>(0, (((_tmp5) > 0) - ((_tmp5) < 0))) + 1) *
                       std::acos(_tmp6) / std::sqrt(Scalar(1 - std::pow(_tmp6, Scalar(2))));
  const Scalar _tmp8 = _tmp0 * _tmp7;
  const Scalar _tmp9 = 2 * _tmp8;
  const Scalar _tmp10 = 2 * sqrt_info(0, 0);
  const Scalar _tmp11 = -_prior[0] * _value[3] - _prior[1] * _value[2] + _prior[2] * _value[1] +
                        _prior[3] * _value[0];
  const Scalar _tmp12 = _tmp11 * _tmp7;
  const Scalar _tmp13 = -_prior[0] * _value[1] + _prior[1] * _value[0] - _prior[2] * _value[3] +
                        _prior[3] * _value[2];
  const Scalar _tmp14 = 2 * _tmp13;
  const Scalar _tmp15 = _tmp14 * _tmp7;
  const Scalar _tmp16 = _tmp10 * _tmp12 + _tmp15 * sqrt_info(0, 2) + _tmp9 * sqrt_info(0, 1);
  const Scalar _tmp17 = 2 * sqrt_info(1, 1);
  const Scalar _tmp18 = 2 * _tmp12;
  const Scalar _tmp19 = _tmp15 * sqrt_info(1, 2) + _tmp17 * _tmp8 + _tmp18 * sqrt_info(1, 0);
  const Scalar _tmp20 =
      _tmp15 * sqrt_info(2, 2) + _tmp18 * sqrt_info(2, 0) + _tmp9 * sqrt_info(2, 1);
  const Scalar _tmp21 = _tmp1 + _tmp2 + _tmp3 + _tmp4;
  const Scalar _tmp22 = std::fabs(_tmp21);
  const Scalar _tmp23 = epsilon - 1;
  const Scalar _tmp24 = std::min<Scalar>(_tmp22, -_tmp23);
  const Scalar _tmp25 = std::pow(_tmp24, Scalar(2)) - 1;
  const Scalar _tmp26 = -_tmp25;
  const Scalar _tmp27 = (((_tmp21) > 0) - ((_tmp21) < 0));
  const Scalar _tmp28 = std::min<Scalar>(0, _tmp27) + Scalar(1) / Scalar(2);
  const Scalar _tmp29 = _tmp28 * std::acos(_tmp24);
  const Scalar _tmp30 = _tmp29 / std::sqrt(_tmp26);
  const Scalar _tmp31 = _tmp30 * sqrt_info(0, 1);
  const Scalar _tmp32 = _tmp27 * ((((_tmp22 + _tmp23) > 0) - ((_tmp22 + _tmp23) < 0)) - 1);
  const Scalar _tmp33 = _tmp24 * _tmp29 / (_tmp26 * std::sqrt(_tmp26));
  const Scalar _tmp34 = _tmp32 * _tmp33;
  const Scalar _tmp35 = _tmp0 * _tmp34;
  const Scalar _tmp36 = _tmp11 * _tmp35;
  const Scalar _tmp37 = _tmp28 / _tmp25;
  const Scalar _tmp38 = _tmp32 * _tmp37;
  const Scalar _tmp39 = _tmp11 * _tmp13;
  const Scalar _tmp40 = _tmp38 * _tmp39;
  const Scalar _tmp41 = _tmp34 * _tmp39;
  const Scalar _tmp42 = _tmp0 * _tmp30;
  const Scalar _tmp43 = 2 * _tmp42;
  const Scalar _tmp44 = _tmp21 * _tmp30;
  const Scalar _tmp45 = std::pow(_tmp11, Scalar(2)) * _tmp32;
  const Scalar _tmp46 = _tmp45 * sqrt_info(0, 0);
  const Scalar _tmp47 = _tmp0 * _tmp38;
  const Scalar _tmp48 = _tmp11 * _tmp47;
  const Scalar _tmp49 = _tmp10 * _tmp44 + _tmp14 * _tmp31 + _tmp33 * _tmp46 +
                        _tmp36 * sqrt_info(0, 1) + _tmp37 * _tmp46 + _tmp40 * sqrt_info(0, 2) +
                        _tmp41 * sqrt_info(0, 2) - _tmp43 * sqrt_info(0, 2) +
                        _tmp48 * sqrt_info(0, 1);
  const Scalar _tmp50 = _tmp13 * _tmp30;
  const Scalar _tmp51 = 2 * _tmp44;
  const Scalar _tmp52 = _tmp37 * _tmp45;
  const Scalar _tmp53 = _tmp33 * _tmp45;
  const Scalar _tmp54 = _tmp17 * _tmp50 + _tmp36 * sqrt_info(1, 1) + _tmp40 * sqrt_info(1, 2) +
                        _tmp41 * sqrt_info(1, 2) - _tmp43 * sqrt_info(1, 2) +
                        _tmp48 * sqrt_info(1, 1) + _tmp51 * sqrt_info(1, 0) +
                        _tmp52 * sqrt_info(1, 0) + _tmp53 * sqrt_info(1, 0);
  const Scalar _tmp55 = _tmp14 * _tmp30;
  const Scalar _tmp56 =
      _tmp36 * sqrt_info(2, 1) + _tmp40 * sqrt_info(2, 2) + _tmp41 * sqrt_info(2, 2) -
      _tmp43 * sqrt_info(2, 2) + _tmp48 * sqrt_info(2, 1) + _tmp51 * sqrt_info(2, 0) +
      _tmp52 * sqrt_info(2, 0) + _tmp53 * sqrt_info(2, 0) + _tmp55 * sqrt_info(2, 1);
  const Scalar _tmp57 = _tmp11 * _tmp30;
  const Scalar _tmp58 = 2 * _tmp57;
  const Scalar _tmp59 = _tmp13 * _tmp47;
  const Scalar _tmp60 = std::pow(_tmp0, Scalar(2));
  const Scalar _tmp61 = _tmp34 * _tmp60;
  const Scalar _tmp62 = _tmp38 * _tmp60;
  const Scalar _tmp63 = _tmp13 * _tmp35;
  const Scalar _tmp64 = -_tmp10 * _tmp50 + _tmp36 * sqrt_info(0, 0) + _tmp48 * sqrt_info(0, 0) +
                        _tmp51 * sqrt_info(0, 1) + _tmp58 * sqrt_info(0, 2) +
                        _tmp59 * sqrt_info(0, 2) + _tmp61 * sqrt_info(0, 1) +
                        _tmp62 * sqrt_info(0, 1) + _tmp63 * sqrt_info(0, 2);
  const Scalar _tmp65 = _tmp17 * _tmp44 + _tmp36 * sqrt_info(1, 0) + _tmp48 * sqrt_info(1, 0) -
                        _tmp55 * sqrt_info(1, 0) + _tmp58 * sqrt_info(1, 2) +
                        _tmp59 * sqrt_info(1, 2) + _tmp61 * sqrt_info(1, 1) +
                        _tmp62 * sqrt_info(1, 1) + _tmp63 * sqrt_info(1, 2);
  const Scalar _tmp66 =
      _tmp36 * sqrt_info(2, 0) + _tmp48 * sqrt_info(2, 0) + _tmp51 * sqrt_info(2, 1) -
      _tmp55 * sqrt_info(2, 0) + _tmp58 * sqrt_info(2, 2) + _tmp59 * sqrt_info(2, 2) +
      _tmp61 * sqrt_info(2, 1) + _tmp62 * sqrt_info(2, 1) + _tmp63 * sqrt_info(2, 2);
  const Scalar _tmp67 = std::pow(_tmp13, Scalar(2));
  const Scalar _tmp68 = _tmp34 * _tmp67;
  const Scalar _tmp69 = _tmp38 * _tmp67;
  const Scalar _tmp70 = _tmp10 * _tmp42 - 2 * _tmp11 * _tmp31 + _tmp40 * sqrt_info(0, 0) +
                        _tmp41 * sqrt_info(0, 0) + _tmp51 * sqrt_info(0, 2) +
                        _tmp59 * sqrt_info(0, 1) + _tmp63 * sqrt_info(0, 1) +
                        _tmp68 * sqrt_info(0, 2) + _tmp69 * sqrt_info(0, 2);
  const Scalar _tmp71 = -_tmp17 * _tmp57 + _tmp40 * sqrt_info(1, 0) + _tmp41 * sqrt_info(1, 0) +
                        _tmp43 * sqrt_info(1, 0) + _tmp51 * sqrt_info(1, 2) +
                        _tmp59 * sqrt_info(1, 1) + _tmp63 * sqrt_info(1, 1) +
                        _tmp68 * sqrt_info(1, 2) + _tmp69 * sqrt_info(1, 2);
  const Scalar _tmp72 =
      _tmp40 * sqrt_info(2, 0) + _tmp41 * sqrt_info(2, 0) + _tmp43 * sqrt_info(2, 0) +
      _tmp51 * sqrt_info(2, 2) - _tmp58 * sqrt_info(2, 1) + _tmp59 * sqrt_info(2, 1) +
      _tmp63 * sqrt_info(2, 1) + _tmp68 * sqrt_info(2, 2) + _tmp69 * sqrt_info(2, 2);

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _res = (*res);

    _res(0, 0) = _tmp16;
    _res(1, 0) = _tmp19;
    _res(2, 0) = _tmp20;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 3, 3>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp49;
    _jacobian(1, 0) = _tmp54;
    _jacobian(2, 0) = _tmp56;
    _jacobian(0, 1) = _tmp64;
    _jacobian(1, 1) = _tmp65;
    _jacobian(2, 1) = _tmp66;
    _jacobian(0, 2) = _tmp70;
    _jacobian(1, 2) = _tmp71;
    _jacobian(2, 2) = _tmp72;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 3, 3>& _hessian = (*hessian);

    _hessian(0, 0) =
        std::pow(_tmp49, Scalar(2)) + std::pow(_tmp54, Scalar(2)) + std::pow(_tmp56, Scalar(2));
    _hessian(1, 0) = _tmp49 * _tmp64 + _tmp54 * _tmp65 + _tmp56 * _tmp66;
    _hessian(2, 0) = _tmp49 * _tmp70 + _tmp54 * _tmp71 + _tmp56 * _tmp72;
    _hessian(0, 1) = 0;
    _hessian(1, 1) =
        std::pow(_tmp64, Scalar(2)) + std::pow(_tmp65, Scalar(2)) + std::pow(_tmp66, Scalar(2));
    _hessian(2, 1) = _tmp64 * _tmp70 + _tmp65 * _tmp71 + _tmp66 * _tmp72;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) =
        std::pow(_tmp70, Scalar(2)) + std::pow(_tmp71, Scalar(2)) + std::pow(_tmp72, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 3, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp16 * _tmp49 + _tmp19 * _tmp54 + _tmp20 * _tmp56;
    _rhs(1, 0) = _tmp16 * _tmp64 + _tmp19 * _tmp65 + _tmp20 * _tmp66;
    _rhs(2, 0) = _tmp16 * _tmp70 + _tmp19 * _tmp71 + _tmp20 * _tmp72;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
