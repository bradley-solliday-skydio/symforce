// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     ops/CLASS/group_ops.cc.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#include "./group_ops.h"

#include <sym/rot3.h>

namespace sym {

/**
 *
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: <lambda>
 *
 * Args:
 *
 * Outputs:
 *     res: Rot3
 */
template <typename Scalar>
sym::Rot3<Scalar> GroupOps<Rot3<Scalar>>::Identity() {
  // Total ops: 0

  // Input arrays

  // Intermediate terms (0)

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res[0] = 0;
  _res[1] = 0;
  _res[2] = 0;
  _res[3] = 1;

  return sym::Rot3<Scalar>(_res);
}

/**
 *
 * Inverse of the element a.
 *
 * Returns:
 *     Element: b such that a @ b = identity
 */
template <typename Scalar>
sym::Rot3<Scalar> GroupOps<Rot3<Scalar>>::Inverse(const sym::Rot3<Scalar>& a) {
  // Total ops: 3

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _a = a.Data();

  // Intermediate terms (0)

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res[0] = -_a[0];
  _res[1] = -_a[1];
  _res[2] = -_a[2];
  _res[3] = _a[3];

  return sym::Rot3<Scalar>(_res);
}

/**
 *
 * Composition of two elements in the group.
 *
 * Returns:
 *     Element: a @ b
 */
template <typename Scalar>
sym::Rot3<Scalar> GroupOps<Rot3<Scalar>>::Compose(const sym::Rot3<Scalar>& a,
                                                  const sym::Rot3<Scalar>& b) {
  // Total ops: 28

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _b = b.Data();

  // Intermediate terms (0)

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res[0] = _a[0] * _b[3] + _a[1] * _b[2] - _a[2] * _b[1] + _a[3] * _b[0];
  _res[1] = -_a[0] * _b[2] + _a[1] * _b[3] + _a[2] * _b[0] + _a[3] * _b[1];
  _res[2] = _a[0] * _b[1] - _a[1] * _b[0] + _a[2] * _b[3] + _a[3] * _b[2];
  _res[3] = -_a[0] * _b[0] - _a[1] * _b[1] - _a[2] * _b[2] + _a[3] * _b[3];

  return sym::Rot3<Scalar>(_res);
}

/**
 *
 * Returns the element that when composed with a produces b. For vector spaces it is b - a.
 *
 * Implementation is simply `compose(inverse(a), b)`.
 *
 * Returns:
 *     Element: c such that a @ c = b
 */
template <typename Scalar>
sym::Rot3<Scalar> GroupOps<Rot3<Scalar>>::Between(const sym::Rot3<Scalar>& a,
                                                  const sym::Rot3<Scalar>& b) {
  // Total ops: 28

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _b = b.Data();

  // Intermediate terms (0)

  // Output terms (1)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res[0] = -_a[0] * _b[3] - _a[1] * _b[2] + _a[2] * _b[1] + _a[3] * _b[0];
  _res[1] = _a[0] * _b[2] - _a[1] * _b[3] - _a[2] * _b[0] + _a[3] * _b[1];
  _res[2] = -_a[0] * _b[1] + _a[1] * _b[0] - _a[2] * _b[3] + _a[3] * _b[2];
  _res[3] = _a[0] * _b[0] + _a[1] * _b[1] + _a[2] * _b[2] + _a[3] * _b[3];

  return sym::Rot3<Scalar>(_res);
}

/**
 *
 * Inverse of the element a.
 *
 * Returns:
 *     Element: b such that a @ b = identity
 *     res_D_a: (3x3) jacobian of res (3) wrt arg a (3)
 */
template <typename Scalar>
sym::Rot3<Scalar> GroupOps<Rot3<Scalar>>::InverseWithJacobian(const sym::Rot3<Scalar>& a,
                                                              SelfJacobian* const res_D_a) {
  // Total ops: 45

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _a = a.Data();

  // Intermediate terms (13)
  const Scalar _tmp0 = std::pow(_a[0], Scalar(2));
  const Scalar _tmp1 = -_tmp0;
  const Scalar _tmp2 = std::pow(_a[1], Scalar(2));
  const Scalar _tmp3 = std::pow(_a[2], Scalar(2));
  const Scalar _tmp4 = std::pow(_a[3], Scalar(2));
  const Scalar _tmp5 = _tmp3 - _tmp4;
  const Scalar _tmp6 = _a[2] * _a[3];
  const Scalar _tmp7 = _a[0] * _a[1];
  const Scalar _tmp8 = _a[1] * _a[3];
  const Scalar _tmp9 = _a[0] * _a[2];
  const Scalar _tmp10 = -_tmp2;
  const Scalar _tmp11 = _a[0] * _a[3];
  const Scalar _tmp12 = _a[1] * _a[2];

  // Output terms (2)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res[0] = -_a[0];
  _res[1] = -_a[1];
  _res[2] = -_a[2];
  _res[3] = _a[3];

  if (res_D_a != nullptr) {
    Eigen::Matrix<Scalar, 3, 3>& _res_D_a = (*res_D_a);

    _res_D_a(0, 0) = _tmp1 + _tmp2 + _tmp5;
    _res_D_a(1, 0) = -2 * _tmp6 - 2 * _tmp7;
    _res_D_a(2, 0) = 2 * _tmp8 - 2 * _tmp9;
    _res_D_a(0, 1) = 2 * _tmp6 - 2 * _tmp7;
    _res_D_a(1, 1) = _tmp0 + _tmp10 + _tmp5;
    _res_D_a(2, 1) = -2 * _tmp11 - 2 * _tmp12;
    _res_D_a(0, 2) = -2 * _tmp8 - 2 * _tmp9;
    _res_D_a(1, 2) = 2 * _tmp11 - 2 * _tmp12;
    _res_D_a(2, 2) = -_tmp1 - _tmp10 - _tmp3 - _tmp4;
  }

  return sym::Rot3<Scalar>(_res);
}

/**
 *
 * Composition of two elements in the group.
 *
 * Returns:
 *     Element: a @ b
 *     res_D_a: (3x3) jacobian of res (3) wrt arg a (3)
 *     res_D_b: (3x3) jacobian of res (3) wrt arg b (3)
 */
template <typename Scalar>
sym::Rot3<Scalar> GroupOps<Rot3<Scalar>>::ComposeWithJacobians(const sym::Rot3<Scalar>& a,
                                                               const sym::Rot3<Scalar>& b,
                                                               SelfJacobian* const res_D_a,
                                                               SelfJacobian* const res_D_b) {
  // Total ops: 148

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _b = b.Data();

  // Intermediate terms (54)
  const Scalar _tmp0 = _a[0] * _b[3];
  const Scalar _tmp1 = _a[2] * _b[1];
  const Scalar _tmp2 = -_tmp1;
  const Scalar _tmp3 = _a[3] * _b[0];
  const Scalar _tmp4 = _a[1] * _b[2];
  const Scalar _tmp5 = _tmp3 + _tmp4;
  const Scalar _tmp6 = _tmp0 + _tmp2 + _tmp5;
  const Scalar _tmp7 = _a[2] * _b[0];
  const Scalar _tmp8 = _a[1] * _b[3];
  const Scalar _tmp9 = _a[3] * _b[1];
  const Scalar _tmp10 = _a[0] * _b[2];
  const Scalar _tmp11 = -_tmp10 + _tmp9;
  const Scalar _tmp12 = _tmp11 + _tmp7 + _tmp8;
  const Scalar _tmp13 = _a[2] * _b[3];
  const Scalar _tmp14 = _a[1] * _b[0];
  const Scalar _tmp15 = -_tmp14;
  const Scalar _tmp16 = _a[3] * _b[2];
  const Scalar _tmp17 = _a[0] * _b[1];
  const Scalar _tmp18 = _tmp16 + _tmp17;
  const Scalar _tmp19 = _tmp13 + _tmp15 + _tmp18;
  const Scalar _tmp20 = _a[3] * _b[3];
  const Scalar _tmp21 = _a[0] * _b[0];
  const Scalar _tmp22 = _a[2] * _b[2];
  const Scalar _tmp23 = _a[1] * _b[1];
  const Scalar _tmp24 = _tmp22 + _tmp23;
  const Scalar _tmp25 = _tmp20 - _tmp21 - _tmp24;
  const Scalar _tmp26 = -_tmp13;
  const Scalar _tmp27 = _tmp14 + _tmp18 + _tmp26;
  const Scalar _tmp28 = _tmp3 - _tmp4;
  const Scalar _tmp29 = _tmp0 + _tmp1 + _tmp28;
  const Scalar _tmp30 = -_tmp7;
  const Scalar _tmp31 = -_tmp8;
  const Scalar _tmp32 = _tmp11 + _tmp30 + _tmp31;
  const Scalar _tmp33 = _tmp20 - _tmp21;
  const Scalar _tmp34 = _tmp24 + _tmp33;
  const Scalar _tmp35 = -_tmp23;
  const Scalar _tmp36 = _tmp20 + _tmp21;
  const Scalar _tmp37 = _tmp22 + _tmp35 + _tmp36;
  const Scalar _tmp38 = _tmp10 + _tmp9;
  const Scalar _tmp39 = _tmp30 + _tmp38 + _tmp8;
  const Scalar _tmp40 = -_tmp0;
  const Scalar _tmp41 = _tmp1 + _tmp40 + _tmp5;
  const Scalar _tmp42 = _tmp16 - _tmp17;
  const Scalar _tmp43 = _tmp15 + _tmp26 + _tmp42;
  const Scalar _tmp44 = _tmp2 + _tmp28 + _tmp40;
  const Scalar _tmp45 = _tmp13 + _tmp14 + _tmp42;
  const Scalar _tmp46 = -_tmp22;
  const Scalar _tmp47 = _tmp23 + _tmp36 + _tmp46;
  const Scalar _tmp48 = _tmp31 + _tmp38 + _tmp7;
  const Scalar _tmp49 = _tmp33 + _tmp35 + _tmp46;
  const Scalar _tmp50 = std::pow(_tmp12, Scalar(2)) + std::pow(_tmp19, Scalar(2)) +
                        _tmp25 * _tmp49 + std::pow(_tmp6, Scalar(2));
  const Scalar _tmp51 = -_tmp19 * _tmp25 + _tmp19 * _tmp49;
  const Scalar _tmp52 = -_tmp12 * _tmp25 + _tmp12 * _tmp49;
  const Scalar _tmp53 = -_tmp25 * _tmp6 + _tmp49 * _tmp6;

  // Output terms (3)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res[0] = _tmp6;
  _res[1] = _tmp12;
  _res[2] = _tmp19;
  _res[3] = _tmp25;

  if (res_D_a != nullptr) {
    Eigen::Matrix<Scalar, 3, 3>& _res_D_a = (*res_D_a);

    _res_D_a(0, 0) = -_tmp12 * _tmp32 - _tmp19 * _tmp27 + _tmp25 * _tmp34 + _tmp29 * _tmp6;
    _res_D_a(1, 0) = _tmp12 * _tmp29 - _tmp19 * _tmp34 - _tmp25 * _tmp27 + _tmp32 * _tmp6;
    _res_D_a(2, 0) = _tmp12 * _tmp34 + _tmp19 * _tmp29 + _tmp25 * _tmp32 + _tmp27 * _tmp6;
    _res_D_a(0, 1) = _tmp12 * _tmp41 + _tmp19 * _tmp37 + _tmp25 * _tmp43 + _tmp39 * _tmp6;
    _res_D_a(1, 1) = _tmp12 * _tmp39 - _tmp19 * _tmp43 + _tmp25 * _tmp37 - _tmp41 * _tmp6;
    _res_D_a(2, 1) = _tmp12 * _tmp43 + _tmp19 * _tmp39 - _tmp25 * _tmp41 - _tmp37 * _tmp6;
    _res_D_a(0, 2) = -_tmp12 * _tmp47 + _tmp19 * _tmp44 - _tmp25 * _tmp48 + _tmp45 * _tmp6;
    _res_D_a(1, 2) = _tmp12 * _tmp45 + _tmp19 * _tmp48 + _tmp25 * _tmp44 + _tmp47 * _tmp6;
    _res_D_a(2, 2) = -_tmp12 * _tmp48 + _tmp19 * _tmp45 + _tmp25 * _tmp47 - _tmp44 * _tmp6;
  }

  if (res_D_b != nullptr) {
    Eigen::Matrix<Scalar, 3, 3>& _res_D_b = (*res_D_b);

    _res_D_b(0, 0) = _tmp50;
    _res_D_b(1, 0) = -_tmp51;
    _res_D_b(2, 0) = _tmp52;
    _res_D_b(0, 1) = _tmp51;
    _res_D_b(1, 1) = _tmp50;
    _res_D_b(2, 1) = -_tmp53;
    _res_D_b(0, 2) = -_tmp52;
    _res_D_b(1, 2) = _tmp53;
    _res_D_b(2, 2) = _tmp50;
  }

  return sym::Rot3<Scalar>(_res);
}

/**
 *
 * Returns the element that when composed with a produces b. For vector spaces it is b - a.
 *
 * Implementation is simply `compose(inverse(a), b)`.
 *
 * Returns:
 *     Element: c such that a @ c = b
 *     res_D_a: (3x3) jacobian of res (3) wrt arg a (3)
 *     res_D_b: (3x3) jacobian of res (3) wrt arg b (3)
 */
template <typename Scalar>
sym::Rot3<Scalar> GroupOps<Rot3<Scalar>>::BetweenWithJacobians(const sym::Rot3<Scalar>& a,
                                                               const sym::Rot3<Scalar>& b,
                                                               SelfJacobian* const res_D_a,
                                                               SelfJacobian* const res_D_b) {
  // Total ops: 77

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _b = b.Data();

  // Intermediate terms (23)
  const Scalar _tmp0 = -_a[0] * _b[3] - _a[1] * _b[2] + _a[2] * _b[1] + _a[3] * _b[0];
  const Scalar _tmp1 = _a[0] * _b[2] - _a[1] * _b[3] - _a[2] * _b[0] + _a[3] * _b[1];
  const Scalar _tmp2 = -_a[0] * _b[1] + _a[1] * _b[0] - _a[2] * _b[3] + _a[3] * _b[2];
  const Scalar _tmp3 = _a[3] * _b[3];
  const Scalar _tmp4 = _a[2] * _b[2];
  const Scalar _tmp5 = _a[0] * _b[0];
  const Scalar _tmp6 = _a[1] * _b[1];
  const Scalar _tmp7 = std::pow(_tmp1, Scalar(2));
  const Scalar _tmp8 = -_tmp7;
  const Scalar _tmp9 = std::pow(_tmp0, Scalar(2));
  const Scalar _tmp10 = _tmp3 + _tmp4 + _tmp5 + _tmp6;
  const Scalar _tmp11 = std::pow(_tmp10, Scalar(2));
  const Scalar _tmp12 = std::pow(_tmp2, Scalar(2));
  const Scalar _tmp13 = _tmp11 - _tmp12;
  const Scalar _tmp14 = _tmp10 * _tmp2;
  const Scalar _tmp15 = _tmp0 * _tmp1;
  const Scalar _tmp16 = _tmp0 * _tmp2;
  const Scalar _tmp17 = _tmp1 * _tmp10;
  const Scalar _tmp18 = -_tmp9;
  const Scalar _tmp19 = _tmp0 * _tmp10;
  const Scalar _tmp20 = _tmp1 * _tmp2;
  const Scalar _tmp21 = _tmp11 + _tmp12;
  const Scalar _tmp22 = _tmp21 + _tmp7 + _tmp9;

  // Output terms (3)
  Eigen::Matrix<Scalar, 4, 1> _res;

  _res[0] = _tmp0;
  _res[1] = _tmp1;
  _res[2] = _tmp2;
  _res[3] = _tmp3 + _tmp4 + _tmp5 + _tmp6;

  if (res_D_a != nullptr) {
    Eigen::Matrix<Scalar, 3, 3>& _res_D_a = (*res_D_a);

    _res_D_a(0, 0) = -_tmp13 - _tmp8 - _tmp9;
    _res_D_a(1, 0) = 2 * _tmp14 - 2 * _tmp15;
    _res_D_a(2, 0) = -2 * _tmp16 - 2 * _tmp17;
    _res_D_a(0, 1) = -2 * _tmp14 - 2 * _tmp15;
    _res_D_a(1, 1) = -_tmp13 - _tmp18 - _tmp7;
    _res_D_a(2, 1) = 2 * _tmp19 - 2 * _tmp20;
    _res_D_a(0, 2) = -2 * _tmp16 + 2 * _tmp17;
    _res_D_a(1, 2) = -2 * _tmp19 - 2 * _tmp20;
    _res_D_a(2, 2) = -_tmp18 - _tmp21 - _tmp8;
  }

  if (res_D_b != nullptr) {
    Eigen::Matrix<Scalar, 3, 3>& _res_D_b = (*res_D_b);

    _res_D_b.setZero();

    _res_D_b(0, 0) = _tmp22;
    _res_D_b(1, 1) = _tmp22;
    _res_D_b(2, 2) = _tmp22;
  }

  return sym::Rot3<Scalar>(_res);
}

}  // namespace sym

// Explicit instantiation
template struct sym::GroupOps<sym::Rot3<double>>;
template struct sym::GroupOps<sym::Rot3<float>>;
