# -----------------------------------------------------------------------------
# This file was autogenerated by symforce from template:
#     function/FUNCTION.py.jinja
# Do NOT modify by hand.
# -----------------------------------------------------------------------------

# pylint: disable=too-many-locals,too-many-lines,too-many-statements,unused-argument,unused-import

import math
import typing as T

import numpy

import sym


def internal_imu_factor(
    rot_i,
    vel_i,
    pos_i,
    rot_j,
    vel_j,
    pos_j,
    gyro_bias_j,
    accel_bias_j,
    DR,
    Dv,
    Dp,
    sqrt_info,
    DR_D_gyro_bias,
    Dp_D_accel_bias,
    Dp_D_gyro_bias,
    Dv_D_accel_bias,
    Dv_D_gyro_bias,
    accel_bias_hat,
    gyro_bias_hat,
    gravity,
    dt,
    epsilon,
):
    # type: (sym.Rot3, numpy.ndarray, numpy.ndarray, sym.Rot3, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, sym.Rot3, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, float, float) -> T.Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray]
    """
    An internal helper function to calculate a sort of between factor from the orientation,
    velocity, and position at one time step and at another time step given, where the expected
    difference is calculated from the preintegrated IMU measurements between those time steps

    NOTE: If you are looking for a residual for an IMU factor, do not use this. Instead use
    the one found in symforce/slam/imu_preintegration/imu_factor.h.

    Args:
        rot_i (sf.Rot3): Orientation at time step i
        vel_i (sf.V3): Velocity at time step i
        pos_i (sf.V3): Position at time step i
        rot_j (sf.Rot3): Orientation at time step j
        vel_j (sf.V3): Velocity at time step j
        pos_j (sf.V3): Position at time step j
        gyro_bias_j (sf.V3): The bias of the gyroscope measurements between timesteps i and j
        accel_bias_j (sf.V3): The bias of the accelerometer measurements between timesteps i and j
        DR (sf.Rot3): Preintegrated estimate for rot_i.inverse() * rot_j
        Dv (sf.V3): Preintegrated estimate for vel_j - vel_i in the body frame at timestep i
        Dp (sf.V3): Preintegrated estimate for pos change (before velocity and gravity corrections)
            in the body frame at timestep i: R_i^T (p_j - p_i - v_i \Delta t - 1/2 g \Delta t^2)
        sqrt_info (sf.M99): sqrt info matrix of DR('s tangent space), Dv, Dp
        DR_D_gyro_bias (sf.M33): Derivative of DR w.r.t. gyro_bias evaluated at gyro_bias_hat
        Dp_D_accel_bias (sf.M33): Derivative of Dp w.r.t. accel_bias evaluated at accel_bias_hat
        Dp_D_gyro_bias (sf.M33): Derivative of Dp w.r.t. gyro_bias evaluated at gyro_bias_hat
        Dv_D_accel_bias (sf.M33): Derivative of Dv w.r.t. accel_bias evaluated at accel_bias_hat
        Dv_D_gyro_bias (sf.M33): Derivative of Dv w.r.t. gyro_bias evaluated at gyro_bias_hat
        accel_bias_hat (sf.V3): The bias of the accelerometer measurements used during pre-integration
        gyro_bias_hat (sf.V3): The bias of the gyroscope measurements used during pre-integration
        gravity (sf.V3): gravity (in the same frame as rot_x, vel_x, and pos_x)
        dt (T.Scalar): The time between timestep i and j: t_j - t_i
        epsilon (T.Scalar): epsilon used for numerical stability
        jacobian: (9x24) jacobian of res wrt args rot_i (3), vel_i (3), pos_i (3), rot_j (3), vel_j (3),
                  pos_j (3), gyro_bias_j (3), accel_bias_j (3)
        hessian: (24x24) Gauss-Newton hessian for args rot_i (3), vel_i (3), pos_i (3), rot_j (3), vel_j
                 (3), pos_j (3), gyro_bias_j (3), accel_bias_j (3)
        rhs: (24x1) Gauss-Newton rhs for args rot_i (3), vel_i (3), pos_i (3), rot_j (3), vel_j (3),
             pos_j (3), gyro_bias_j (3), accel_bias_j (3)
    """

    # Total ops: 9642

    # Input arrays
    _rot_i = rot_i.data
    if vel_i.shape == (3,):
        vel_i = vel_i.reshape((3, 1))
    elif vel_i.shape != (3, 1):
        raise IndexError(
            "vel_i is expected to have shape (3, 1) or (3,); instead had shape {}".format(
                vel_i.shape
            )
        )

    if pos_i.shape == (3,):
        pos_i = pos_i.reshape((3, 1))
    elif pos_i.shape != (3, 1):
        raise IndexError(
            "pos_i is expected to have shape (3, 1) or (3,); instead had shape {}".format(
                pos_i.shape
            )
        )

    _rot_j = rot_j.data
    if vel_j.shape == (3,):
        vel_j = vel_j.reshape((3, 1))
    elif vel_j.shape != (3, 1):
        raise IndexError(
            "vel_j is expected to have shape (3, 1) or (3,); instead had shape {}".format(
                vel_j.shape
            )
        )

    if pos_j.shape == (3,):
        pos_j = pos_j.reshape((3, 1))
    elif pos_j.shape != (3, 1):
        raise IndexError(
            "pos_j is expected to have shape (3, 1) or (3,); instead had shape {}".format(
                pos_j.shape
            )
        )

    if gyro_bias_j.shape == (3,):
        gyro_bias_j = gyro_bias_j.reshape((3, 1))
    elif gyro_bias_j.shape != (3, 1):
        raise IndexError(
            "gyro_bias_j is expected to have shape (3, 1) or (3,); instead had shape {}".format(
                gyro_bias_j.shape
            )
        )

    if accel_bias_j.shape == (3,):
        accel_bias_j = accel_bias_j.reshape((3, 1))
    elif accel_bias_j.shape != (3, 1):
        raise IndexError(
            "accel_bias_j is expected to have shape (3, 1) or (3,); instead had shape {}".format(
                accel_bias_j.shape
            )
        )

    _DR = DR.data
    if Dv.shape == (3,):
        Dv = Dv.reshape((3, 1))
    elif Dv.shape != (3, 1):
        raise IndexError(
            "Dv is expected to have shape (3, 1) or (3,); instead had shape {}".format(Dv.shape)
        )

    if Dp.shape == (3,):
        Dp = Dp.reshape((3, 1))
    elif Dp.shape != (3, 1):
        raise IndexError(
            "Dp is expected to have shape (3, 1) or (3,); instead had shape {}".format(Dp.shape)
        )

    if accel_bias_hat.shape == (3,):
        accel_bias_hat = accel_bias_hat.reshape((3, 1))
    elif accel_bias_hat.shape != (3, 1):
        raise IndexError(
            "accel_bias_hat is expected to have shape (3, 1) or (3,); instead had shape {}".format(
                accel_bias_hat.shape
            )
        )

    if gyro_bias_hat.shape == (3,):
        gyro_bias_hat = gyro_bias_hat.reshape((3, 1))
    elif gyro_bias_hat.shape != (3, 1):
        raise IndexError(
            "gyro_bias_hat is expected to have shape (3, 1) or (3,); instead had shape {}".format(
                gyro_bias_hat.shape
            )
        )

    if gravity.shape == (3,):
        gravity = gravity.reshape((3, 1))
    elif gravity.shape != (3, 1):
        raise IndexError(
            "gravity is expected to have shape (3, 1) or (3,); instead had shape {}".format(
                gravity.shape
            )
        )

    # Intermediate terms (814)
    _tmp0 = -gyro_bias_hat[0, 0] + gyro_bias_j[0, 0]
    _tmp1 = -gyro_bias_hat[1, 0] + gyro_bias_j[1, 0]
    _tmp2 = -gyro_bias_hat[2, 0] + gyro_bias_j[2, 0]
    _tmp3 = (
        DR_D_gyro_bias[0, 0] * _tmp0 + DR_D_gyro_bias[0, 1] * _tmp1 + DR_D_gyro_bias[0, 2] * _tmp2
    )
    _tmp4 = (
        DR_D_gyro_bias[1, 0] * _tmp0 + DR_D_gyro_bias[1, 1] * _tmp1 + DR_D_gyro_bias[1, 2] * _tmp2
    )
    _tmp5 = (
        DR_D_gyro_bias[2, 0] * _tmp0 + DR_D_gyro_bias[2, 1] * _tmp1 + DR_D_gyro_bias[2, 2] * _tmp2
    )
    _tmp6 = _tmp3 ** 2 + _tmp4 ** 2 + _tmp5 ** 2 + epsilon ** 2
    _tmp7 = math.sqrt(_tmp6)
    _tmp8 = (1.0 / 2.0) * _tmp7
    _tmp9 = math.cos(_tmp8)
    _tmp10 = _DR[1] * _tmp9
    _tmp11 = math.sin(_tmp8)
    _tmp12 = _tmp11 / _tmp7
    _tmp13 = _tmp12 * _tmp3
    _tmp14 = _DR[0] * _tmp12
    _tmp15 = _DR[3] * _tmp12
    _tmp16 = _DR[2] * _tmp13 + _tmp10 - _tmp14 * _tmp5 + _tmp15 * _tmp4
    _tmp17 = _rot_i[0] * _tmp16
    _tmp18 = _DR[0] * _tmp9
    _tmp19 = _DR[2] * _tmp12
    _tmp20 = _DR[1] * _tmp12
    _tmp21 = _DR[3] * _tmp13 + _tmp18 - _tmp19 * _tmp4 + _tmp20 * _tmp5
    _tmp22 = _rot_i[1] * _tmp21
    _tmp23 = _DR[2] * _tmp9
    _tmp24 = -_DR[1] * _tmp13 + _tmp14 * _tmp4 + _tmp15 * _tmp5 + _tmp23
    _tmp25 = _rot_i[3] * _tmp24
    _tmp26 = _DR[3] * _tmp9
    _tmp27 = -_DR[0] * _tmp13 - _tmp19 * _tmp5 - _tmp20 * _tmp4 + _tmp26
    _tmp28 = _rot_i[2] * _tmp27
    _tmp29 = -_tmp17 + _tmp22 - _tmp25 - _tmp28
    _tmp30 = _rot_j[0] * _tmp29
    _tmp31 = _rot_i[3] * _tmp16
    _tmp32 = _rot_i[2] * _tmp21
    _tmp33 = _rot_i[0] * _tmp24
    _tmp34 = _rot_i[1] * _tmp27
    _tmp35 = -_tmp31 - _tmp32 + _tmp33 - _tmp34
    _tmp36 = _rot_j[3] * _tmp35
    _tmp37 = _rot_i[2] * _tmp16
    _tmp38 = _rot_i[3] * _tmp21
    _tmp39 = _rot_i[1] * _tmp24
    _tmp40 = _rot_i[0] * _tmp27
    _tmp41 = _tmp37 - _tmp38 - _tmp39 - _tmp40
    _tmp42 = _rot_j[2] * _tmp41
    _tmp43 = _rot_i[1] * _tmp16
    _tmp44 = _rot_i[0] * _tmp21
    _tmp45 = _rot_i[2] * _tmp24
    _tmp46 = _rot_i[3] * _tmp27
    _tmp47 = -_tmp43 - _tmp44 - _tmp45 + _tmp46
    _tmp48 = _rot_j[1] * _tmp47
    _tmp49 = _tmp30 + _tmp36 - _tmp42 + _tmp48
    _tmp50 = _rot_j[2] * _tmp29
    _tmp51 = _rot_j[1] * _tmp35
    _tmp52 = _rot_j[0] * _tmp41
    _tmp53 = _tmp50 + _tmp51 + _tmp52
    _tmp54 = _rot_j[3] * _tmp47
    _tmp55 = 2 * min(0, (0.0 if -_tmp53 + _tmp54 == 0 else math.copysign(1, -_tmp53 + _tmp54))) + 1
    _tmp56 = 2 * _tmp55
    _tmp57 = -_tmp54
    _tmp58 = 1 - epsilon
    _tmp59 = min(_tmp58, abs(_tmp53 + _tmp57))
    _tmp60 = math.acos(_tmp59) / math.sqrt(1 - _tmp59 ** 2)
    _tmp61 = _tmp56 * _tmp60
    _tmp62 = _tmp49 * _tmp61
    _tmp63 = -accel_bias_hat[0, 0] + accel_bias_j[0, 0]
    _tmp64 = -accel_bias_hat[2, 0] + accel_bias_j[2, 0]
    _tmp65 = -accel_bias_hat[1, 0] + accel_bias_j[1, 0]
    _tmp66 = _rot_i[0] ** 2
    _tmp67 = -2 * _tmp66
    _tmp68 = _rot_i[2] ** 2
    _tmp69 = 1 - 2 * _tmp68
    _tmp70 = _tmp67 + _tmp69
    _tmp71 = (1.0 / 2.0) * dt ** 2
    _tmp72 = -_tmp71 * gravity[1, 0] - dt * vel_i[1, 0] - pos_i[1, 0] + pos_j[1, 0]
    _tmp73 = 2 * _rot_i[2]
    _tmp74 = _rot_i[3] * _tmp73
    _tmp75 = -_tmp74
    _tmp76 = 2 * _rot_i[0] * _rot_i[1]
    _tmp77 = _tmp75 + _tmp76
    _tmp78 = -_tmp71 * gravity[0, 0] - dt * vel_i[0, 0] - pos_i[0, 0] + pos_j[0, 0]
    _tmp79 = 2 * _rot_i[3]
    _tmp80 = _rot_i[0] * _tmp79
    _tmp81 = _rot_i[1] * _tmp73
    _tmp82 = _tmp80 + _tmp81
    _tmp83 = -_tmp71 * gravity[2, 0] - dt * vel_i[2, 0] - pos_i[2, 0] + pos_j[2, 0]
    _tmp84 = _tmp77 * _tmp78 + _tmp82 * _tmp83
    _tmp85 = (
        -Dp[1, 0]
        - Dp_D_accel_bias[1, 0] * _tmp63
        - Dp_D_accel_bias[1, 1] * _tmp65
        - Dp_D_accel_bias[1, 2] * _tmp64
        - Dp_D_gyro_bias[1, 0] * _tmp0
        - Dp_D_gyro_bias[1, 1] * _tmp1
        - Dp_D_gyro_bias[1, 2] * _tmp2
        + _tmp70 * _tmp72
        + _tmp84
    )
    _tmp86 = _rot_i[1] ** 2
    _tmp87 = -2 * _tmp86
    _tmp88 = _tmp69 + _tmp87
    _tmp89 = -dt * gravity[0, 0] - vel_i[0, 0] + vel_j[0, 0]
    _tmp90 = _tmp74 + _tmp76
    _tmp91 = -dt * gravity[1, 0] - vel_i[1, 0] + vel_j[1, 0]
    _tmp92 = _rot_i[1] * _tmp79
    _tmp93 = -_tmp92
    _tmp94 = _rot_i[0] * _tmp73
    _tmp95 = _tmp93 + _tmp94
    _tmp96 = -dt * gravity[2, 0] - vel_i[2, 0] + vel_j[2, 0]
    _tmp97 = _tmp90 * _tmp91 + _tmp95 * _tmp96
    _tmp98 = (
        -Dv[0, 0]
        - Dv_D_accel_bias[0, 0] * _tmp63
        - Dv_D_accel_bias[0, 1] * _tmp65
        - Dv_D_accel_bias[0, 2] * _tmp64
        - Dv_D_gyro_bias[0, 0] * _tmp0
        - Dv_D_gyro_bias[0, 1] * _tmp1
        - Dv_D_gyro_bias[0, 2] * _tmp2
        + _tmp88 * _tmp89
        + _tmp97
    )
    _tmp99 = _tmp67 + _tmp87 + 1
    _tmp100 = _tmp92 + _tmp94
    _tmp101 = -_tmp80
    _tmp102 = _tmp101 + _tmp81
    _tmp103 = _tmp100 * _tmp78 + _tmp102 * _tmp72
    _tmp104 = (
        -Dp[2, 0]
        - Dp_D_accel_bias[2, 0] * _tmp63
        - Dp_D_accel_bias[2, 1] * _tmp65
        - Dp_D_accel_bias[2, 2] * _tmp64
        - Dp_D_gyro_bias[2, 0] * _tmp0
        - Dp_D_gyro_bias[2, 1] * _tmp1
        - Dp_D_gyro_bias[2, 2] * _tmp2
        + _tmp103
        + _tmp83 * _tmp99
    )
    _tmp105 = _rot_j[1] * _tmp29
    _tmp106 = _rot_j[2] * _tmp35
    _tmp107 = _rot_j[3] * _tmp41
    _tmp108 = _rot_j[0] * _tmp47
    _tmp109 = -_tmp105 + _tmp106 + _tmp107 + _tmp108
    _tmp110 = _tmp109 * _tmp61
    _tmp111 = _tmp77 * _tmp89 + _tmp82 * _tmp96
    _tmp112 = (
        -Dv[1, 0]
        - Dv_D_accel_bias[1, 0] * _tmp63
        - Dv_D_accel_bias[1, 1] * _tmp65
        - Dv_D_accel_bias[1, 2] * _tmp64
        - Dv_D_gyro_bias[1, 0] * _tmp0
        - Dv_D_gyro_bias[1, 1] * _tmp1
        - Dv_D_gyro_bias[1, 2] * _tmp2
        + _tmp111
        + _tmp70 * _tmp91
    )
    _tmp113 = _tmp100 * _tmp89 + _tmp102 * _tmp91
    _tmp114 = (
        -Dv[2, 0]
        - Dv_D_accel_bias[2, 0] * _tmp63
        - Dv_D_accel_bias[2, 1] * _tmp65
        - Dv_D_accel_bias[2, 2] * _tmp64
        - Dv_D_gyro_bias[2, 0] * _tmp0
        - Dv_D_gyro_bias[2, 1] * _tmp1
        - Dv_D_gyro_bias[2, 2] * _tmp2
        + _tmp113
        + _tmp96 * _tmp99
    )
    _tmp115 = _tmp72 * _tmp90 + _tmp83 * _tmp95
    _tmp116 = (
        -Dp[0, 0]
        - Dp_D_accel_bias[0, 0] * _tmp63
        - Dp_D_accel_bias[0, 1] * _tmp65
        - Dp_D_accel_bias[0, 2] * _tmp64
        - Dp_D_gyro_bias[0, 0] * _tmp0
        - Dp_D_gyro_bias[0, 1] * _tmp1
        - Dp_D_gyro_bias[0, 2] * _tmp2
        + _tmp115
        + _tmp78 * _tmp88
    )
    _tmp117 = _rot_j[3] * _tmp29
    _tmp118 = _rot_j[0] * _tmp35
    _tmp119 = _rot_j[1] * _tmp41
    _tmp120 = _rot_j[2] * _tmp47
    _tmp121 = _tmp117 - _tmp118 + _tmp119 + _tmp120
    _tmp122 = _tmp121 * _tmp60
    _tmp123 = _tmp122 * _tmp56
    _tmp124 = (
        _tmp104 * sqrt_info[0, 8]
        + _tmp110 * sqrt_info[0, 0]
        + _tmp112 * sqrt_info[0, 4]
        + _tmp114 * sqrt_info[0, 5]
        + _tmp116 * sqrt_info[0, 6]
        + _tmp123 * sqrt_info[0, 2]
        + _tmp62 * sqrt_info[0, 1]
        + _tmp85 * sqrt_info[0, 7]
        + _tmp98 * sqrt_info[0, 3]
    )
    _tmp125 = _tmp56 * sqrt_info[1, 2]
    _tmp126 = (
        _tmp104 * sqrt_info[1, 8]
        + _tmp110 * sqrt_info[1, 0]
        + _tmp112 * sqrt_info[1, 4]
        + _tmp114 * sqrt_info[1, 5]
        + _tmp116 * sqrt_info[1, 6]
        + _tmp122 * _tmp125
        + _tmp62 * sqrt_info[1, 1]
        + _tmp85 * sqrt_info[1, 7]
        + _tmp98 * sqrt_info[1, 3]
    )
    _tmp127 = _tmp56 * sqrt_info[2, 2]
    _tmp128 = (
        _tmp104 * sqrt_info[2, 8]
        + _tmp110 * sqrt_info[2, 0]
        + _tmp112 * sqrt_info[2, 4]
        + _tmp114 * sqrt_info[2, 5]
        + _tmp116 * sqrt_info[2, 6]
        + _tmp122 * _tmp127
        + _tmp62 * sqrt_info[2, 1]
        + _tmp85 * sqrt_info[2, 7]
        + _tmp98 * sqrt_info[2, 3]
    )
    _tmp129 = (
        _tmp104 * sqrt_info[3, 8]
        + _tmp110 * sqrt_info[3, 0]
        + _tmp112 * sqrt_info[3, 4]
        + _tmp114 * sqrt_info[3, 5]
        + _tmp116 * sqrt_info[3, 6]
        + _tmp123 * sqrt_info[3, 2]
        + _tmp62 * sqrt_info[3, 1]
        + _tmp85 * sqrt_info[3, 7]
        + _tmp98 * sqrt_info[3, 3]
    )
    _tmp130 = (
        _tmp104 * sqrt_info[4, 8]
        + _tmp110 * sqrt_info[4, 0]
        + _tmp112 * sqrt_info[4, 4]
        + _tmp114 * sqrt_info[4, 5]
        + _tmp116 * sqrt_info[4, 6]
        + _tmp123 * sqrt_info[4, 2]
        + _tmp62 * sqrt_info[4, 1]
        + _tmp85 * sqrt_info[4, 7]
        + _tmp98 * sqrt_info[4, 3]
    )
    _tmp131 = _tmp49 * sqrt_info[5, 1]
    _tmp132 = (
        _tmp104 * sqrt_info[5, 8]
        + _tmp110 * sqrt_info[5, 0]
        + _tmp112 * sqrt_info[5, 4]
        + _tmp114 * sqrt_info[5, 5]
        + _tmp116 * sqrt_info[5, 6]
        + _tmp123 * sqrt_info[5, 2]
        + _tmp131 * _tmp61
        + _tmp85 * sqrt_info[5, 7]
        + _tmp98 * sqrt_info[5, 3]
    )
    _tmp133 = (
        _tmp104 * sqrt_info[6, 8]
        + _tmp110 * sqrt_info[6, 0]
        + _tmp112 * sqrt_info[6, 4]
        + _tmp114 * sqrt_info[6, 5]
        + _tmp116 * sqrt_info[6, 6]
        + _tmp123 * sqrt_info[6, 2]
        + _tmp62 * sqrt_info[6, 1]
        + _tmp85 * sqrt_info[6, 7]
        + _tmp98 * sqrt_info[6, 3]
    )
    _tmp134 = (
        _tmp104 * sqrt_info[7, 8]
        + _tmp110 * sqrt_info[7, 0]
        + _tmp112 * sqrt_info[7, 4]
        + _tmp114 * sqrt_info[7, 5]
        + _tmp116 * sqrt_info[7, 6]
        + _tmp123 * sqrt_info[7, 2]
        + _tmp62 * sqrt_info[7, 1]
        + _tmp85 * sqrt_info[7, 7]
        + _tmp98 * sqrt_info[7, 3]
    )
    _tmp135 = (
        _tmp104 * sqrt_info[8, 8]
        + _tmp110 * sqrt_info[8, 0]
        + _tmp112 * sqrt_info[8, 4]
        + _tmp114 * sqrt_info[8, 5]
        + _tmp116 * sqrt_info[8, 6]
        + _tmp123 * sqrt_info[8, 2]
        + _tmp62 * sqrt_info[8, 1]
        + _tmp85 * sqrt_info[8, 7]
        + _tmp98 * sqrt_info[8, 3]
    )
    _tmp136 = (1.0 / 2.0) * _tmp25
    _tmp137 = (1.0 / 2.0) * _tmp28
    _tmp138 = -_tmp137
    _tmp139 = (1.0 / 2.0) * _tmp17
    _tmp140 = (1.0 / 2.0) * _tmp22
    _tmp141 = _tmp139 + _tmp140
    _tmp142 = _tmp136 + _tmp138 + _tmp141
    _tmp143 = (1.0 / 2.0) * _tmp31
    _tmp144 = -_tmp143
    _tmp145 = (1.0 / 2.0) * _tmp34
    _tmp146 = (1.0 / 2.0) * _tmp32
    _tmp147 = (1.0 / 2.0) * _tmp33
    _tmp148 = _tmp146 + _tmp147
    _tmp149 = _tmp144 + _tmp145 + _tmp148
    _tmp150 = (1.0 / 2.0) * _tmp43
    _tmp151 = -_tmp150
    _tmp152 = (1.0 / 2.0) * _tmp44
    _tmp153 = (1.0 / 2.0) * _tmp45
    _tmp154 = -1.0 / 2.0 * _tmp46
    _tmp155 = -_tmp153 + _tmp154
    _tmp156 = _tmp151 + _tmp152 + _tmp155
    _tmp157 = (1.0 / 2.0) * _tmp37
    _tmp158 = (1.0 / 2.0) * _tmp40
    _tmp159 = -_tmp158
    _tmp160 = (1.0 / 2.0) * _tmp38
    _tmp161 = (1.0 / 2.0) * _tmp39
    _tmp162 = -_tmp160 + _tmp161
    _tmp163 = -_tmp157 + _tmp159 + _tmp162
    _tmp164 = _rot_j[0] * _tmp156 + _rot_j[1] * _tmp142 + _rot_j[2] * _tmp149 - _rot_j[3] * _tmp163
    _tmp165 = _tmp53 + _tmp57
    _tmp166 = abs(_tmp165)
    _tmp167 = min(_tmp166, _tmp58)
    _tmp168 = math.acos(_tmp167)
    _tmp169 = 1 - _tmp167 ** 2
    _tmp170 = (
        _tmp55
        * ((0.0 if -_tmp166 + _tmp58 == 0 else math.copysign(1, -_tmp166 + _tmp58)) + 1)
        * (0.0 if _tmp165 == 0 else math.copysign(1, _tmp165))
    )
    _tmp171 = _tmp167 * _tmp168 * _tmp170 / _tmp169 ** (3.0 / 2.0)
    _tmp172 = _tmp171 * _tmp49
    _tmp173 = _tmp164 * _tmp172
    _tmp174 = _rot_i[3] ** 2
    _tmp175 = -_tmp174
    _tmp176 = _tmp175 + _tmp66
    _tmp177 = -_tmp86
    _tmp178 = _tmp177 + _tmp68
    _tmp179 = _tmp176 + _tmp178
    _tmp180 = -_tmp81
    _tmp181 = _tmp101 + _tmp180
    _tmp182 = -_tmp76
    _tmp183 = _tmp182 + _tmp74
    _tmp184 = _tmp179 * _tmp91 + _tmp181 * _tmp96 + _tmp183 * _tmp89
    _tmp185 = _rot_j[0] * _tmp149 + _rot_j[1] * _tmp163 - _rot_j[2] * _tmp156 + _rot_j[3] * _tmp142
    _tmp186 = _tmp168 / math.sqrt(_tmp169)
    _tmp187 = _tmp186 * _tmp56
    _tmp188 = _tmp185 * _tmp187
    _tmp189 = -_rot_j[0] * _tmp142 + _rot_j[1] * _tmp156 + _rot_j[2] * _tmp163 + _rot_j[3] * _tmp149
    _tmp190 = _tmp187 * _tmp189
    _tmp191 = _tmp170 / _tmp169
    _tmp192 = _tmp109 * _tmp191
    _tmp193 = _tmp164 * _tmp192
    _tmp194 = _tmp179 * _tmp72 + _tmp181 * _tmp83 + _tmp183 * _tmp78
    _tmp195 = -_tmp66
    _tmp196 = _tmp174 + _tmp195
    _tmp197 = _tmp178 + _tmp196
    _tmp198 = _tmp103 + _tmp197 * _tmp83
    _tmp199 = _tmp121 * _tmp171
    _tmp200 = _tmp164 * _tmp199
    _tmp201 = _tmp191 * _tmp49
    _tmp202 = _tmp164 * _tmp201
    _tmp203 = _tmp187 * (
        _rot_j[0] * _tmp163 - _rot_j[1] * _tmp149 + _rot_j[2] * _tmp142 + _rot_j[3] * _tmp156
    )
    _tmp204 = _tmp113 + _tmp197 * _tmp96
    _tmp205 = _tmp121 * _tmp191
    _tmp206 = _tmp164 * _tmp205
    _tmp207 = _tmp109 * _tmp171
    _tmp208 = _tmp164 * _tmp207
    _tmp209 = (
        _tmp173 * sqrt_info[0, 1]
        + _tmp184 * sqrt_info[0, 5]
        + _tmp188 * sqrt_info[0, 1]
        + _tmp190 * sqrt_info[0, 2]
        - _tmp193 * sqrt_info[0, 0]
        + _tmp194 * sqrt_info[0, 8]
        + _tmp198 * sqrt_info[0, 7]
        + _tmp200 * sqrt_info[0, 2]
        - _tmp202 * sqrt_info[0, 1]
        + _tmp203 * sqrt_info[0, 0]
        + _tmp204 * sqrt_info[0, 4]
        - _tmp206 * sqrt_info[0, 2]
        + _tmp208 * sqrt_info[0, 0]
    )
    _tmp210 = _tmp199 * sqrt_info[1, 2]
    _tmp211 = (
        _tmp164 * _tmp210
        + _tmp173 * sqrt_info[1, 1]
        + _tmp184 * sqrt_info[1, 5]
        + _tmp188 * sqrt_info[1, 1]
        + _tmp190 * sqrt_info[1, 2]
        - _tmp193 * sqrt_info[1, 0]
        + _tmp194 * sqrt_info[1, 8]
        + _tmp198 * sqrt_info[1, 7]
        - _tmp202 * sqrt_info[1, 1]
        + _tmp203 * sqrt_info[1, 0]
        + _tmp204 * sqrt_info[1, 4]
        - _tmp206 * sqrt_info[1, 2]
        + _tmp208 * sqrt_info[1, 0]
    )
    _tmp212 = _tmp127 * _tmp186
    _tmp213 = _tmp201 * sqrt_info[2, 1]
    _tmp214 = _tmp205 * sqrt_info[2, 2]
    _tmp215 = (
        -_tmp164 * _tmp213
        - _tmp164 * _tmp214
        + _tmp173 * sqrt_info[2, 1]
        + _tmp184 * sqrt_info[2, 5]
        + _tmp188 * sqrt_info[2, 1]
        + _tmp189 * _tmp212
        - _tmp193 * sqrt_info[2, 0]
        + _tmp194 * sqrt_info[2, 8]
        + _tmp198 * sqrt_info[2, 7]
        + _tmp200 * sqrt_info[2, 2]
        + _tmp203 * sqrt_info[2, 0]
        + _tmp204 * sqrt_info[2, 4]
        + _tmp208 * sqrt_info[2, 0]
    )
    _tmp216 = (
        _tmp173 * sqrt_info[3, 1]
        + _tmp184 * sqrt_info[3, 5]
        + _tmp188 * sqrt_info[3, 1]
        + _tmp190 * sqrt_info[3, 2]
        - _tmp193 * sqrt_info[3, 0]
        + _tmp194 * sqrt_info[3, 8]
        + _tmp198 * sqrt_info[3, 7]
        + _tmp200 * sqrt_info[3, 2]
        - _tmp202 * sqrt_info[3, 1]
        + _tmp203 * sqrt_info[3, 0]
        + _tmp204 * sqrt_info[3, 4]
        - _tmp206 * sqrt_info[3, 2]
        + _tmp208 * sqrt_info[3, 0]
    )
    _tmp217 = _tmp199 * sqrt_info[4, 2]
    _tmp218 = (
        _tmp164 * _tmp217
        + _tmp173 * sqrt_info[4, 1]
        + _tmp184 * sqrt_info[4, 5]
        + _tmp188 * sqrt_info[4, 1]
        + _tmp190 * sqrt_info[4, 2]
        - _tmp193 * sqrt_info[4, 0]
        + _tmp194 * sqrt_info[4, 8]
        + _tmp198 * sqrt_info[4, 7]
        - _tmp202 * sqrt_info[4, 1]
        + _tmp203 * sqrt_info[4, 0]
        + _tmp204 * sqrt_info[4, 4]
        - _tmp206 * sqrt_info[4, 2]
        + _tmp208 * sqrt_info[4, 0]
    )
    _tmp219 = _tmp131 * _tmp171
    _tmp220 = _tmp192 * sqrt_info[5, 0]
    _tmp221 = _tmp131 * _tmp191
    _tmp222 = (
        _tmp164 * _tmp219
        - _tmp164 * _tmp220
        - _tmp164 * _tmp221
        + _tmp184 * sqrt_info[5, 5]
        + _tmp188 * sqrt_info[5, 1]
        + _tmp190 * sqrt_info[5, 2]
        + _tmp194 * sqrt_info[5, 8]
        + _tmp198 * sqrt_info[5, 7]
        + _tmp200 * sqrt_info[5, 2]
        + _tmp203 * sqrt_info[5, 0]
        + _tmp204 * sqrt_info[5, 4]
        - _tmp206 * sqrt_info[5, 2]
        + _tmp208 * sqrt_info[5, 0]
    )
    _tmp223 = _tmp187 * sqrt_info[6, 2]
    _tmp224 = _tmp207 * sqrt_info[6, 0]
    _tmp225 = (
        _tmp164 * _tmp224
        + _tmp173 * sqrt_info[6, 1]
        + _tmp184 * sqrt_info[6, 5]
        + _tmp188 * sqrt_info[6, 1]
        + _tmp189 * _tmp223
        - _tmp193 * sqrt_info[6, 0]
        + _tmp194 * sqrt_info[6, 8]
        + _tmp198 * sqrt_info[6, 7]
        + _tmp200 * sqrt_info[6, 2]
        - _tmp202 * sqrt_info[6, 1]
        + _tmp203 * sqrt_info[6, 0]
        + _tmp204 * sqrt_info[6, 4]
        - _tmp206 * sqrt_info[6, 2]
    )
    _tmp226 = _tmp187 * sqrt_info[7, 1]
    _tmp227 = _tmp201 * sqrt_info[7, 1]
    _tmp228 = (
        -_tmp164 * _tmp227
        + _tmp173 * sqrt_info[7, 1]
        + _tmp184 * sqrt_info[7, 5]
        + _tmp185 * _tmp226
        + _tmp190 * sqrt_info[7, 2]
        - _tmp193 * sqrt_info[7, 0]
        + _tmp194 * sqrt_info[7, 8]
        + _tmp198 * sqrt_info[7, 7]
        + _tmp200 * sqrt_info[7, 2]
        + _tmp203 * sqrt_info[7, 0]
        + _tmp204 * sqrt_info[7, 4]
        - _tmp206 * sqrt_info[7, 2]
        + _tmp208 * sqrt_info[7, 0]
    )
    _tmp229 = (
        _tmp173 * sqrt_info[8, 1]
        + _tmp184 * sqrt_info[8, 5]
        + _tmp188 * sqrt_info[8, 1]
        + _tmp190 * sqrt_info[8, 2]
        - _tmp193 * sqrt_info[8, 0]
        + _tmp194 * sqrt_info[8, 8]
        + _tmp198 * sqrt_info[8, 7]
        + _tmp200 * sqrt_info[8, 2]
        - _tmp202 * sqrt_info[8, 1]
        + _tmp203 * sqrt_info[8, 0]
        + _tmp204 * sqrt_info[8, 4]
        - _tmp206 * sqrt_info[8, 2]
        + _tmp208 * sqrt_info[8, 0]
    )
    _tmp230 = -_tmp68
    _tmp231 = _tmp174 + _tmp177 + _tmp230 + _tmp66
    _tmp232 = _tmp115 + _tmp231 * _tmp78
    _tmp233 = -_tmp136
    _tmp234 = _tmp137 + _tmp141 + _tmp233
    _tmp235 = -_tmp145
    _tmp236 = _tmp144 + _tmp146 - _tmp147 + _tmp235
    _tmp237 = -_tmp152
    _tmp238 = _tmp150 + _tmp155 + _tmp237
    _tmp239 = _tmp157 + _tmp159 + _tmp160 + _tmp161
    _tmp240 = _rot_j[0] * _tmp234 + _rot_j[1] * _tmp238 + _rot_j[2] * _tmp239 - _rot_j[3] * _tmp236
    _tmp241 = _tmp205 * _tmp240
    _tmp242 = -_rot_j[0] * _tmp238 + _rot_j[1] * _tmp234 + _rot_j[2] * _tmp236 + _rot_j[3] * _tmp239
    _tmp243 = _tmp187 * _tmp242
    _tmp244 = _tmp172 * _tmp240
    _tmp245 = _rot_j[0] * _tmp239 + _rot_j[1] * _tmp236 - _rot_j[2] * _tmp234 + _rot_j[3] * _tmp238
    _tmp246 = _tmp187 * _tmp245
    _tmp247 = _tmp207 * _tmp240
    _tmp248 = -_tmp94
    _tmp249 = _tmp248 + _tmp93
    _tmp250 = _tmp230 + _tmp86
    _tmp251 = _tmp176 + _tmp250
    _tmp252 = _tmp180 + _tmp80
    _tmp253 = _tmp249 * _tmp78 + _tmp251 * _tmp83 + _tmp252 * _tmp72
    _tmp254 = _tmp231 * _tmp89 + _tmp97
    _tmp255 = _tmp201 * _tmp240
    _tmp256 = _tmp192 * _tmp240
    _tmp257 = _tmp249 * _tmp89 + _tmp251 * _tmp96 + _tmp252 * _tmp91
    _tmp258 = _tmp187 * (
        _rot_j[0] * _tmp236 - _rot_j[1] * _tmp239 + _rot_j[2] * _tmp238 + _rot_j[3] * _tmp234
    )
    _tmp259 = _tmp199 * _tmp240
    _tmp260 = (
        _tmp232 * sqrt_info[0, 8]
        - _tmp241 * sqrt_info[0, 2]
        + _tmp243 * sqrt_info[0, 2]
        + _tmp244 * sqrt_info[0, 1]
        + _tmp246 * sqrt_info[0, 1]
        + _tmp247 * sqrt_info[0, 0]
        + _tmp253 * sqrt_info[0, 6]
        + _tmp254 * sqrt_info[0, 5]
        - _tmp255 * sqrt_info[0, 1]
        - _tmp256 * sqrt_info[0, 0]
        + _tmp257 * sqrt_info[0, 3]
        + _tmp258 * sqrt_info[0, 0]
        + _tmp259 * sqrt_info[0, 2]
    )
    _tmp261 = (
        _tmp210 * _tmp240
        + _tmp232 * sqrt_info[1, 8]
        - _tmp241 * sqrt_info[1, 2]
        + _tmp243 * sqrt_info[1, 2]
        + _tmp244 * sqrt_info[1, 1]
        + _tmp246 * sqrt_info[1, 1]
        + _tmp247 * sqrt_info[1, 0]
        + _tmp253 * sqrt_info[1, 6]
        + _tmp254 * sqrt_info[1, 5]
        - _tmp255 * sqrt_info[1, 1]
        - _tmp256 * sqrt_info[1, 0]
        + _tmp257 * sqrt_info[1, 3]
        + _tmp258 * sqrt_info[1, 0]
    )
    _tmp262 = (
        _tmp212 * _tmp242
        - _tmp213 * _tmp240
        + _tmp232 * sqrt_info[2, 8]
        - _tmp241 * sqrt_info[2, 2]
        + _tmp244 * sqrt_info[2, 1]
        + _tmp246 * sqrt_info[2, 1]
        + _tmp247 * sqrt_info[2, 0]
        + _tmp253 * sqrt_info[2, 6]
        + _tmp254 * sqrt_info[2, 5]
        - _tmp256 * sqrt_info[2, 0]
        + _tmp257 * sqrt_info[2, 3]
        + _tmp258 * sqrt_info[2, 0]
        + _tmp259 * sqrt_info[2, 2]
    )
    _tmp263 = (
        _tmp232 * sqrt_info[3, 8]
        - _tmp241 * sqrt_info[3, 2]
        + _tmp243 * sqrt_info[3, 2]
        + _tmp244 * sqrt_info[3, 1]
        + _tmp246 * sqrt_info[3, 1]
        + _tmp247 * sqrt_info[3, 0]
        + _tmp253 * sqrt_info[3, 6]
        + _tmp254 * sqrt_info[3, 5]
        - _tmp255 * sqrt_info[3, 1]
        - _tmp256 * sqrt_info[3, 0]
        + _tmp257 * sqrt_info[3, 3]
        + _tmp258 * sqrt_info[3, 0]
        + _tmp259 * sqrt_info[3, 2]
    )
    _tmp264 = _tmp201 * sqrt_info[4, 1]
    _tmp265 = (
        _tmp217 * _tmp240
        + _tmp232 * sqrt_info[4, 8]
        - _tmp240 * _tmp264
        - _tmp241 * sqrt_info[4, 2]
        + _tmp243 * sqrt_info[4, 2]
        + _tmp244 * sqrt_info[4, 1]
        + _tmp246 * sqrt_info[4, 1]
        + _tmp247 * sqrt_info[4, 0]
        + _tmp253 * sqrt_info[4, 6]
        + _tmp254 * sqrt_info[4, 5]
        - _tmp256 * sqrt_info[4, 0]
        + _tmp257 * sqrt_info[4, 3]
        + _tmp258 * sqrt_info[4, 0]
    )
    _tmp266 = (
        _tmp219 * _tmp240
        - _tmp220 * _tmp240
        - _tmp221 * _tmp240
        + _tmp232 * sqrt_info[5, 8]
        - _tmp241 * sqrt_info[5, 2]
        + _tmp243 * sqrt_info[5, 2]
        + _tmp246 * sqrt_info[5, 1]
        + _tmp247 * sqrt_info[5, 0]
        + _tmp253 * sqrt_info[5, 6]
        + _tmp254 * sqrt_info[5, 5]
        + _tmp257 * sqrt_info[5, 3]
        + _tmp258 * sqrt_info[5, 0]
        + _tmp259 * sqrt_info[5, 2]
    )
    _tmp267 = (
        _tmp223 * _tmp242
        + _tmp224 * _tmp240
        + _tmp232 * sqrt_info[6, 8]
        - _tmp241 * sqrt_info[6, 2]
        + _tmp244 * sqrt_info[6, 1]
        + _tmp246 * sqrt_info[6, 1]
        + _tmp253 * sqrt_info[6, 6]
        + _tmp254 * sqrt_info[6, 5]
        - _tmp255 * sqrt_info[6, 1]
        - _tmp256 * sqrt_info[6, 0]
        + _tmp257 * sqrt_info[6, 3]
        + _tmp258 * sqrt_info[6, 0]
        + _tmp259 * sqrt_info[6, 2]
    )
    _tmp268 = (
        _tmp226 * _tmp245
        - _tmp227 * _tmp240
        + _tmp232 * sqrt_info[7, 8]
        - _tmp241 * sqrt_info[7, 2]
        + _tmp243 * sqrt_info[7, 2]
        + _tmp244 * sqrt_info[7, 1]
        + _tmp247 * sqrt_info[7, 0]
        + _tmp253 * sqrt_info[7, 6]
        + _tmp254 * sqrt_info[7, 5]
        - _tmp256 * sqrt_info[7, 0]
        + _tmp257 * sqrt_info[7, 3]
        + _tmp258 * sqrt_info[7, 0]
        + _tmp259 * sqrt_info[7, 2]
    )
    _tmp269 = _tmp201 * sqrt_info[8, 1]
    _tmp270 = (
        _tmp232 * sqrt_info[8, 8]
        - _tmp240 * _tmp269
        - _tmp241 * sqrt_info[8, 2]
        + _tmp243 * sqrt_info[8, 2]
        + _tmp244 * sqrt_info[8, 1]
        + _tmp246 * sqrt_info[8, 1]
        + _tmp247 * sqrt_info[8, 0]
        + _tmp253 * sqrt_info[8, 6]
        + _tmp254 * sqrt_info[8, 5]
        - _tmp256 * sqrt_info[8, 0]
        + _tmp257 * sqrt_info[8, 3]
        + _tmp258 * sqrt_info[8, 0]
        + _tmp259 * sqrt_info[8, 2]
    )
    _tmp271 = _tmp138 + _tmp139 - _tmp140 + _tmp233
    _tmp272 = _tmp143 + _tmp148 + _tmp235
    _tmp273 = _tmp151 + _tmp153 + _tmp154 + _tmp237
    _tmp274 = _tmp157 + _tmp158 + _tmp162
    _tmp275 = _rot_j[0] * _tmp272 + _rot_j[1] * _tmp274 + _rot_j[2] * _tmp273 - _rot_j[3] * _tmp271
    _tmp276 = _tmp201 * _tmp275
    _tmp277 = _tmp196 + _tmp250
    _tmp278 = _tmp111 + _tmp277 * _tmp91
    _tmp279 = -_rot_j[0] * _tmp274 + _rot_j[1] * _tmp272 + _rot_j[2] * _tmp271 + _rot_j[3] * _tmp273
    _tmp280 = _tmp187 * _tmp279
    _tmp281 = _tmp182 + _tmp75
    _tmp282 = _tmp248 + _tmp92
    _tmp283 = _tmp175 + _tmp195 + _tmp68 + _tmp86
    _tmp284 = _tmp281 * _tmp72 + _tmp282 * _tmp83 + _tmp283 * _tmp78
    _tmp285 = _tmp192 * _tmp275
    _tmp286 = _tmp199 * _tmp275
    _tmp287 = _tmp277 * _tmp72 + _tmp84
    _tmp288 = _tmp281 * _tmp91 + _tmp282 * _tmp96 + _tmp283 * _tmp89
    _tmp289 = _tmp171 * _tmp275
    _tmp290 = _tmp109 * _tmp289
    _tmp291 = _tmp187 * (
        _rot_j[0] * _tmp271 - _rot_j[1] * _tmp273 + _rot_j[2] * _tmp274 + _rot_j[3] * _tmp272
    )
    _tmp292 = _tmp289 * _tmp49
    _tmp293 = _tmp205 * _tmp275
    _tmp294 = _rot_j[0] * _tmp273 + _rot_j[1] * _tmp271 - _rot_j[2] * _tmp272 + _rot_j[3] * _tmp274
    _tmp295 = _tmp187 * _tmp294
    _tmp296 = (
        -_tmp276 * sqrt_info[0, 1]
        + _tmp278 * sqrt_info[0, 3]
        + _tmp280 * sqrt_info[0, 2]
        + _tmp284 * sqrt_info[0, 7]
        - _tmp285 * sqrt_info[0, 0]
        + _tmp286 * sqrt_info[0, 2]
        + _tmp287 * sqrt_info[0, 6]
        + _tmp288 * sqrt_info[0, 4]
        + _tmp290 * sqrt_info[0, 0]
        + _tmp291 * sqrt_info[0, 0]
        + _tmp292 * sqrt_info[0, 1]
        - _tmp293 * sqrt_info[0, 2]
        + _tmp295 * sqrt_info[0, 1]
    )
    _tmp297 = (
        _tmp210 * _tmp275
        - _tmp276 * sqrt_info[1, 1]
        + _tmp278 * sqrt_info[1, 3]
        + _tmp280 * sqrt_info[1, 2]
        + _tmp284 * sqrt_info[1, 7]
        - _tmp285 * sqrt_info[1, 0]
        + _tmp287 * sqrt_info[1, 6]
        + _tmp288 * sqrt_info[1, 4]
        + _tmp290 * sqrt_info[1, 0]
        + _tmp291 * sqrt_info[1, 0]
        + _tmp292 * sqrt_info[1, 1]
        - _tmp293 * sqrt_info[1, 2]
        + _tmp295 * sqrt_info[1, 1]
    )
    _tmp298 = (
        _tmp212 * _tmp279
        - _tmp213 * _tmp275
        + _tmp278 * sqrt_info[2, 3]
        + _tmp284 * sqrt_info[2, 7]
        - _tmp285 * sqrt_info[2, 0]
        + _tmp286 * sqrt_info[2, 2]
        + _tmp287 * sqrt_info[2, 6]
        + _tmp288 * sqrt_info[2, 4]
        + _tmp290 * sqrt_info[2, 0]
        + _tmp291 * sqrt_info[2, 0]
        + _tmp292 * sqrt_info[2, 1]
        - _tmp293 * sqrt_info[2, 2]
        + _tmp295 * sqrt_info[2, 1]
    )
    _tmp299 = (
        -_tmp276 * sqrt_info[3, 1]
        + _tmp278 * sqrt_info[3, 3]
        + _tmp280 * sqrt_info[3, 2]
        + _tmp284 * sqrt_info[3, 7]
        - _tmp285 * sqrt_info[3, 0]
        + _tmp286 * sqrt_info[3, 2]
        + _tmp287 * sqrt_info[3, 6]
        + _tmp288 * sqrt_info[3, 4]
        + _tmp290 * sqrt_info[3, 0]
        + _tmp291 * sqrt_info[3, 0]
        + _tmp292 * sqrt_info[3, 1]
        - _tmp293 * sqrt_info[3, 2]
        + _tmp295 * sqrt_info[3, 1]
    )
    _tmp300 = (
        _tmp217 * _tmp275
        - _tmp276 * sqrt_info[4, 1]
        + _tmp278 * sqrt_info[4, 3]
        + _tmp280 * sqrt_info[4, 2]
        + _tmp284 * sqrt_info[4, 7]
        - _tmp285 * sqrt_info[4, 0]
        + _tmp287 * sqrt_info[4, 6]
        + _tmp288 * sqrt_info[4, 4]
        + _tmp290 * sqrt_info[4, 0]
        + _tmp291 * sqrt_info[4, 0]
        + _tmp292 * sqrt_info[4, 1]
        - _tmp293 * sqrt_info[4, 2]
        + _tmp295 * sqrt_info[4, 1]
    )
    _tmp301 = (
        _tmp131 * _tmp289
        - _tmp221 * _tmp275
        + _tmp278 * sqrt_info[5, 3]
        + _tmp280 * sqrt_info[5, 2]
        + _tmp284 * sqrt_info[5, 7]
        - _tmp285 * sqrt_info[5, 0]
        + _tmp286 * sqrt_info[5, 2]
        + _tmp287 * sqrt_info[5, 6]
        + _tmp288 * sqrt_info[5, 4]
        + _tmp290 * sqrt_info[5, 0]
        + _tmp291 * sqrt_info[5, 0]
        - _tmp293 * sqrt_info[5, 2]
        + _tmp295 * sqrt_info[5, 1]
    )
    _tmp302 = (
        _tmp223 * _tmp279
        - _tmp276 * sqrt_info[6, 1]
        + _tmp278 * sqrt_info[6, 3]
        + _tmp284 * sqrt_info[6, 7]
        - _tmp285 * sqrt_info[6, 0]
        + _tmp286 * sqrt_info[6, 2]
        + _tmp287 * sqrt_info[6, 6]
        + _tmp288 * sqrt_info[6, 4]
        + _tmp290 * sqrt_info[6, 0]
        + _tmp291 * sqrt_info[6, 0]
        + _tmp292 * sqrt_info[6, 1]
        - _tmp293 * sqrt_info[6, 2]
        + _tmp295 * sqrt_info[6, 1]
    )
    _tmp303 = (
        _tmp226 * _tmp294
        - _tmp227 * _tmp275
        + _tmp278 * sqrt_info[7, 3]
        + _tmp280 * sqrt_info[7, 2]
        + _tmp284 * sqrt_info[7, 7]
        - _tmp285 * sqrt_info[7, 0]
        + _tmp286 * sqrt_info[7, 2]
        + _tmp287 * sqrt_info[7, 6]
        + _tmp288 * sqrt_info[7, 4]
        + _tmp290 * sqrt_info[7, 0]
        + _tmp291 * sqrt_info[7, 0]
        + _tmp292 * sqrt_info[7, 1]
        - _tmp293 * sqrt_info[7, 2]
    )
    _tmp304 = (
        -_tmp276 * sqrt_info[8, 1]
        + _tmp278 * sqrt_info[8, 3]
        + _tmp280 * sqrt_info[8, 2]
        + _tmp284 * sqrt_info[8, 7]
        - _tmp285 * sqrt_info[8, 0]
        + _tmp286 * sqrt_info[8, 2]
        + _tmp287 * sqrt_info[8, 6]
        + _tmp288 * sqrt_info[8, 4]
        + _tmp290 * sqrt_info[8, 0]
        + _tmp291 * sqrt_info[8, 0]
        + _tmp292 * sqrt_info[8, 1]
        - _tmp293 * sqrt_info[8, 2]
        + _tmp295 * sqrt_info[8, 1]
    )
    _tmp305 = _tmp100 * sqrt_info[0, 8]
    _tmp306 = _tmp77 * sqrt_info[0, 7]
    _tmp307 = _tmp88 * sqrt_info[0, 6]
    _tmp308 = _tmp100 * sqrt_info[0, 5]
    _tmp309 = _tmp77 * sqrt_info[0, 4]
    _tmp310 = _tmp88 * sqrt_info[0, 3]
    _tmp311 = -_tmp305 * dt - _tmp306 * dt - _tmp307 * dt - _tmp308 - _tmp309 - _tmp310
    _tmp312 = _tmp100 * sqrt_info[1, 8]
    _tmp313 = _tmp77 * sqrt_info[1, 7]
    _tmp314 = _tmp88 * sqrt_info[1, 6]
    _tmp315 = _tmp100 * sqrt_info[1, 5]
    _tmp316 = _tmp77 * sqrt_info[1, 4]
    _tmp317 = _tmp88 * sqrt_info[1, 3]
    _tmp318 = -_tmp312 * dt - _tmp313 * dt - _tmp314 * dt - _tmp315 - _tmp316 - _tmp317
    _tmp319 = _tmp100 * sqrt_info[2, 8]
    _tmp320 = _tmp77 * sqrt_info[2, 7]
    _tmp321 = _tmp88 * sqrt_info[2, 6]
    _tmp322 = _tmp100 * sqrt_info[2, 5]
    _tmp323 = _tmp77 * sqrt_info[2, 4]
    _tmp324 = _tmp88 * sqrt_info[2, 3]
    _tmp325 = -_tmp319 * dt - _tmp320 * dt - _tmp321 * dt - _tmp322 - _tmp323 - _tmp324
    _tmp326 = _tmp100 * sqrt_info[3, 8]
    _tmp327 = _tmp77 * sqrt_info[3, 7]
    _tmp328 = _tmp88 * sqrt_info[3, 6]
    _tmp329 = _tmp100 * sqrt_info[3, 5]
    _tmp330 = _tmp77 * sqrt_info[3, 4]
    _tmp331 = _tmp88 * sqrt_info[3, 3]
    _tmp332 = -_tmp326 * dt - _tmp327 * dt - _tmp328 * dt - _tmp329 - _tmp330 - _tmp331
    _tmp333 = _tmp100 * sqrt_info[4, 8]
    _tmp334 = _tmp77 * sqrt_info[4, 7]
    _tmp335 = _tmp88 * sqrt_info[4, 6]
    _tmp336 = _tmp100 * sqrt_info[4, 5]
    _tmp337 = _tmp77 * sqrt_info[4, 4]
    _tmp338 = _tmp88 * sqrt_info[4, 3]
    _tmp339 = -_tmp333 * dt - _tmp334 * dt - _tmp335 * dt - _tmp336 - _tmp337 - _tmp338
    _tmp340 = _tmp100 * sqrt_info[5, 8]
    _tmp341 = _tmp77 * sqrt_info[5, 7]
    _tmp342 = _tmp88 * sqrt_info[5, 6]
    _tmp343 = _tmp100 * sqrt_info[5, 5]
    _tmp344 = _tmp77 * sqrt_info[5, 4]
    _tmp345 = _tmp88 * sqrt_info[5, 3]
    _tmp346 = -_tmp340 * dt - _tmp341 * dt - _tmp342 * dt - _tmp343 - _tmp344 - _tmp345
    _tmp347 = _tmp100 * sqrt_info[6, 8]
    _tmp348 = _tmp77 * sqrt_info[6, 7]
    _tmp349 = _tmp88 * sqrt_info[6, 6]
    _tmp350 = _tmp100 * sqrt_info[6, 5]
    _tmp351 = _tmp77 * sqrt_info[6, 4]
    _tmp352 = _tmp88 * sqrt_info[6, 3]
    _tmp353 = -_tmp347 * dt - _tmp348 * dt - _tmp349 * dt - _tmp350 - _tmp351 - _tmp352
    _tmp354 = _tmp100 * sqrt_info[7, 8]
    _tmp355 = _tmp77 * sqrt_info[7, 7]
    _tmp356 = _tmp88 * sqrt_info[7, 6]
    _tmp357 = _tmp100 * sqrt_info[7, 5]
    _tmp358 = _tmp77 * sqrt_info[7, 4]
    _tmp359 = _tmp88 * sqrt_info[7, 3]
    _tmp360 = -_tmp354 * dt - _tmp355 * dt - _tmp356 * dt - _tmp357 - _tmp358 - _tmp359
    _tmp361 = _tmp100 * sqrt_info[8, 8]
    _tmp362 = _tmp77 * sqrt_info[8, 7]
    _tmp363 = _tmp88 * sqrt_info[8, 6]
    _tmp364 = _tmp100 * sqrt_info[8, 5]
    _tmp365 = _tmp77 * sqrt_info[8, 4]
    _tmp366 = _tmp88 * sqrt_info[8, 3]
    _tmp367 = -_tmp361 * dt - _tmp362 * dt - _tmp363 * dt - _tmp364 - _tmp365 - _tmp366
    _tmp368 = _tmp102 * sqrt_info[0, 8]
    _tmp369 = _tmp90 * sqrt_info[0, 6]
    _tmp370 = _tmp70 * sqrt_info[0, 7]
    _tmp371 = _tmp102 * sqrt_info[0, 5]
    _tmp372 = _tmp90 * sqrt_info[0, 3]
    _tmp373 = _tmp70 * sqrt_info[0, 4]
    _tmp374 = -_tmp368 * dt - _tmp369 * dt - _tmp370 * dt - _tmp371 - _tmp372 - _tmp373
    _tmp375 = _tmp102 * sqrt_info[1, 8]
    _tmp376 = _tmp90 * sqrt_info[1, 6]
    _tmp377 = _tmp70 * sqrt_info[1, 7]
    _tmp378 = _tmp102 * sqrt_info[1, 5]
    _tmp379 = _tmp90 * sqrt_info[1, 3]
    _tmp380 = _tmp70 * sqrt_info[1, 4]
    _tmp381 = -_tmp375 * dt - _tmp376 * dt - _tmp377 * dt - _tmp378 - _tmp379 - _tmp380
    _tmp382 = _tmp102 * sqrt_info[2, 8]
    _tmp383 = _tmp90 * sqrt_info[2, 6]
    _tmp384 = _tmp70 * sqrt_info[2, 7]
    _tmp385 = _tmp102 * sqrt_info[2, 5]
    _tmp386 = _tmp90 * sqrt_info[2, 3]
    _tmp387 = _tmp70 * sqrt_info[2, 4]
    _tmp388 = -_tmp382 * dt - _tmp383 * dt - _tmp384 * dt - _tmp385 - _tmp386 - _tmp387
    _tmp389 = _tmp102 * sqrt_info[3, 8]
    _tmp390 = _tmp90 * sqrt_info[3, 6]
    _tmp391 = _tmp70 * sqrt_info[3, 7]
    _tmp392 = _tmp102 * sqrt_info[3, 5]
    _tmp393 = _tmp90 * sqrt_info[3, 3]
    _tmp394 = _tmp70 * sqrt_info[3, 4]
    _tmp395 = -_tmp389 * dt - _tmp390 * dt - _tmp391 * dt - _tmp392 - _tmp393 - _tmp394
    _tmp396 = _tmp102 * sqrt_info[4, 8]
    _tmp397 = _tmp90 * sqrt_info[4, 6]
    _tmp398 = _tmp70 * sqrt_info[4, 7]
    _tmp399 = _tmp102 * sqrt_info[4, 5]
    _tmp400 = _tmp90 * sqrt_info[4, 3]
    _tmp401 = _tmp70 * sqrt_info[4, 4]
    _tmp402 = -_tmp396 * dt - _tmp397 * dt - _tmp398 * dt - _tmp399 - _tmp400 - _tmp401
    _tmp403 = _tmp102 * sqrt_info[5, 8]
    _tmp404 = _tmp90 * sqrt_info[5, 6]
    _tmp405 = _tmp70 * sqrt_info[5, 7]
    _tmp406 = _tmp102 * sqrt_info[5, 5]
    _tmp407 = _tmp90 * sqrt_info[5, 3]
    _tmp408 = _tmp70 * sqrt_info[5, 4]
    _tmp409 = -_tmp403 * dt - _tmp404 * dt - _tmp405 * dt - _tmp406 - _tmp407 - _tmp408
    _tmp410 = _tmp102 * sqrt_info[6, 8]
    _tmp411 = _tmp90 * sqrt_info[6, 6]
    _tmp412 = _tmp70 * sqrt_info[6, 7]
    _tmp413 = _tmp102 * sqrt_info[6, 5]
    _tmp414 = _tmp90 * sqrt_info[6, 3]
    _tmp415 = _tmp70 * sqrt_info[6, 4]
    _tmp416 = -_tmp410 * dt - _tmp411 * dt - _tmp412 * dt - _tmp413 - _tmp414 - _tmp415
    _tmp417 = _tmp102 * sqrt_info[7, 8]
    _tmp418 = _tmp90 * sqrt_info[7, 6]
    _tmp419 = _tmp70 * sqrt_info[7, 7]
    _tmp420 = _tmp102 * sqrt_info[7, 5]
    _tmp421 = _tmp90 * sqrt_info[7, 3]
    _tmp422 = _tmp70 * sqrt_info[7, 4]
    _tmp423 = -_tmp417 * dt - _tmp418 * dt - _tmp419 * dt - _tmp420 - _tmp421 - _tmp422
    _tmp424 = _tmp102 * sqrt_info[8, 8]
    _tmp425 = _tmp90 * sqrt_info[8, 6]
    _tmp426 = _tmp70 * sqrt_info[8, 7]
    _tmp427 = _tmp102 * sqrt_info[8, 5]
    _tmp428 = _tmp90 * sqrt_info[8, 3]
    _tmp429 = _tmp70 * sqrt_info[8, 4]
    _tmp430 = -_tmp424 * dt - _tmp425 * dt - _tmp426 * dt - _tmp427 - _tmp428 - _tmp429
    _tmp431 = _tmp95 * sqrt_info[0, 6]
    _tmp432 = _tmp82 * sqrt_info[0, 7]
    _tmp433 = _tmp99 * sqrt_info[0, 8]
    _tmp434 = _tmp82 * sqrt_info[0, 4]
    _tmp435 = _tmp95 * sqrt_info[0, 3]
    _tmp436 = _tmp99 * sqrt_info[0, 5]
    _tmp437 = -_tmp431 * dt - _tmp432 * dt - _tmp433 * dt - _tmp434 - _tmp435 - _tmp436
    _tmp438 = _tmp95 * sqrt_info[1, 6]
    _tmp439 = _tmp82 * sqrt_info[1, 7]
    _tmp440 = _tmp99 * sqrt_info[1, 8]
    _tmp441 = _tmp82 * sqrt_info[1, 4]
    _tmp442 = _tmp95 * sqrt_info[1, 3]
    _tmp443 = _tmp99 * sqrt_info[1, 5]
    _tmp444 = -_tmp438 * dt - _tmp439 * dt - _tmp440 * dt - _tmp441 - _tmp442 - _tmp443
    _tmp445 = _tmp95 * sqrt_info[2, 6]
    _tmp446 = _tmp82 * sqrt_info[2, 7]
    _tmp447 = _tmp99 * sqrt_info[2, 8]
    _tmp448 = _tmp82 * sqrt_info[2, 4]
    _tmp449 = _tmp95 * sqrt_info[2, 3]
    _tmp450 = _tmp99 * sqrt_info[2, 5]
    _tmp451 = -_tmp445 * dt - _tmp446 * dt - _tmp447 * dt - _tmp448 - _tmp449 - _tmp450
    _tmp452 = _tmp95 * sqrt_info[3, 6]
    _tmp453 = _tmp82 * sqrt_info[3, 7]
    _tmp454 = _tmp99 * sqrt_info[3, 8]
    _tmp455 = _tmp82 * sqrt_info[3, 4]
    _tmp456 = _tmp95 * sqrt_info[3, 3]
    _tmp457 = _tmp99 * sqrt_info[3, 5]
    _tmp458 = -_tmp452 * dt - _tmp453 * dt - _tmp454 * dt - _tmp455 - _tmp456 - _tmp457
    _tmp459 = _tmp95 * sqrt_info[4, 6]
    _tmp460 = _tmp82 * sqrt_info[4, 7]
    _tmp461 = _tmp99 * sqrt_info[4, 8]
    _tmp462 = _tmp82 * sqrt_info[4, 4]
    _tmp463 = _tmp95 * sqrt_info[4, 3]
    _tmp464 = _tmp99 * sqrt_info[4, 5]
    _tmp465 = -_tmp459 * dt - _tmp460 * dt - _tmp461 * dt - _tmp462 - _tmp463 - _tmp464
    _tmp466 = _tmp95 * sqrt_info[5, 6]
    _tmp467 = _tmp82 * sqrt_info[5, 7]
    _tmp468 = _tmp99 * sqrt_info[5, 8]
    _tmp469 = _tmp82 * sqrt_info[5, 4]
    _tmp470 = _tmp95 * sqrt_info[5, 3]
    _tmp471 = _tmp99 * sqrt_info[5, 5]
    _tmp472 = -_tmp466 * dt - _tmp467 * dt - _tmp468 * dt - _tmp469 - _tmp470 - _tmp471
    _tmp473 = _tmp95 * sqrt_info[6, 6]
    _tmp474 = _tmp82 * sqrt_info[6, 7]
    _tmp475 = _tmp99 * sqrt_info[6, 8]
    _tmp476 = _tmp82 * sqrt_info[6, 4]
    _tmp477 = _tmp95 * sqrt_info[6, 3]
    _tmp478 = _tmp99 * sqrt_info[6, 5]
    _tmp479 = -_tmp473 * dt - _tmp474 * dt - _tmp475 * dt - _tmp476 - _tmp477 - _tmp478
    _tmp480 = _tmp95 * sqrt_info[7, 6]
    _tmp481 = _tmp82 * sqrt_info[7, 7]
    _tmp482 = _tmp99 * sqrt_info[7, 8]
    _tmp483 = _tmp82 * sqrt_info[7, 4]
    _tmp484 = _tmp95 * sqrt_info[7, 3]
    _tmp485 = _tmp99 * sqrt_info[7, 5]
    _tmp486 = -_tmp480 * dt - _tmp481 * dt - _tmp482 * dt - _tmp483 - _tmp484 - _tmp485
    _tmp487 = _tmp95 * sqrt_info[8, 6]
    _tmp488 = _tmp82 * sqrt_info[8, 7]
    _tmp489 = _tmp99 * sqrt_info[8, 8]
    _tmp490 = _tmp82 * sqrt_info[8, 4]
    _tmp491 = _tmp95 * sqrt_info[8, 3]
    _tmp492 = _tmp99 * sqrt_info[8, 5]
    _tmp493 = -_tmp487 * dt - _tmp488 * dt - _tmp489 * dt - _tmp490 - _tmp491 - _tmp492
    _tmp494 = -_tmp305 - _tmp306 - _tmp307
    _tmp495 = -_tmp312 - _tmp313 - _tmp314
    _tmp496 = -_tmp319 - _tmp320 - _tmp321
    _tmp497 = -_tmp326 - _tmp327 - _tmp328
    _tmp498 = -_tmp333 - _tmp334 - _tmp335
    _tmp499 = -_tmp340 - _tmp341 - _tmp342
    _tmp500 = -_tmp347 - _tmp348 - _tmp349
    _tmp501 = -_tmp354 - _tmp355 - _tmp356
    _tmp502 = -_tmp361 - _tmp362 - _tmp363
    _tmp503 = -_tmp368 - _tmp369 - _tmp370
    _tmp504 = -_tmp375 - _tmp376 - _tmp377
    _tmp505 = -_tmp382 - _tmp383 - _tmp384
    _tmp506 = -_tmp389 - _tmp390 - _tmp391
    _tmp507 = -_tmp396 - _tmp397 - _tmp398
    _tmp508 = -_tmp403 - _tmp404 - _tmp405
    _tmp509 = -_tmp410 - _tmp411 - _tmp412
    _tmp510 = -_tmp417 - _tmp418 - _tmp419
    _tmp511 = -_tmp424 - _tmp425 - _tmp426
    _tmp512 = -_tmp431 - _tmp432 - _tmp433
    _tmp513 = -_tmp438 - _tmp439 - _tmp440
    _tmp514 = -_tmp445 - _tmp446 - _tmp447
    _tmp515 = -_tmp452 - _tmp453 - _tmp454
    _tmp516 = -_tmp459 - _tmp460 - _tmp461
    _tmp517 = -_tmp466 - _tmp467 - _tmp468
    _tmp518 = -_tmp473 - _tmp474 - _tmp475
    _tmp519 = -_tmp480 - _tmp481 - _tmp482
    _tmp520 = -_tmp487 - _tmp488 - _tmp489
    _tmp521 = (1.0 / 2.0) * _tmp105
    _tmp522 = (1.0 / 2.0) * _tmp106
    _tmp523 = (1.0 / 2.0) * _tmp107
    _tmp524 = (1.0 / 2.0) * _tmp108
    _tmp525 = -_tmp521 + _tmp522 + _tmp523 + _tmp524
    _tmp526 = _tmp171 * _tmp525
    _tmp527 = _tmp49 * _tmp526
    _tmp528 = _tmp205 * _tmp525
    _tmp529 = _tmp121 * _tmp526
    _tmp530 = _tmp109 * _tmp526
    _tmp531 = (1.0 / 2.0) * _tmp117
    _tmp532 = (1.0 / 2.0) * _tmp118
    _tmp533 = (1.0 / 2.0) * _tmp119
    _tmp534 = (1.0 / 2.0) * _tmp120
    _tmp535 = _tmp531 - _tmp532 + _tmp533 + _tmp534
    _tmp536 = _tmp187 * _tmp535
    _tmp537 = -1.0 / 2.0 * _tmp50 - 1.0 / 2.0 * _tmp51 - 1.0 / 2.0 * _tmp52 + (1.0 / 2.0) * _tmp54
    _tmp538 = _tmp187 * _tmp537
    _tmp539 = (1.0 / 2.0) * _tmp30
    _tmp540 = (1.0 / 2.0) * _tmp36
    _tmp541 = (1.0 / 2.0) * _tmp42
    _tmp542 = (1.0 / 2.0) * _tmp48
    _tmp543 = -_tmp539 - _tmp540 + _tmp541 - _tmp542
    _tmp544 = _tmp187 * _tmp543
    _tmp545 = _tmp201 * _tmp525
    _tmp546 = _tmp192 * _tmp525
    _tmp547 = (
        _tmp527 * sqrt_info[0, 1]
        - _tmp528 * sqrt_info[0, 2]
        + _tmp529 * sqrt_info[0, 2]
        + _tmp530 * sqrt_info[0, 0]
        + _tmp536 * sqrt_info[0, 1]
        + _tmp538 * sqrt_info[0, 0]
        + _tmp544 * sqrt_info[0, 2]
        - _tmp545 * sqrt_info[0, 1]
        - _tmp546 * sqrt_info[0, 0]
    )
    _tmp548 = (
        _tmp527 * sqrt_info[1, 1]
        - _tmp528 * sqrt_info[1, 2]
        + _tmp529 * sqrt_info[1, 2]
        + _tmp530 * sqrt_info[1, 0]
        + _tmp536 * sqrt_info[1, 1]
        + _tmp538 * sqrt_info[1, 0]
        + _tmp544 * sqrt_info[1, 2]
        - _tmp545 * sqrt_info[1, 1]
        - _tmp546 * sqrt_info[1, 0]
    )
    _tmp549 = (
        _tmp212 * _tmp543
        - _tmp214 * _tmp525
        + _tmp527 * sqrt_info[2, 1]
        + _tmp529 * sqrt_info[2, 2]
        + _tmp530 * sqrt_info[2, 0]
        + _tmp536 * sqrt_info[2, 1]
        + _tmp538 * sqrt_info[2, 0]
        - _tmp545 * sqrt_info[2, 1]
        - _tmp546 * sqrt_info[2, 0]
    )
    _tmp550 = _tmp205 * sqrt_info[3, 2]
    _tmp551 = (
        -_tmp525 * _tmp550
        + _tmp527 * sqrt_info[3, 1]
        + _tmp529 * sqrt_info[3, 2]
        + _tmp530 * sqrt_info[3, 0]
        + _tmp536 * sqrt_info[3, 1]
        + _tmp538 * sqrt_info[3, 0]
        + _tmp544 * sqrt_info[3, 2]
        - _tmp545 * sqrt_info[3, 1]
        - _tmp546 * sqrt_info[3, 0]
    )
    _tmp552 = (
        _tmp527 * sqrt_info[4, 1]
        - _tmp528 * sqrt_info[4, 2]
        + _tmp529 * sqrt_info[4, 2]
        + _tmp530 * sqrt_info[4, 0]
        + _tmp536 * sqrt_info[4, 1]
        + _tmp538 * sqrt_info[4, 0]
        + _tmp544 * sqrt_info[4, 2]
        - _tmp545 * sqrt_info[4, 1]
        - _tmp546 * sqrt_info[4, 0]
    )
    _tmp553 = (
        _tmp131 * _tmp526
        - _tmp220 * _tmp525
        - _tmp221 * _tmp525
        - _tmp528 * sqrt_info[5, 2]
        + _tmp529 * sqrt_info[5, 2]
        + _tmp530 * sqrt_info[5, 0]
        + _tmp536 * sqrt_info[5, 1]
        + _tmp538 * sqrt_info[5, 0]
        + _tmp544 * sqrt_info[5, 2]
    )
    _tmp554 = (
        _tmp223 * _tmp543
        + _tmp527 * sqrt_info[6, 1]
        - _tmp528 * sqrt_info[6, 2]
        + _tmp529 * sqrt_info[6, 2]
        + _tmp530 * sqrt_info[6, 0]
        + _tmp536 * sqrt_info[6, 1]
        + _tmp538 * sqrt_info[6, 0]
        - _tmp545 * sqrt_info[6, 1]
        - _tmp546 * sqrt_info[6, 0]
    )
    _tmp555 = (
        _tmp226 * _tmp535
        - _tmp227 * _tmp525
        + _tmp527 * sqrt_info[7, 1]
        - _tmp528 * sqrt_info[7, 2]
        + _tmp529 * sqrt_info[7, 2]
        + _tmp530 * sqrt_info[7, 0]
        + _tmp538 * sqrt_info[7, 0]
        + _tmp544 * sqrt_info[7, 2]
        - _tmp546 * sqrt_info[7, 0]
    )
    _tmp556 = (
        _tmp527 * sqrt_info[8, 1]
        - _tmp528 * sqrt_info[8, 2]
        + _tmp529 * sqrt_info[8, 2]
        + _tmp530 * sqrt_info[8, 0]
        + _tmp536 * sqrt_info[8, 1]
        + _tmp538 * sqrt_info[8, 0]
        + _tmp544 * sqrt_info[8, 2]
        - _tmp545 * sqrt_info[8, 1]
        - _tmp546 * sqrt_info[8, 0]
    )
    _tmp557 = _tmp539 + _tmp540 - _tmp541 + _tmp542
    _tmp558 = _tmp199 * _tmp557
    _tmp559 = -_tmp531 + _tmp532 - _tmp533 - _tmp534
    _tmp560 = _tmp187 * _tmp559
    _tmp561 = _tmp201 * _tmp557
    _tmp562 = _tmp205 * _tmp557
    _tmp563 = _tmp187 * _tmp525
    _tmp564 = _tmp172 * _tmp557
    _tmp565 = _tmp207 * _tmp557
    _tmp566 = _tmp192 * _tmp557
    _tmp567 = (
        _tmp538 * sqrt_info[0, 1]
        + _tmp558 * sqrt_info[0, 2]
        + _tmp560 * sqrt_info[0, 0]
        - _tmp561 * sqrt_info[0, 1]
        - _tmp562 * sqrt_info[0, 2]
        + _tmp563 * sqrt_info[0, 2]
        + _tmp564 * sqrt_info[0, 1]
        + _tmp565 * sqrt_info[0, 0]
        - _tmp566 * sqrt_info[0, 0]
    )
    _tmp568 = (
        _tmp210 * _tmp557
        + _tmp538 * sqrt_info[1, 1]
        + _tmp560 * sqrt_info[1, 0]
        - _tmp561 * sqrt_info[1, 1]
        - _tmp562 * sqrt_info[1, 2]
        + _tmp563 * sqrt_info[1, 2]
        + _tmp564 * sqrt_info[1, 1]
        + _tmp565 * sqrt_info[1, 0]
        - _tmp566 * sqrt_info[1, 0]
    )
    _tmp569 = (
        _tmp212 * _tmp525
        - _tmp214 * _tmp557
        + _tmp538 * sqrt_info[2, 1]
        + _tmp558 * sqrt_info[2, 2]
        + _tmp560 * sqrt_info[2, 0]
        - _tmp561 * sqrt_info[2, 1]
        + _tmp564 * sqrt_info[2, 1]
        + _tmp565 * sqrt_info[2, 0]
        - _tmp566 * sqrt_info[2, 0]
    )
    _tmp570 = (
        _tmp538 * sqrt_info[3, 1]
        + _tmp558 * sqrt_info[3, 2]
        + _tmp560 * sqrt_info[3, 0]
        - _tmp561 * sqrt_info[3, 1]
        - _tmp562 * sqrt_info[3, 2]
        + _tmp563 * sqrt_info[3, 2]
        + _tmp564 * sqrt_info[3, 1]
        + _tmp565 * sqrt_info[3, 0]
        - _tmp566 * sqrt_info[3, 0]
    )
    _tmp571 = (
        _tmp217 * _tmp557
        + _tmp538 * sqrt_info[4, 1]
        + _tmp560 * sqrt_info[4, 0]
        - _tmp561 * sqrt_info[4, 1]
        - _tmp562 * sqrt_info[4, 2]
        + _tmp563 * sqrt_info[4, 2]
        + _tmp564 * sqrt_info[4, 1]
        + _tmp565 * sqrt_info[4, 0]
        - _tmp566 * sqrt_info[4, 0]
    )
    _tmp572 = (
        _tmp219 * _tmp557
        - _tmp221 * _tmp557
        + _tmp538 * sqrt_info[5, 1]
        + _tmp558 * sqrt_info[5, 2]
        + _tmp560 * sqrt_info[5, 0]
        - _tmp562 * sqrt_info[5, 2]
        + _tmp563 * sqrt_info[5, 2]
        + _tmp565 * sqrt_info[5, 0]
        - _tmp566 * sqrt_info[5, 0]
    )
    _tmp573 = (
        _tmp223 * _tmp525
        + _tmp224 * _tmp557
        + _tmp538 * sqrt_info[6, 1]
        + _tmp558 * sqrt_info[6, 2]
        + _tmp560 * sqrt_info[6, 0]
        - _tmp561 * sqrt_info[6, 1]
        - _tmp562 * sqrt_info[6, 2]
        + _tmp564 * sqrt_info[6, 1]
        - _tmp566 * sqrt_info[6, 0]
    )
    _tmp574 = _tmp187 * sqrt_info[7, 0]
    _tmp575 = (
        _tmp226 * _tmp537
        - _tmp227 * _tmp557
        + _tmp558 * sqrt_info[7, 2]
        + _tmp559 * _tmp574
        - _tmp562 * sqrt_info[7, 2]
        + _tmp563 * sqrt_info[7, 2]
        + _tmp564 * sqrt_info[7, 1]
        + _tmp565 * sqrt_info[7, 0]
        - _tmp566 * sqrt_info[7, 0]
    )
    _tmp576 = (
        _tmp538 * sqrt_info[8, 1]
        + _tmp558 * sqrt_info[8, 2]
        + _tmp560 * sqrt_info[8, 0]
        - _tmp561 * sqrt_info[8, 1]
        - _tmp562 * sqrt_info[8, 2]
        + _tmp563 * sqrt_info[8, 2]
        + _tmp564 * sqrt_info[8, 1]
        + _tmp565 * sqrt_info[8, 0]
        - _tmp566 * sqrt_info[8, 0]
    )
    _tmp577 = _tmp199 * _tmp535
    _tmp578 = _tmp192 * _tmp535
    _tmp579 = _tmp521 - _tmp522 - _tmp523 - _tmp524
    _tmp580 = _tmp187 * _tmp579
    _tmp581 = _tmp201 * _tmp535
    _tmp582 = _tmp207 * _tmp535
    _tmp583 = _tmp205 * _tmp535
    _tmp584 = _tmp172 * _tmp535
    _tmp585 = _tmp187 * _tmp557
    _tmp586 = (
        _tmp538 * sqrt_info[0, 2]
        + _tmp577 * sqrt_info[0, 2]
        - _tmp578 * sqrt_info[0, 0]
        + _tmp580 * sqrt_info[0, 1]
        - _tmp581 * sqrt_info[0, 1]
        + _tmp582 * sqrt_info[0, 0]
        - _tmp583 * sqrt_info[0, 2]
        + _tmp584 * sqrt_info[0, 1]
        + _tmp585 * sqrt_info[0, 0]
    )
    _tmp587 = (
        _tmp210 * _tmp535
        + _tmp538 * sqrt_info[1, 2]
        - _tmp578 * sqrt_info[1, 0]
        + _tmp580 * sqrt_info[1, 1]
        - _tmp581 * sqrt_info[1, 1]
        + _tmp582 * sqrt_info[1, 0]
        - _tmp583 * sqrt_info[1, 2]
        + _tmp584 * sqrt_info[1, 1]
        + _tmp585 * sqrt_info[1, 0]
    )
    _tmp588 = (
        _tmp212 * _tmp537
        - _tmp213 * _tmp535
        - _tmp214 * _tmp535
        + _tmp577 * sqrt_info[2, 2]
        - _tmp578 * sqrt_info[2, 0]
        + _tmp580 * sqrt_info[2, 1]
        + _tmp582 * sqrt_info[2, 0]
        + _tmp584 * sqrt_info[2, 1]
        + _tmp585 * sqrt_info[2, 0]
    )
    _tmp589 = (
        -_tmp535 * _tmp550
        + _tmp538 * sqrt_info[3, 2]
        + _tmp577 * sqrt_info[3, 2]
        - _tmp578 * sqrt_info[3, 0]
        + _tmp580 * sqrt_info[3, 1]
        - _tmp581 * sqrt_info[3, 1]
        + _tmp582 * sqrt_info[3, 0]
        + _tmp584 * sqrt_info[3, 1]
        + _tmp585 * sqrt_info[3, 0]
    )
    _tmp590 = (
        _tmp217 * _tmp535
        + _tmp538 * sqrt_info[4, 2]
        - _tmp578 * sqrt_info[4, 0]
        + _tmp580 * sqrt_info[4, 1]
        - _tmp581 * sqrt_info[4, 1]
        + _tmp582 * sqrt_info[4, 0]
        - _tmp583 * sqrt_info[4, 2]
        + _tmp584 * sqrt_info[4, 1]
        + _tmp585 * sqrt_info[4, 0]
    )
    _tmp591 = (
        _tmp219 * _tmp535
        - _tmp220 * _tmp535
        - _tmp221 * _tmp535
        + _tmp538 * sqrt_info[5, 2]
        + _tmp577 * sqrt_info[5, 2]
        + _tmp580 * sqrt_info[5, 1]
        + _tmp582 * sqrt_info[5, 0]
        - _tmp583 * sqrt_info[5, 2]
        + _tmp585 * sqrt_info[5, 0]
    )
    _tmp592 = (
        _tmp223 * _tmp537
        + _tmp577 * sqrt_info[6, 2]
        - _tmp578 * sqrt_info[6, 0]
        + _tmp580 * sqrt_info[6, 1]
        - _tmp581 * sqrt_info[6, 1]
        + _tmp582 * sqrt_info[6, 0]
        - _tmp583 * sqrt_info[6, 2]
        + _tmp584 * sqrt_info[6, 1]
        + _tmp585 * sqrt_info[6, 0]
    )
    _tmp593 = (
        _tmp226 * _tmp579
        - _tmp227 * _tmp535
        + _tmp538 * sqrt_info[7, 2]
        + _tmp557 * _tmp574
        + _tmp577 * sqrt_info[7, 2]
        - _tmp578 * sqrt_info[7, 0]
        + _tmp582 * sqrt_info[7, 0]
        - _tmp583 * sqrt_info[7, 2]
        + _tmp584 * sqrt_info[7, 1]
    )
    _tmp594 = (
        _tmp538 * sqrt_info[8, 2]
        + _tmp577 * sqrt_info[8, 2]
        - _tmp578 * sqrt_info[8, 0]
        + _tmp580 * sqrt_info[8, 1]
        - _tmp581 * sqrt_info[8, 1]
        + _tmp582 * sqrt_info[8, 0]
        - _tmp583 * sqrt_info[8, 2]
        + _tmp584 * sqrt_info[8, 1]
        + _tmp585 * sqrt_info[8, 0]
    )
    _tmp595 = _tmp308 + _tmp309 + _tmp310
    _tmp596 = _tmp315 + _tmp316 + _tmp317
    _tmp597 = _tmp322 + _tmp323 + _tmp324
    _tmp598 = _tmp329 + _tmp330 + _tmp331
    _tmp599 = _tmp336 + _tmp337 + _tmp338
    _tmp600 = _tmp343 + _tmp344 + _tmp345
    _tmp601 = _tmp350 + _tmp351 + _tmp352
    _tmp602 = _tmp357 + _tmp358 + _tmp359
    _tmp603 = _tmp364 + _tmp365 + _tmp366
    _tmp604 = _tmp371 + _tmp372 + _tmp373
    _tmp605 = _tmp378 + _tmp379 + _tmp380
    _tmp606 = _tmp385 + _tmp386 + _tmp387
    _tmp607 = _tmp392 + _tmp393 + _tmp394
    _tmp608 = _tmp399 + _tmp400 + _tmp401
    _tmp609 = _tmp406 + _tmp407 + _tmp408
    _tmp610 = _tmp413 + _tmp414 + _tmp415
    _tmp611 = _tmp420 + _tmp421 + _tmp422
    _tmp612 = _tmp427 + _tmp428 + _tmp429
    _tmp613 = _tmp434 + _tmp435 + _tmp436
    _tmp614 = _tmp441 + _tmp442 + _tmp443
    _tmp615 = _tmp448 + _tmp449 + _tmp450
    _tmp616 = _tmp455 + _tmp456 + _tmp457
    _tmp617 = _tmp462 + _tmp463 + _tmp464
    _tmp618 = _tmp469 + _tmp470 + _tmp471
    _tmp619 = _tmp476 + _tmp477 + _tmp478
    _tmp620 = _tmp483 + _tmp484 + _tmp485
    _tmp621 = _tmp490 + _tmp491 + _tmp492
    _tmp622 = _tmp305 + _tmp306 + _tmp307
    _tmp623 = _tmp312 + _tmp313 + _tmp314
    _tmp624 = _tmp319 + _tmp320 + _tmp321
    _tmp625 = _tmp326 + _tmp327 + _tmp328
    _tmp626 = _tmp333 + _tmp334 + _tmp335
    _tmp627 = _tmp340 + _tmp341 + _tmp342
    _tmp628 = _tmp347 + _tmp348 + _tmp349
    _tmp629 = _tmp354 + _tmp355 + _tmp356
    _tmp630 = _tmp361 + _tmp362 + _tmp363
    _tmp631 = _tmp368 + _tmp369 + _tmp370
    _tmp632 = _tmp375 + _tmp376 + _tmp377
    _tmp633 = _tmp382 + _tmp383 + _tmp384
    _tmp634 = _tmp389 + _tmp390 + _tmp391
    _tmp635 = _tmp396 + _tmp397 + _tmp398
    _tmp636 = _tmp403 + _tmp404 + _tmp405
    _tmp637 = _tmp410 + _tmp411 + _tmp412
    _tmp638 = _tmp417 + _tmp418 + _tmp419
    _tmp639 = _tmp424 + _tmp425 + _tmp426
    _tmp640 = _tmp431 + _tmp432 + _tmp433
    _tmp641 = _tmp438 + _tmp439 + _tmp440
    _tmp642 = _tmp445 + _tmp446 + _tmp447
    _tmp643 = _tmp452 + _tmp453 + _tmp454
    _tmp644 = _tmp459 + _tmp460 + _tmp461
    _tmp645 = _tmp466 + _tmp467 + _tmp468
    _tmp646 = _tmp473 + _tmp474 + _tmp475
    _tmp647 = _tmp480 + _tmp481 + _tmp482
    _tmp648 = _tmp487 + _tmp488 + _tmp489
    _tmp649 = 2 * _tmp3
    _tmp650 = 2 * _tmp4
    _tmp651 = 2 * _tmp5
    _tmp652 = (
        DR_D_gyro_bias[0, 0] * _tmp649
        + DR_D_gyro_bias[1, 0] * _tmp650
        + DR_D_gyro_bias[2, 0] * _tmp651
    )
    _tmp653 = (1.0 / 4.0) * _tmp18
    _tmp654 = 1 / _tmp6
    _tmp655 = _tmp3 * _tmp654
    _tmp656 = _tmp653 * _tmp655
    _tmp657 = (1.0 / 2.0) * _tmp11 / _tmp6 ** (3.0 / 2.0)
    _tmp658 = _tmp652 * _tmp657
    _tmp659 = _tmp5 * _tmp658
    _tmp660 = _tmp3 * _tmp658
    _tmp661 = (1.0 / 4.0) * _tmp15
    _tmp662 = _tmp4 * _tmp652
    _tmp663 = _tmp654 * _tmp662
    _tmp664 = (1.0 / 4.0) * _tmp10
    _tmp665 = _tmp5 * _tmp654
    _tmp666 = (1.0 / 4.0) * _tmp652
    _tmp667 = _tmp23 * _tmp666
    _tmp668 = _tmp657 * _tmp662
    _tmp669 = (
        -DR_D_gyro_bias[0, 0] * _tmp14
        - DR_D_gyro_bias[1, 0] * _tmp20
        - DR_D_gyro_bias[2, 0] * _tmp19
        + _DR[0] * _tmp660
        + _DR[1] * _tmp668
        + _DR[2] * _tmp659
        - _tmp652 * _tmp656
        - _tmp652 * _tmp661
        - _tmp663 * _tmp664
        - _tmp665 * _tmp667
    )
    _tmp670 = _tmp26 * _tmp654
    _tmp671 = (1.0 / 4.0) * _tmp670
    _tmp672 = _tmp652 * _tmp671
    _tmp673 = (1.0 / 4.0) * _tmp14
    _tmp674 = _tmp10 * _tmp665
    _tmp675 = (1.0 / 4.0) * _tmp23
    _tmp676 = (
        DR_D_gyro_bias[0, 0] * _tmp15
        - DR_D_gyro_bias[1, 0] * _tmp19
        + DR_D_gyro_bias[2, 0] * _tmp20
        - _DR[1] * _tmp659
        + _DR[2] * _tmp668
        - _DR[3] * _tmp660
        + _tmp3 * _tmp672
        - _tmp652 * _tmp673
        - _tmp663 * _tmp675
        + _tmp666 * _tmp674
    )
    _tmp677 = (1.0 / 4.0) * _tmp19
    _tmp678 = _tmp10 * _tmp655
    _tmp679 = _DR[1] * _tmp3
    _tmp680 = (
        -DR_D_gyro_bias[0, 0] * _tmp20
        + DR_D_gyro_bias[1, 0] * _tmp14
        + DR_D_gyro_bias[2, 0] * _tmp15
        - _DR[0] * _tmp668
        - _DR[3] * _tmp659
        + _tmp5 * _tmp672
        - _tmp652 * _tmp677
        + _tmp653 * _tmp663
        + _tmp658 * _tmp679
        - _tmp666 * _tmp678
    )
    _tmp681 = _tmp653 * _tmp665
    _tmp682 = _DR[2] * _tmp3
    _tmp683 = (1.0 / 4.0) * _tmp20
    _tmp684 = (
        DR_D_gyro_bias[0, 0] * _tmp19
        + DR_D_gyro_bias[1, 0] * _tmp15
        - DR_D_gyro_bias[2, 0] * _tmp14
        + _DR[0] * _tmp659
        - _DR[3] * _tmp668
        - _tmp652 * _tmp681
        - _tmp652 * _tmp683
        + _tmp655 * _tmp667
        - _tmp658 * _tmp682
        + _tmp662 * _tmp671
    )
    _tmp685 = _rot_i[0] * _tmp680 - _rot_i[1] * _tmp669 - _rot_i[2] * _tmp676 - _rot_i[3] * _tmp684
    _tmp686 = -_rot_i[0] * _tmp669 - _rot_i[1] * _tmp680 + _rot_i[2] * _tmp684 - _rot_i[3] * _tmp676
    _tmp687 = -_rot_i[0] * _tmp684 + _rot_i[1] * _tmp676 - _rot_i[2] * _tmp669 - _rot_i[3] * _tmp680
    _tmp688 = -_rot_i[0] * _tmp676 - _rot_i[1] * _tmp684 - _rot_i[2] * _tmp680 + _rot_i[3] * _tmp669
    _tmp689 = _rot_j[0] * _tmp686 + _rot_j[1] * _tmp685 + _rot_j[2] * _tmp687 - _rot_j[3] * _tmp688
    _tmp690 = _tmp199 * _tmp689
    _tmp691 = _tmp205 * _tmp689
    _tmp692 = _tmp207 * _tmp689
    _tmp693 = _tmp172 * _tmp689
    _tmp694 = _tmp192 * _tmp689
    _tmp695 = _tmp201 * _tmp689
    _tmp696 = _rot_j[0] * _tmp688 - _rot_j[1] * _tmp687 + _rot_j[2] * _tmp685 + _rot_j[3] * _tmp686
    _tmp697 = _tmp187 * _tmp696
    _tmp698 = _tmp187 * (
        _rot_j[0] * _tmp687 + _rot_j[1] * _tmp688 - _rot_j[2] * _tmp686 + _rot_j[3] * _tmp685
    )
    _tmp699 = -_rot_j[0] * _tmp685 + _rot_j[1] * _tmp686 + _rot_j[2] * _tmp688 + _rot_j[3] * _tmp687
    _tmp700 = _tmp187 * _tmp699
    _tmp701 = (
        -Dp_D_gyro_bias[0, 0] * sqrt_info[0, 6]
        - Dp_D_gyro_bias[1, 0] * sqrt_info[0, 7]
        - Dp_D_gyro_bias[2, 0] * sqrt_info[0, 8]
        - Dv_D_gyro_bias[0, 0] * sqrt_info[0, 3]
        - Dv_D_gyro_bias[1, 0] * sqrt_info[0, 4]
        - Dv_D_gyro_bias[2, 0] * sqrt_info[0, 5]
        + _tmp690 * sqrt_info[0, 2]
        - _tmp691 * sqrt_info[0, 2]
        + _tmp692 * sqrt_info[0, 0]
        + _tmp693 * sqrt_info[0, 1]
        - _tmp694 * sqrt_info[0, 0]
        - _tmp695 * sqrt_info[0, 1]
        + _tmp697 * sqrt_info[0, 0]
        + _tmp698 * sqrt_info[0, 1]
        + _tmp700 * sqrt_info[0, 2]
    )
    _tmp702 = (
        -Dp_D_gyro_bias[0, 0] * sqrt_info[1, 6]
        - Dp_D_gyro_bias[1, 0] * sqrt_info[1, 7]
        - Dp_D_gyro_bias[2, 0] * sqrt_info[1, 8]
        - Dv_D_gyro_bias[0, 0] * sqrt_info[1, 3]
        - Dv_D_gyro_bias[1, 0] * sqrt_info[1, 4]
        - Dv_D_gyro_bias[2, 0] * sqrt_info[1, 5]
        + _tmp210 * _tmp689
        - _tmp691 * sqrt_info[1, 2]
        + _tmp692 * sqrt_info[1, 0]
        + _tmp693 * sqrt_info[1, 1]
        - _tmp694 * sqrt_info[1, 0]
        - _tmp695 * sqrt_info[1, 1]
        + _tmp697 * sqrt_info[1, 0]
        + _tmp698 * sqrt_info[1, 1]
        + _tmp700 * sqrt_info[1, 2]
    )
    _tmp703 = (
        -Dp_D_gyro_bias[0, 0] * sqrt_info[2, 6]
        - Dp_D_gyro_bias[1, 0] * sqrt_info[2, 7]
        - Dp_D_gyro_bias[2, 0] * sqrt_info[2, 8]
        - Dv_D_gyro_bias[0, 0] * sqrt_info[2, 3]
        - Dv_D_gyro_bias[1, 0] * sqrt_info[2, 4]
        - Dv_D_gyro_bias[2, 0] * sqrt_info[2, 5]
        + _tmp212 * _tmp699
        - _tmp213 * _tmp689
        - _tmp214 * _tmp689
        + _tmp690 * sqrt_info[2, 2]
        + _tmp692 * sqrt_info[2, 0]
        + _tmp693 * sqrt_info[2, 1]
        - _tmp694 * sqrt_info[2, 0]
        + _tmp697 * sqrt_info[2, 0]
        + _tmp698 * sqrt_info[2, 1]
    )
    _tmp704 = (
        -Dp_D_gyro_bias[0, 0] * sqrt_info[3, 6]
        - Dp_D_gyro_bias[1, 0] * sqrt_info[3, 7]
        - Dp_D_gyro_bias[2, 0] * sqrt_info[3, 8]
        - Dv_D_gyro_bias[0, 0] * sqrt_info[3, 3]
        - Dv_D_gyro_bias[1, 0] * sqrt_info[3, 4]
        - Dv_D_gyro_bias[2, 0] * sqrt_info[3, 5]
        + _tmp690 * sqrt_info[3, 2]
        - _tmp691 * sqrt_info[3, 2]
        + _tmp692 * sqrt_info[3, 0]
        + _tmp693 * sqrt_info[3, 1]
        - _tmp694 * sqrt_info[3, 0]
        - _tmp695 * sqrt_info[3, 1]
        + _tmp697 * sqrt_info[3, 0]
        + _tmp698 * sqrt_info[3, 1]
        + _tmp700 * sqrt_info[3, 2]
    )
    _tmp705 = (
        -Dp_D_gyro_bias[0, 0] * sqrt_info[4, 6]
        - Dp_D_gyro_bias[1, 0] * sqrt_info[4, 7]
        - Dp_D_gyro_bias[2, 0] * sqrt_info[4, 8]
        - Dv_D_gyro_bias[0, 0] * sqrt_info[4, 3]
        - Dv_D_gyro_bias[1, 0] * sqrt_info[4, 4]
        - Dv_D_gyro_bias[2, 0] * sqrt_info[4, 5]
        + _tmp217 * _tmp689
        - _tmp264 * _tmp689
        - _tmp691 * sqrt_info[4, 2]
        + _tmp692 * sqrt_info[4, 0]
        + _tmp693 * sqrt_info[4, 1]
        - _tmp694 * sqrt_info[4, 0]
        + _tmp697 * sqrt_info[4, 0]
        + _tmp698 * sqrt_info[4, 1]
        + _tmp700 * sqrt_info[4, 2]
    )
    _tmp706 = (
        -Dp_D_gyro_bias[0, 0] * sqrt_info[5, 6]
        - Dp_D_gyro_bias[1, 0] * sqrt_info[5, 7]
        - Dp_D_gyro_bias[2, 0] * sqrt_info[5, 8]
        - Dv_D_gyro_bias[0, 0] * sqrt_info[5, 3]
        - Dv_D_gyro_bias[1, 0] * sqrt_info[5, 4]
        - Dv_D_gyro_bias[2, 0] * sqrt_info[5, 5]
        + _tmp219 * _tmp689
        - _tmp220 * _tmp689
        - _tmp221 * _tmp689
        + _tmp690 * sqrt_info[5, 2]
        - _tmp691 * sqrt_info[5, 2]
        + _tmp692 * sqrt_info[5, 0]
        + _tmp697 * sqrt_info[5, 0]
        + _tmp698 * sqrt_info[5, 1]
        + _tmp700 * sqrt_info[5, 2]
    )
    _tmp707 = (
        -Dp_D_gyro_bias[0, 0] * sqrt_info[6, 6]
        - Dp_D_gyro_bias[1, 0] * sqrt_info[6, 7]
        - Dp_D_gyro_bias[2, 0] * sqrt_info[6, 8]
        - Dv_D_gyro_bias[0, 0] * sqrt_info[6, 3]
        - Dv_D_gyro_bias[1, 0] * sqrt_info[6, 4]
        - Dv_D_gyro_bias[2, 0] * sqrt_info[6, 5]
        + _tmp223 * _tmp699
        + _tmp224 * _tmp689
        + _tmp690 * sqrt_info[6, 2]
        - _tmp691 * sqrt_info[6, 2]
        + _tmp693 * sqrt_info[6, 1]
        - _tmp694 * sqrt_info[6, 0]
        - _tmp695 * sqrt_info[6, 1]
        + _tmp697 * sqrt_info[6, 0]
        + _tmp698 * sqrt_info[6, 1]
    )
    _tmp708 = (
        -Dp_D_gyro_bias[0, 0] * sqrt_info[7, 6]
        - Dp_D_gyro_bias[1, 0] * sqrt_info[7, 7]
        - Dp_D_gyro_bias[2, 0] * sqrt_info[7, 8]
        - Dv_D_gyro_bias[0, 0] * sqrt_info[7, 3]
        - Dv_D_gyro_bias[1, 0] * sqrt_info[7, 4]
        - Dv_D_gyro_bias[2, 0] * sqrt_info[7, 5]
        - _tmp227 * _tmp689
        + _tmp574 * _tmp696
        + _tmp690 * sqrt_info[7, 2]
        - _tmp691 * sqrt_info[7, 2]
        + _tmp692 * sqrt_info[7, 0]
        + _tmp693 * sqrt_info[7, 1]
        - _tmp694 * sqrt_info[7, 0]
        + _tmp698 * sqrt_info[7, 1]
        + _tmp700 * sqrt_info[7, 2]
    )
    _tmp709 = (
        -Dp_D_gyro_bias[0, 0] * sqrt_info[8, 6]
        - Dp_D_gyro_bias[1, 0] * sqrt_info[8, 7]
        - Dp_D_gyro_bias[2, 0] * sqrt_info[8, 8]
        - Dv_D_gyro_bias[0, 0] * sqrt_info[8, 3]
        - Dv_D_gyro_bias[1, 0] * sqrt_info[8, 4]
        - Dv_D_gyro_bias[2, 0] * sqrt_info[8, 5]
        - _tmp269 * _tmp689
        + _tmp690 * sqrt_info[8, 2]
        - _tmp691 * sqrt_info[8, 2]
        + _tmp692 * sqrt_info[8, 0]
        + _tmp693 * sqrt_info[8, 1]
        - _tmp694 * sqrt_info[8, 0]
        + _tmp697 * sqrt_info[8, 0]
        + _tmp698 * sqrt_info[8, 1]
        + _tmp700 * sqrt_info[8, 2]
    )
    _tmp710 = (
        DR_D_gyro_bias[0, 1] * _tmp649
        + DR_D_gyro_bias[1, 1] * _tmp650
        + DR_D_gyro_bias[2, 1] * _tmp651
    )
    _tmp711 = _tmp671 * _tmp710
    _tmp712 = _tmp657 * _tmp710
    _tmp713 = _DR[3] * _tmp712
    _tmp714 = _DR[2] * _tmp712
    _tmp715 = (1.0 / 4.0) * _tmp710
    _tmp716 = _tmp4 * _tmp654
    _tmp717 = _tmp710 * _tmp716
    _tmp718 = _DR[1] * _tmp712
    _tmp719 = (
        DR_D_gyro_bias[0, 1] * _tmp15
        - DR_D_gyro_bias[1, 1] * _tmp19
        + DR_D_gyro_bias[2, 1] * _tmp20
        + _tmp3 * _tmp711
        - _tmp3 * _tmp713
        + _tmp4 * _tmp714
        - _tmp5 * _tmp718
        - _tmp673 * _tmp710
        + _tmp674 * _tmp715
        - _tmp675 * _tmp717
    )
    _tmp720 = _DR[0] * _tmp712
    _tmp721 = (
        -DR_D_gyro_bias[0, 1] * _tmp20
        + DR_D_gyro_bias[1, 1] * _tmp14
        + DR_D_gyro_bias[2, 1] * _tmp15
        - _tmp4 * _tmp720
        + _tmp5 * _tmp711
        - _tmp5 * _tmp713
        + _tmp653 * _tmp717
        - _tmp677 * _tmp710
        - _tmp678 * _tmp715
        + _tmp679 * _tmp712
    )
    _tmp722 = _tmp23 * _tmp715
    _tmp723 = (
        -DR_D_gyro_bias[0, 1] * _tmp14
        - DR_D_gyro_bias[1, 1] * _tmp20
        - DR_D_gyro_bias[2, 1] * _tmp19
        + _tmp3 * _tmp720
        + _tmp4 * _tmp718
        + _tmp5 * _tmp714
        - _tmp656 * _tmp710
        - _tmp661 * _tmp710
        - _tmp664 * _tmp717
        - _tmp665 * _tmp722
    )
    _tmp724 = (
        DR_D_gyro_bias[0, 1] * _tmp19
        + DR_D_gyro_bias[1, 1] * _tmp15
        - DR_D_gyro_bias[2, 1] * _tmp14
        + _tmp4 * _tmp711
        - _tmp4 * _tmp713
        + _tmp5 * _tmp720
        + _tmp655 * _tmp722
        - _tmp681 * _tmp710
        - _tmp682 * _tmp712
        - _tmp683 * _tmp710
    )
    _tmp725 = -_rot_i[0] * _tmp723 - _rot_i[1] * _tmp721 + _rot_i[2] * _tmp724 - _rot_i[3] * _tmp719
    _tmp726 = -_rot_i[0] * _tmp719 - _rot_i[1] * _tmp724 - _rot_i[2] * _tmp721 + _rot_i[3] * _tmp723
    _tmp727 = -_rot_i[0] * _tmp724 + _rot_i[1] * _tmp719 - _rot_i[2] * _tmp723 - _rot_i[3] * _tmp721
    _tmp728 = _rot_i[0] * _tmp721 - _rot_i[1] * _tmp723 - _rot_i[2] * _tmp719 - _rot_i[3] * _tmp724
    _tmp729 = _rot_j[0] * _tmp725 + _rot_j[1] * _tmp728 + _rot_j[2] * _tmp727 - _rot_j[3] * _tmp726
    _tmp730 = _tmp201 * _tmp729
    _tmp731 = _tmp207 * _tmp729
    _tmp732 = _tmp199 * _tmp729
    _tmp733 = _tmp172 * _tmp729
    _tmp734 = _tmp187 * (
        _rot_j[0] * _tmp726 - _rot_j[1] * _tmp727 + _rot_j[2] * _tmp728 + _rot_j[3] * _tmp725
    )
    _tmp735 = -_rot_j[0] * _tmp728 + _rot_j[1] * _tmp725 + _rot_j[2] * _tmp726 + _rot_j[3] * _tmp727
    _tmp736 = _tmp187 * _tmp735
    _tmp737 = _tmp192 * _tmp729
    _tmp738 = _tmp187 * (
        _rot_j[0] * _tmp727 + _rot_j[1] * _tmp726 - _rot_j[2] * _tmp725 + _rot_j[3] * _tmp728
    )
    _tmp739 = _tmp205 * _tmp729
    _tmp740 = (
        -Dp_D_gyro_bias[0, 1] * sqrt_info[0, 6]
        - Dp_D_gyro_bias[1, 1] * sqrt_info[0, 7]
        - Dp_D_gyro_bias[2, 1] * sqrt_info[0, 8]
        - Dv_D_gyro_bias[0, 1] * sqrt_info[0, 3]
        - Dv_D_gyro_bias[1, 1] * sqrt_info[0, 4]
        - Dv_D_gyro_bias[2, 1] * sqrt_info[0, 5]
        - _tmp730 * sqrt_info[0, 1]
        + _tmp731 * sqrt_info[0, 0]
        + _tmp732 * sqrt_info[0, 2]
        + _tmp733 * sqrt_info[0, 1]
        + _tmp734 * sqrt_info[0, 0]
        + _tmp736 * sqrt_info[0, 2]
        - _tmp737 * sqrt_info[0, 0]
        + _tmp738 * sqrt_info[0, 1]
        - _tmp739 * sqrt_info[0, 2]
    )
    _tmp741 = (
        -Dp_D_gyro_bias[0, 1] * sqrt_info[1, 6]
        - Dp_D_gyro_bias[1, 1] * sqrt_info[1, 7]
        - Dp_D_gyro_bias[2, 1] * sqrt_info[1, 8]
        - Dv_D_gyro_bias[0, 1] * sqrt_info[1, 3]
        - Dv_D_gyro_bias[1, 1] * sqrt_info[1, 4]
        - Dv_D_gyro_bias[2, 1] * sqrt_info[1, 5]
        + _tmp210 * _tmp729
        - _tmp730 * sqrt_info[1, 1]
        + _tmp731 * sqrt_info[1, 0]
        + _tmp733 * sqrt_info[1, 1]
        + _tmp734 * sqrt_info[1, 0]
        + _tmp736 * sqrt_info[1, 2]
        - _tmp737 * sqrt_info[1, 0]
        + _tmp738 * sqrt_info[1, 1]
        - _tmp739 * sqrt_info[1, 2]
    )
    _tmp742 = (
        -Dp_D_gyro_bias[0, 1] * sqrt_info[2, 6]
        - Dp_D_gyro_bias[1, 1] * sqrt_info[2, 7]
        - Dp_D_gyro_bias[2, 1] * sqrt_info[2, 8]
        - Dv_D_gyro_bias[0, 1] * sqrt_info[2, 3]
        - Dv_D_gyro_bias[1, 1] * sqrt_info[2, 4]
        - Dv_D_gyro_bias[2, 1] * sqrt_info[2, 5]
        + _tmp212 * _tmp735
        - _tmp214 * _tmp729
        - _tmp730 * sqrt_info[2, 1]
        + _tmp731 * sqrt_info[2, 0]
        + _tmp732 * sqrt_info[2, 2]
        + _tmp733 * sqrt_info[2, 1]
        + _tmp734 * sqrt_info[2, 0]
        - _tmp737 * sqrt_info[2, 0]
        + _tmp738 * sqrt_info[2, 1]
    )
    _tmp743 = (
        -Dp_D_gyro_bias[0, 1] * sqrt_info[3, 6]
        - Dp_D_gyro_bias[1, 1] * sqrt_info[3, 7]
        - Dp_D_gyro_bias[2, 1] * sqrt_info[3, 8]
        - Dv_D_gyro_bias[0, 1] * sqrt_info[3, 3]
        - Dv_D_gyro_bias[1, 1] * sqrt_info[3, 4]
        - Dv_D_gyro_bias[2, 1] * sqrt_info[3, 5]
        - _tmp730 * sqrt_info[3, 1]
        + _tmp731 * sqrt_info[3, 0]
        + _tmp732 * sqrt_info[3, 2]
        + _tmp733 * sqrt_info[3, 1]
        + _tmp734 * sqrt_info[3, 0]
        + _tmp736 * sqrt_info[3, 2]
        - _tmp737 * sqrt_info[3, 0]
        + _tmp738 * sqrt_info[3, 1]
        - _tmp739 * sqrt_info[3, 2]
    )
    _tmp744 = (
        -Dp_D_gyro_bias[0, 1] * sqrt_info[4, 6]
        - Dp_D_gyro_bias[1, 1] * sqrt_info[4, 7]
        - Dp_D_gyro_bias[2, 1] * sqrt_info[4, 8]
        - Dv_D_gyro_bias[0, 1] * sqrt_info[4, 3]
        - Dv_D_gyro_bias[1, 1] * sqrt_info[4, 4]
        - Dv_D_gyro_bias[2, 1] * sqrt_info[4, 5]
        - _tmp730 * sqrt_info[4, 1]
        + _tmp731 * sqrt_info[4, 0]
        + _tmp732 * sqrt_info[4, 2]
        + _tmp733 * sqrt_info[4, 1]
        + _tmp734 * sqrt_info[4, 0]
        + _tmp736 * sqrt_info[4, 2]
        - _tmp737 * sqrt_info[4, 0]
        + _tmp738 * sqrt_info[4, 1]
        - _tmp739 * sqrt_info[4, 2]
    )
    _tmp745 = (
        -Dp_D_gyro_bias[0, 1] * sqrt_info[5, 6]
        - Dp_D_gyro_bias[1, 1] * sqrt_info[5, 7]
        - Dp_D_gyro_bias[2, 1] * sqrt_info[5, 8]
        - Dv_D_gyro_bias[0, 1] * sqrt_info[5, 3]
        - Dv_D_gyro_bias[1, 1] * sqrt_info[5, 4]
        - Dv_D_gyro_bias[2, 1] * sqrt_info[5, 5]
        + _tmp219 * _tmp729
        - _tmp220 * _tmp729
        - _tmp221 * _tmp729
        + _tmp731 * sqrt_info[5, 0]
        + _tmp732 * sqrt_info[5, 2]
        + _tmp734 * sqrt_info[5, 0]
        + _tmp736 * sqrt_info[5, 2]
        + _tmp738 * sqrt_info[5, 1]
        - _tmp739 * sqrt_info[5, 2]
    )
    _tmp746 = (
        -Dp_D_gyro_bias[0, 1] * sqrt_info[6, 6]
        - Dp_D_gyro_bias[1, 1] * sqrt_info[6, 7]
        - Dp_D_gyro_bias[2, 1] * sqrt_info[6, 8]
        - Dv_D_gyro_bias[0, 1] * sqrt_info[6, 3]
        - Dv_D_gyro_bias[1, 1] * sqrt_info[6, 4]
        - Dv_D_gyro_bias[2, 1] * sqrt_info[6, 5]
        + _tmp223 * _tmp735
        - _tmp730 * sqrt_info[6, 1]
        + _tmp731 * sqrt_info[6, 0]
        + _tmp732 * sqrt_info[6, 2]
        + _tmp733 * sqrt_info[6, 1]
        + _tmp734 * sqrt_info[6, 0]
        - _tmp737 * sqrt_info[6, 0]
        + _tmp738 * sqrt_info[6, 1]
        - _tmp739 * sqrt_info[6, 2]
    )
    _tmp747 = (
        -Dp_D_gyro_bias[0, 1] * sqrt_info[7, 6]
        - Dp_D_gyro_bias[1, 1] * sqrt_info[7, 7]
        - Dp_D_gyro_bias[2, 1] * sqrt_info[7, 8]
        - Dv_D_gyro_bias[0, 1] * sqrt_info[7, 3]
        - Dv_D_gyro_bias[1, 1] * sqrt_info[7, 4]
        - Dv_D_gyro_bias[2, 1] * sqrt_info[7, 5]
        - _tmp227 * _tmp729
        + _tmp731 * sqrt_info[7, 0]
        + _tmp732 * sqrt_info[7, 2]
        + _tmp733 * sqrt_info[7, 1]
        + _tmp734 * sqrt_info[7, 0]
        + _tmp736 * sqrt_info[7, 2]
        - _tmp737 * sqrt_info[7, 0]
        + _tmp738 * sqrt_info[7, 1]
        - _tmp739 * sqrt_info[7, 2]
    )
    _tmp748 = (
        -Dp_D_gyro_bias[0, 1] * sqrt_info[8, 6]
        - Dp_D_gyro_bias[1, 1] * sqrt_info[8, 7]
        - Dp_D_gyro_bias[2, 1] * sqrt_info[8, 8]
        - Dv_D_gyro_bias[0, 1] * sqrt_info[8, 3]
        - Dv_D_gyro_bias[1, 1] * sqrt_info[8, 4]
        - Dv_D_gyro_bias[2, 1] * sqrt_info[8, 5]
        - _tmp730 * sqrt_info[8, 1]
        + _tmp731 * sqrt_info[8, 0]
        + _tmp732 * sqrt_info[8, 2]
        + _tmp733 * sqrt_info[8, 1]
        + _tmp734 * sqrt_info[8, 0]
        + _tmp736 * sqrt_info[8, 2]
        - _tmp737 * sqrt_info[8, 0]
        + _tmp738 * sqrt_info[8, 1]
        - _tmp739 * sqrt_info[8, 2]
    )
    _tmp749 = (
        DR_D_gyro_bias[0, 2] * _tmp649
        + DR_D_gyro_bias[1, 2] * _tmp650
        + DR_D_gyro_bias[2, 2] * _tmp651
    )
    _tmp750 = _tmp657 * _tmp749
    _tmp751 = _tmp5 * _tmp750
    _tmp752 = (1.0 / 4.0) * _tmp749
    _tmp753 = _tmp18 * _tmp752
    _tmp754 = _tmp23 * _tmp752
    _tmp755 = _tmp4 * _tmp750
    _tmp756 = (
        -DR_D_gyro_bias[0, 2] * _tmp14
        - DR_D_gyro_bias[1, 2] * _tmp20
        - DR_D_gyro_bias[2, 2] * _tmp19
        + _DR[0] * _tmp3 * _tmp750
        + _DR[1] * _tmp755
        + _DR[2] * _tmp751
        - _tmp10 * _tmp716 * _tmp752
        - _tmp15 * _tmp752
        - _tmp655 * _tmp753
        - _tmp665 * _tmp754
    )
    _tmp757 = _tmp670 * _tmp752
    _tmp758 = _DR[3] * _tmp750
    _tmp759 = _DR[2] * _tmp750
    _tmp760 = (
        DR_D_gyro_bias[0, 2] * _tmp19
        + DR_D_gyro_bias[1, 2] * _tmp15
        - DR_D_gyro_bias[2, 2] * _tmp14
        + _DR[0] * _tmp751
        - _tmp20 * _tmp752
        - _tmp3 * _tmp759
        + _tmp4 * _tmp757
        - _tmp4 * _tmp758
        + _tmp655 * _tmp754
        - _tmp665 * _tmp753
    )
    _tmp761 = (
        DR_D_gyro_bias[0, 2] * _tmp15
        - DR_D_gyro_bias[1, 2] * _tmp19
        + DR_D_gyro_bias[2, 2] * _tmp20
        - _DR[1] * _tmp751
        + _tmp3 * _tmp757
        - _tmp3 * _tmp758
        + _tmp4 * _tmp759
        - _tmp673 * _tmp749
        + _tmp674 * _tmp752
        - _tmp716 * _tmp754
    )
    _tmp762 = (
        -DR_D_gyro_bias[0, 2] * _tmp20
        + DR_D_gyro_bias[1, 2] * _tmp14
        + DR_D_gyro_bias[2, 2] * _tmp15
        - _DR[0] * _tmp755
        - _DR[3] * _tmp751
        + _tmp5 * _tmp757
        - _tmp677 * _tmp749
        - _tmp678 * _tmp752
        + _tmp679 * _tmp750
        + _tmp716 * _tmp753
    )
    _tmp763 = -_rot_i[0] * _tmp760 + _rot_i[1] * _tmp761 - _rot_i[2] * _tmp756 - _rot_i[3] * _tmp762
    _tmp764 = -_rot_i[0] * _tmp756 - _rot_i[1] * _tmp762 + _rot_i[2] * _tmp760 - _rot_i[3] * _tmp761
    _tmp765 = _rot_i[0] * _tmp762 - _rot_i[1] * _tmp756 - _rot_i[2] * _tmp761 - _rot_i[3] * _tmp760
    _tmp766 = -_rot_i[0] * _tmp761 - _rot_i[1] * _tmp760 - _rot_i[2] * _tmp762 + _rot_i[3] * _tmp756
    _tmp767 = _rot_j[0] * _tmp764 + _rot_j[1] * _tmp765 + _rot_j[2] * _tmp763 - _rot_j[3] * _tmp766
    _tmp768 = _tmp172 * _tmp767
    _tmp769 = _tmp192 * _tmp767
    _tmp770 = _tmp199 * _tmp767
    _tmp771 = _tmp187 * (
        _rot_j[0] * _tmp763 + _rot_j[1] * _tmp766 - _rot_j[2] * _tmp764 + _rot_j[3] * _tmp765
    )
    _tmp772 = _tmp207 * _tmp767
    _tmp773 = _tmp187 * (
        _rot_j[0] * _tmp766 - _rot_j[1] * _tmp763 + _rot_j[2] * _tmp765 + _rot_j[3] * _tmp764
    )
    _tmp774 = _tmp201 * _tmp767
    _tmp775 = _tmp186 * (
        -_rot_j[0] * _tmp765 + _rot_j[1] * _tmp764 + _rot_j[2] * _tmp766 + _rot_j[3] * _tmp763
    )
    _tmp776 = _tmp56 * _tmp775
    _tmp777 = _tmp205 * _tmp767
    _tmp778 = (
        -Dp_D_gyro_bias[0, 2] * sqrt_info[0, 6]
        - Dp_D_gyro_bias[1, 2] * sqrt_info[0, 7]
        - Dp_D_gyro_bias[2, 2] * sqrt_info[0, 8]
        - Dv_D_gyro_bias[0, 2] * sqrt_info[0, 3]
        - Dv_D_gyro_bias[1, 2] * sqrt_info[0, 4]
        - Dv_D_gyro_bias[2, 2] * sqrt_info[0, 5]
        + _tmp768 * sqrt_info[0, 1]
        - _tmp769 * sqrt_info[0, 0]
        + _tmp770 * sqrt_info[0, 2]
        + _tmp771 * sqrt_info[0, 1]
        + _tmp772 * sqrt_info[0, 0]
        + _tmp773 * sqrt_info[0, 0]
        - _tmp774 * sqrt_info[0, 1]
        + _tmp776 * sqrt_info[0, 2]
        - _tmp777 * sqrt_info[0, 2]
    )
    _tmp779 = (
        -Dp_D_gyro_bias[0, 2] * sqrt_info[1, 6]
        - Dp_D_gyro_bias[1, 2] * sqrt_info[1, 7]
        - Dp_D_gyro_bias[2, 2] * sqrt_info[1, 8]
        - Dv_D_gyro_bias[0, 2] * sqrt_info[1, 3]
        - Dv_D_gyro_bias[1, 2] * sqrt_info[1, 4]
        - Dv_D_gyro_bias[2, 2] * sqrt_info[1, 5]
        + _tmp125 * _tmp775
        + _tmp768 * sqrt_info[1, 1]
        - _tmp769 * sqrt_info[1, 0]
        + _tmp770 * sqrt_info[1, 2]
        + _tmp771 * sqrt_info[1, 1]
        + _tmp772 * sqrt_info[1, 0]
        + _tmp773 * sqrt_info[1, 0]
        - _tmp774 * sqrt_info[1, 1]
        - _tmp777 * sqrt_info[1, 2]
    )
    _tmp780 = (
        -Dp_D_gyro_bias[0, 2] * sqrt_info[2, 6]
        - Dp_D_gyro_bias[1, 2] * sqrt_info[2, 7]
        - Dp_D_gyro_bias[2, 2] * sqrt_info[2, 8]
        - Dv_D_gyro_bias[0, 2] * sqrt_info[2, 3]
        - Dv_D_gyro_bias[1, 2] * sqrt_info[2, 4]
        - Dv_D_gyro_bias[2, 2] * sqrt_info[2, 5]
        + _tmp127 * _tmp775
        - _tmp213 * _tmp767
        + _tmp768 * sqrt_info[2, 1]
        - _tmp769 * sqrt_info[2, 0]
        + _tmp770 * sqrt_info[2, 2]
        + _tmp771 * sqrt_info[2, 1]
        + _tmp772 * sqrt_info[2, 0]
        + _tmp773 * sqrt_info[2, 0]
        - _tmp777 * sqrt_info[2, 2]
    )
    _tmp781 = (
        -Dp_D_gyro_bias[0, 2] * sqrt_info[3, 6]
        - Dp_D_gyro_bias[1, 2] * sqrt_info[3, 7]
        - Dp_D_gyro_bias[2, 2] * sqrt_info[3, 8]
        - Dv_D_gyro_bias[0, 2] * sqrt_info[3, 3]
        - Dv_D_gyro_bias[1, 2] * sqrt_info[3, 4]
        - Dv_D_gyro_bias[2, 2] * sqrt_info[3, 5]
        + _tmp768 * sqrt_info[3, 1]
        - _tmp769 * sqrt_info[3, 0]
        + _tmp770 * sqrt_info[3, 2]
        + _tmp771 * sqrt_info[3, 1]
        + _tmp772 * sqrt_info[3, 0]
        + _tmp773 * sqrt_info[3, 0]
        - _tmp774 * sqrt_info[3, 1]
        + _tmp776 * sqrt_info[3, 2]
        - _tmp777 * sqrt_info[3, 2]
    )
    _tmp782 = (
        -Dp_D_gyro_bias[0, 2] * sqrt_info[4, 6]
        - Dp_D_gyro_bias[1, 2] * sqrt_info[4, 7]
        - Dp_D_gyro_bias[2, 2] * sqrt_info[4, 8]
        - Dv_D_gyro_bias[0, 2] * sqrt_info[4, 3]
        - Dv_D_gyro_bias[1, 2] * sqrt_info[4, 4]
        - Dv_D_gyro_bias[2, 2] * sqrt_info[4, 5]
        + _tmp768 * sqrt_info[4, 1]
        - _tmp769 * sqrt_info[4, 0]
        + _tmp770 * sqrt_info[4, 2]
        + _tmp771 * sqrt_info[4, 1]
        + _tmp772 * sqrt_info[4, 0]
        + _tmp773 * sqrt_info[4, 0]
        - _tmp774 * sqrt_info[4, 1]
        + _tmp776 * sqrt_info[4, 2]
        - _tmp777 * sqrt_info[4, 2]
    )
    _tmp783 = (
        -Dp_D_gyro_bias[0, 2] * sqrt_info[5, 6]
        - Dp_D_gyro_bias[1, 2] * sqrt_info[5, 7]
        - Dp_D_gyro_bias[2, 2] * sqrt_info[5, 8]
        - Dv_D_gyro_bias[0, 2] * sqrt_info[5, 3]
        - Dv_D_gyro_bias[1, 2] * sqrt_info[5, 4]
        - Dv_D_gyro_bias[2, 2] * sqrt_info[5, 5]
        + _tmp219 * _tmp767
        - _tmp220 * _tmp767
        - _tmp221 * _tmp767
        + _tmp770 * sqrt_info[5, 2]
        + _tmp771 * sqrt_info[5, 1]
        + _tmp772 * sqrt_info[5, 0]
        + _tmp773 * sqrt_info[5, 0]
        + _tmp776 * sqrt_info[5, 2]
        - _tmp777 * sqrt_info[5, 2]
    )
    _tmp784 = (
        -Dp_D_gyro_bias[0, 2] * sqrt_info[6, 6]
        - Dp_D_gyro_bias[1, 2] * sqrt_info[6, 7]
        - Dp_D_gyro_bias[2, 2] * sqrt_info[6, 8]
        - Dv_D_gyro_bias[0, 2] * sqrt_info[6, 3]
        - Dv_D_gyro_bias[1, 2] * sqrt_info[6, 4]
        - Dv_D_gyro_bias[2, 2] * sqrt_info[6, 5]
        + _tmp224 * _tmp767
        + _tmp768 * sqrt_info[6, 1]
        - _tmp769 * sqrt_info[6, 0]
        + _tmp770 * sqrt_info[6, 2]
        + _tmp771 * sqrt_info[6, 1]
        + _tmp773 * sqrt_info[6, 0]
        - _tmp774 * sqrt_info[6, 1]
        + _tmp776 * sqrt_info[6, 2]
        - _tmp777 * sqrt_info[6, 2]
    )
    _tmp785 = (
        -Dp_D_gyro_bias[0, 2] * sqrt_info[7, 6]
        - Dp_D_gyro_bias[1, 2] * sqrt_info[7, 7]
        - Dp_D_gyro_bias[2, 2] * sqrt_info[7, 8]
        - Dv_D_gyro_bias[0, 2] * sqrt_info[7, 3]
        - Dv_D_gyro_bias[1, 2] * sqrt_info[7, 4]
        - Dv_D_gyro_bias[2, 2] * sqrt_info[7, 5]
        - _tmp227 * _tmp767
        + _tmp768 * sqrt_info[7, 1]
        - _tmp769 * sqrt_info[7, 0]
        + _tmp770 * sqrt_info[7, 2]
        + _tmp771 * sqrt_info[7, 1]
        + _tmp772 * sqrt_info[7, 0]
        + _tmp773 * sqrt_info[7, 0]
        + _tmp776 * sqrt_info[7, 2]
        - _tmp777 * sqrt_info[7, 2]
    )
    _tmp786 = (
        -Dp_D_gyro_bias[0, 2] * sqrt_info[8, 6]
        - Dp_D_gyro_bias[1, 2] * sqrt_info[8, 7]
        - Dp_D_gyro_bias[2, 2] * sqrt_info[8, 8]
        - Dv_D_gyro_bias[0, 2] * sqrt_info[8, 3]
        - Dv_D_gyro_bias[1, 2] * sqrt_info[8, 4]
        - Dv_D_gyro_bias[2, 2] * sqrt_info[8, 5]
        + _tmp768 * sqrt_info[8, 1]
        - _tmp769 * sqrt_info[8, 0]
        + _tmp770 * sqrt_info[8, 2]
        + _tmp771 * sqrt_info[8, 1]
        + _tmp772 * sqrt_info[8, 0]
        + _tmp773 * sqrt_info[8, 0]
        - _tmp774 * sqrt_info[8, 1]
        + _tmp776 * sqrt_info[8, 2]
        - _tmp777 * sqrt_info[8, 2]
    )
    _tmp787 = (
        -Dp_D_accel_bias[0, 0] * sqrt_info[0, 6]
        - Dp_D_accel_bias[1, 0] * sqrt_info[0, 7]
        - Dp_D_accel_bias[2, 0] * sqrt_info[0, 8]
        - Dv_D_accel_bias[0, 0] * sqrt_info[0, 3]
        - Dv_D_accel_bias[1, 0] * sqrt_info[0, 4]
        - Dv_D_accel_bias[2, 0] * sqrt_info[0, 5]
    )
    _tmp788 = (
        -Dp_D_accel_bias[0, 0] * sqrt_info[1, 6]
        - Dp_D_accel_bias[1, 0] * sqrt_info[1, 7]
        - Dp_D_accel_bias[2, 0] * sqrt_info[1, 8]
        - Dv_D_accel_bias[0, 0] * sqrt_info[1, 3]
        - Dv_D_accel_bias[1, 0] * sqrt_info[1, 4]
        - Dv_D_accel_bias[2, 0] * sqrt_info[1, 5]
    )
    _tmp789 = (
        -Dp_D_accel_bias[0, 0] * sqrt_info[2, 6]
        - Dp_D_accel_bias[1, 0] * sqrt_info[2, 7]
        - Dp_D_accel_bias[2, 0] * sqrt_info[2, 8]
        - Dv_D_accel_bias[0, 0] * sqrt_info[2, 3]
        - Dv_D_accel_bias[1, 0] * sqrt_info[2, 4]
        - Dv_D_accel_bias[2, 0] * sqrt_info[2, 5]
    )
    _tmp790 = (
        -Dp_D_accel_bias[0, 0] * sqrt_info[3, 6]
        - Dp_D_accel_bias[1, 0] * sqrt_info[3, 7]
        - Dp_D_accel_bias[2, 0] * sqrt_info[3, 8]
        - Dv_D_accel_bias[0, 0] * sqrt_info[3, 3]
        - Dv_D_accel_bias[1, 0] * sqrt_info[3, 4]
        - Dv_D_accel_bias[2, 0] * sqrt_info[3, 5]
    )
    _tmp791 = (
        -Dp_D_accel_bias[0, 0] * sqrt_info[4, 6]
        - Dp_D_accel_bias[1, 0] * sqrt_info[4, 7]
        - Dp_D_accel_bias[2, 0] * sqrt_info[4, 8]
        - Dv_D_accel_bias[0, 0] * sqrt_info[4, 3]
        - Dv_D_accel_bias[1, 0] * sqrt_info[4, 4]
        - Dv_D_accel_bias[2, 0] * sqrt_info[4, 5]
    )
    _tmp792 = (
        -Dp_D_accel_bias[0, 0] * sqrt_info[5, 6]
        - Dp_D_accel_bias[1, 0] * sqrt_info[5, 7]
        - Dp_D_accel_bias[2, 0] * sqrt_info[5, 8]
        - Dv_D_accel_bias[0, 0] * sqrt_info[5, 3]
        - Dv_D_accel_bias[1, 0] * sqrt_info[5, 4]
        - Dv_D_accel_bias[2, 0] * sqrt_info[5, 5]
    )
    _tmp793 = (
        -Dp_D_accel_bias[0, 0] * sqrt_info[6, 6]
        - Dp_D_accel_bias[1, 0] * sqrt_info[6, 7]
        - Dp_D_accel_bias[2, 0] * sqrt_info[6, 8]
        - Dv_D_accel_bias[0, 0] * sqrt_info[6, 3]
        - Dv_D_accel_bias[1, 0] * sqrt_info[6, 4]
        - Dv_D_accel_bias[2, 0] * sqrt_info[6, 5]
    )
    _tmp794 = (
        -Dp_D_accel_bias[0, 0] * sqrt_info[7, 6]
        - Dp_D_accel_bias[1, 0] * sqrt_info[7, 7]
        - Dp_D_accel_bias[2, 0] * sqrt_info[7, 8]
        - Dv_D_accel_bias[0, 0] * sqrt_info[7, 3]
        - Dv_D_accel_bias[1, 0] * sqrt_info[7, 4]
        - Dv_D_accel_bias[2, 0] * sqrt_info[7, 5]
    )
    _tmp795 = (
        -Dp_D_accel_bias[0, 0] * sqrt_info[8, 6]
        - Dp_D_accel_bias[1, 0] * sqrt_info[8, 7]
        - Dp_D_accel_bias[2, 0] * sqrt_info[8, 8]
        - Dv_D_accel_bias[0, 0] * sqrt_info[8, 3]
        - Dv_D_accel_bias[1, 0] * sqrt_info[8, 4]
        - Dv_D_accel_bias[2, 0] * sqrt_info[8, 5]
    )
    _tmp796 = (
        -Dp_D_accel_bias[0, 1] * sqrt_info[0, 6]
        - Dp_D_accel_bias[1, 1] * sqrt_info[0, 7]
        - Dp_D_accel_bias[2, 1] * sqrt_info[0, 8]
        - Dv_D_accel_bias[0, 1] * sqrt_info[0, 3]
        - Dv_D_accel_bias[1, 1] * sqrt_info[0, 4]
        - Dv_D_accel_bias[2, 1] * sqrt_info[0, 5]
    )
    _tmp797 = (
        -Dp_D_accel_bias[0, 1] * sqrt_info[1, 6]
        - Dp_D_accel_bias[1, 1] * sqrt_info[1, 7]
        - Dp_D_accel_bias[2, 1] * sqrt_info[1, 8]
        - Dv_D_accel_bias[0, 1] * sqrt_info[1, 3]
        - Dv_D_accel_bias[1, 1] * sqrt_info[1, 4]
        - Dv_D_accel_bias[2, 1] * sqrt_info[1, 5]
    )
    _tmp798 = (
        -Dp_D_accel_bias[0, 1] * sqrt_info[2, 6]
        - Dp_D_accel_bias[1, 1] * sqrt_info[2, 7]
        - Dp_D_accel_bias[2, 1] * sqrt_info[2, 8]
        - Dv_D_accel_bias[0, 1] * sqrt_info[2, 3]
        - Dv_D_accel_bias[1, 1] * sqrt_info[2, 4]
        - Dv_D_accel_bias[2, 1] * sqrt_info[2, 5]
    )
    _tmp799 = (
        -Dp_D_accel_bias[0, 1] * sqrt_info[3, 6]
        - Dp_D_accel_bias[1, 1] * sqrt_info[3, 7]
        - Dp_D_accel_bias[2, 1] * sqrt_info[3, 8]
        - Dv_D_accel_bias[0, 1] * sqrt_info[3, 3]
        - Dv_D_accel_bias[1, 1] * sqrt_info[3, 4]
        - Dv_D_accel_bias[2, 1] * sqrt_info[3, 5]
    )
    _tmp800 = (
        -Dp_D_accel_bias[0, 1] * sqrt_info[4, 6]
        - Dp_D_accel_bias[1, 1] * sqrt_info[4, 7]
        - Dp_D_accel_bias[2, 1] * sqrt_info[4, 8]
        - Dv_D_accel_bias[0, 1] * sqrt_info[4, 3]
        - Dv_D_accel_bias[1, 1] * sqrt_info[4, 4]
        - Dv_D_accel_bias[2, 1] * sqrt_info[4, 5]
    )
    _tmp801 = (
        -Dp_D_accel_bias[0, 1] * sqrt_info[5, 6]
        - Dp_D_accel_bias[1, 1] * sqrt_info[5, 7]
        - Dp_D_accel_bias[2, 1] * sqrt_info[5, 8]
        - Dv_D_accel_bias[0, 1] * sqrt_info[5, 3]
        - Dv_D_accel_bias[1, 1] * sqrt_info[5, 4]
        - Dv_D_accel_bias[2, 1] * sqrt_info[5, 5]
    )
    _tmp802 = (
        -Dp_D_accel_bias[0, 1] * sqrt_info[6, 6]
        - Dp_D_accel_bias[1, 1] * sqrt_info[6, 7]
        - Dp_D_accel_bias[2, 1] * sqrt_info[6, 8]
        - Dv_D_accel_bias[0, 1] * sqrt_info[6, 3]
        - Dv_D_accel_bias[1, 1] * sqrt_info[6, 4]
        - Dv_D_accel_bias[2, 1] * sqrt_info[6, 5]
    )
    _tmp803 = (
        -Dp_D_accel_bias[0, 1] * sqrt_info[7, 6]
        - Dp_D_accel_bias[1, 1] * sqrt_info[7, 7]
        - Dp_D_accel_bias[2, 1] * sqrt_info[7, 8]
        - Dv_D_accel_bias[0, 1] * sqrt_info[7, 3]
        - Dv_D_accel_bias[1, 1] * sqrt_info[7, 4]
        - Dv_D_accel_bias[2, 1] * sqrt_info[7, 5]
    )
    _tmp804 = (
        -Dp_D_accel_bias[0, 1] * sqrt_info[8, 6]
        - Dp_D_accel_bias[1, 1] * sqrt_info[8, 7]
        - Dp_D_accel_bias[2, 1] * sqrt_info[8, 8]
        - Dv_D_accel_bias[0, 1] * sqrt_info[8, 3]
        - Dv_D_accel_bias[1, 1] * sqrt_info[8, 4]
        - Dv_D_accel_bias[2, 1] * sqrt_info[8, 5]
    )
    _tmp805 = (
        -Dp_D_accel_bias[0, 2] * sqrt_info[0, 6]
        - Dp_D_accel_bias[1, 2] * sqrt_info[0, 7]
        - Dp_D_accel_bias[2, 2] * sqrt_info[0, 8]
        - Dv_D_accel_bias[0, 2] * sqrt_info[0, 3]
        - Dv_D_accel_bias[1, 2] * sqrt_info[0, 4]
        - Dv_D_accel_bias[2, 2] * sqrt_info[0, 5]
    )
    _tmp806 = (
        -Dp_D_accel_bias[0, 2] * sqrt_info[1, 6]
        - Dp_D_accel_bias[1, 2] * sqrt_info[1, 7]
        - Dp_D_accel_bias[2, 2] * sqrt_info[1, 8]
        - Dv_D_accel_bias[0, 2] * sqrt_info[1, 3]
        - Dv_D_accel_bias[1, 2] * sqrt_info[1, 4]
        - Dv_D_accel_bias[2, 2] * sqrt_info[1, 5]
    )
    _tmp807 = (
        -Dp_D_accel_bias[0, 2] * sqrt_info[2, 6]
        - Dp_D_accel_bias[1, 2] * sqrt_info[2, 7]
        - Dp_D_accel_bias[2, 2] * sqrt_info[2, 8]
        - Dv_D_accel_bias[0, 2] * sqrt_info[2, 3]
        - Dv_D_accel_bias[1, 2] * sqrt_info[2, 4]
        - Dv_D_accel_bias[2, 2] * sqrt_info[2, 5]
    )
    _tmp808 = (
        -Dp_D_accel_bias[0, 2] * sqrt_info[3, 6]
        - Dp_D_accel_bias[1, 2] * sqrt_info[3, 7]
        - Dp_D_accel_bias[2, 2] * sqrt_info[3, 8]
        - Dv_D_accel_bias[0, 2] * sqrt_info[3, 3]
        - Dv_D_accel_bias[1, 2] * sqrt_info[3, 4]
        - Dv_D_accel_bias[2, 2] * sqrt_info[3, 5]
    )
    _tmp809 = (
        -Dp_D_accel_bias[0, 2] * sqrt_info[4, 6]
        - Dp_D_accel_bias[1, 2] * sqrt_info[4, 7]
        - Dp_D_accel_bias[2, 2] * sqrt_info[4, 8]
        - Dv_D_accel_bias[0, 2] * sqrt_info[4, 3]
        - Dv_D_accel_bias[1, 2] * sqrt_info[4, 4]
        - Dv_D_accel_bias[2, 2] * sqrt_info[4, 5]
    )
    _tmp810 = (
        -Dp_D_accel_bias[0, 2] * sqrt_info[5, 6]
        - Dp_D_accel_bias[1, 2] * sqrt_info[5, 7]
        - Dp_D_accel_bias[2, 2] * sqrt_info[5, 8]
        - Dv_D_accel_bias[0, 2] * sqrt_info[5, 3]
        - Dv_D_accel_bias[1, 2] * sqrt_info[5, 4]
        - Dv_D_accel_bias[2, 2] * sqrt_info[5, 5]
    )
    _tmp811 = (
        -Dp_D_accel_bias[0, 2] * sqrt_info[6, 6]
        - Dp_D_accel_bias[1, 2] * sqrt_info[6, 7]
        - Dp_D_accel_bias[2, 2] * sqrt_info[6, 8]
        - Dv_D_accel_bias[0, 2] * sqrt_info[6, 3]
        - Dv_D_accel_bias[1, 2] * sqrt_info[6, 4]
        - Dv_D_accel_bias[2, 2] * sqrt_info[6, 5]
    )
    _tmp812 = (
        -Dp_D_accel_bias[0, 2] * sqrt_info[7, 6]
        - Dp_D_accel_bias[1, 2] * sqrt_info[7, 7]
        - Dp_D_accel_bias[2, 2] * sqrt_info[7, 8]
        - Dv_D_accel_bias[0, 2] * sqrt_info[7, 3]
        - Dv_D_accel_bias[1, 2] * sqrt_info[7, 4]
        - Dv_D_accel_bias[2, 2] * sqrt_info[7, 5]
    )
    _tmp813 = (
        -Dp_D_accel_bias[0, 2] * sqrt_info[8, 6]
        - Dp_D_accel_bias[1, 2] * sqrt_info[8, 7]
        - Dp_D_accel_bias[2, 2] * sqrt_info[8, 8]
        - Dv_D_accel_bias[0, 2] * sqrt_info[8, 3]
        - Dv_D_accel_bias[1, 2] * sqrt_info[8, 4]
        - Dv_D_accel_bias[2, 2] * sqrt_info[8, 5]
    )

    # Output terms
    _res = numpy.zeros((9, 1))
    _res[0, 0] = _tmp124
    _res[1, 0] = _tmp126
    _res[2, 0] = _tmp128
    _res[3, 0] = _tmp129
    _res[4, 0] = _tmp130
    _res[5, 0] = _tmp132
    _res[6, 0] = _tmp133
    _res[7, 0] = _tmp134
    _res[8, 0] = _tmp135
    _jacobian = numpy.zeros((9, 24))
    _jacobian[0, 0] = _tmp209
    _jacobian[1, 0] = _tmp211
    _jacobian[2, 0] = _tmp215
    _jacobian[3, 0] = _tmp216
    _jacobian[4, 0] = _tmp218
    _jacobian[5, 0] = _tmp222
    _jacobian[6, 0] = _tmp225
    _jacobian[7, 0] = _tmp228
    _jacobian[8, 0] = _tmp229
    _jacobian[0, 1] = _tmp260
    _jacobian[1, 1] = _tmp261
    _jacobian[2, 1] = _tmp262
    _jacobian[3, 1] = _tmp263
    _jacobian[4, 1] = _tmp265
    _jacobian[5, 1] = _tmp266
    _jacobian[6, 1] = _tmp267
    _jacobian[7, 1] = _tmp268
    _jacobian[8, 1] = _tmp270
    _jacobian[0, 2] = _tmp296
    _jacobian[1, 2] = _tmp297
    _jacobian[2, 2] = _tmp298
    _jacobian[3, 2] = _tmp299
    _jacobian[4, 2] = _tmp300
    _jacobian[5, 2] = _tmp301
    _jacobian[6, 2] = _tmp302
    _jacobian[7, 2] = _tmp303
    _jacobian[8, 2] = _tmp304
    _jacobian[0, 3] = _tmp311
    _jacobian[1, 3] = _tmp318
    _jacobian[2, 3] = _tmp325
    _jacobian[3, 3] = _tmp332
    _jacobian[4, 3] = _tmp339
    _jacobian[5, 3] = _tmp346
    _jacobian[6, 3] = _tmp353
    _jacobian[7, 3] = _tmp360
    _jacobian[8, 3] = _tmp367
    _jacobian[0, 4] = _tmp374
    _jacobian[1, 4] = _tmp381
    _jacobian[2, 4] = _tmp388
    _jacobian[3, 4] = _tmp395
    _jacobian[4, 4] = _tmp402
    _jacobian[5, 4] = _tmp409
    _jacobian[6, 4] = _tmp416
    _jacobian[7, 4] = _tmp423
    _jacobian[8, 4] = _tmp430
    _jacobian[0, 5] = _tmp437
    _jacobian[1, 5] = _tmp444
    _jacobian[2, 5] = _tmp451
    _jacobian[3, 5] = _tmp458
    _jacobian[4, 5] = _tmp465
    _jacobian[5, 5] = _tmp472
    _jacobian[6, 5] = _tmp479
    _jacobian[7, 5] = _tmp486
    _jacobian[8, 5] = _tmp493
    _jacobian[0, 6] = _tmp494
    _jacobian[1, 6] = _tmp495
    _jacobian[2, 6] = _tmp496
    _jacobian[3, 6] = _tmp497
    _jacobian[4, 6] = _tmp498
    _jacobian[5, 6] = _tmp499
    _jacobian[6, 6] = _tmp500
    _jacobian[7, 6] = _tmp501
    _jacobian[8, 6] = _tmp502
    _jacobian[0, 7] = _tmp503
    _jacobian[1, 7] = _tmp504
    _jacobian[2, 7] = _tmp505
    _jacobian[3, 7] = _tmp506
    _jacobian[4, 7] = _tmp507
    _jacobian[5, 7] = _tmp508
    _jacobian[6, 7] = _tmp509
    _jacobian[7, 7] = _tmp510
    _jacobian[8, 7] = _tmp511
    _jacobian[0, 8] = _tmp512
    _jacobian[1, 8] = _tmp513
    _jacobian[2, 8] = _tmp514
    _jacobian[3, 8] = _tmp515
    _jacobian[4, 8] = _tmp516
    _jacobian[5, 8] = _tmp517
    _jacobian[6, 8] = _tmp518
    _jacobian[7, 8] = _tmp519
    _jacobian[8, 8] = _tmp520
    _jacobian[0, 9] = _tmp547
    _jacobian[1, 9] = _tmp548
    _jacobian[2, 9] = _tmp549
    _jacobian[3, 9] = _tmp551
    _jacobian[4, 9] = _tmp552
    _jacobian[5, 9] = _tmp553
    _jacobian[6, 9] = _tmp554
    _jacobian[7, 9] = _tmp555
    _jacobian[8, 9] = _tmp556
    _jacobian[0, 10] = _tmp567
    _jacobian[1, 10] = _tmp568
    _jacobian[2, 10] = _tmp569
    _jacobian[3, 10] = _tmp570
    _jacobian[4, 10] = _tmp571
    _jacobian[5, 10] = _tmp572
    _jacobian[6, 10] = _tmp573
    _jacobian[7, 10] = _tmp575
    _jacobian[8, 10] = _tmp576
    _jacobian[0, 11] = _tmp586
    _jacobian[1, 11] = _tmp587
    _jacobian[2, 11] = _tmp588
    _jacobian[3, 11] = _tmp589
    _jacobian[4, 11] = _tmp590
    _jacobian[5, 11] = _tmp591
    _jacobian[6, 11] = _tmp592
    _jacobian[7, 11] = _tmp593
    _jacobian[8, 11] = _tmp594
    _jacobian[0, 12] = _tmp595
    _jacobian[1, 12] = _tmp596
    _jacobian[2, 12] = _tmp597
    _jacobian[3, 12] = _tmp598
    _jacobian[4, 12] = _tmp599
    _jacobian[5, 12] = _tmp600
    _jacobian[6, 12] = _tmp601
    _jacobian[7, 12] = _tmp602
    _jacobian[8, 12] = _tmp603
    _jacobian[0, 13] = _tmp604
    _jacobian[1, 13] = _tmp605
    _jacobian[2, 13] = _tmp606
    _jacobian[3, 13] = _tmp607
    _jacobian[4, 13] = _tmp608
    _jacobian[5, 13] = _tmp609
    _jacobian[6, 13] = _tmp610
    _jacobian[7, 13] = _tmp611
    _jacobian[8, 13] = _tmp612
    _jacobian[0, 14] = _tmp613
    _jacobian[1, 14] = _tmp614
    _jacobian[2, 14] = _tmp615
    _jacobian[3, 14] = _tmp616
    _jacobian[4, 14] = _tmp617
    _jacobian[5, 14] = _tmp618
    _jacobian[6, 14] = _tmp619
    _jacobian[7, 14] = _tmp620
    _jacobian[8, 14] = _tmp621
    _jacobian[0, 15] = _tmp622
    _jacobian[1, 15] = _tmp623
    _jacobian[2, 15] = _tmp624
    _jacobian[3, 15] = _tmp625
    _jacobian[4, 15] = _tmp626
    _jacobian[5, 15] = _tmp627
    _jacobian[6, 15] = _tmp628
    _jacobian[7, 15] = _tmp629
    _jacobian[8, 15] = _tmp630
    _jacobian[0, 16] = _tmp631
    _jacobian[1, 16] = _tmp632
    _jacobian[2, 16] = _tmp633
    _jacobian[3, 16] = _tmp634
    _jacobian[4, 16] = _tmp635
    _jacobian[5, 16] = _tmp636
    _jacobian[6, 16] = _tmp637
    _jacobian[7, 16] = _tmp638
    _jacobian[8, 16] = _tmp639
    _jacobian[0, 17] = _tmp640
    _jacobian[1, 17] = _tmp641
    _jacobian[2, 17] = _tmp642
    _jacobian[3, 17] = _tmp643
    _jacobian[4, 17] = _tmp644
    _jacobian[5, 17] = _tmp645
    _jacobian[6, 17] = _tmp646
    _jacobian[7, 17] = _tmp647
    _jacobian[8, 17] = _tmp648
    _jacobian[0, 18] = _tmp701
    _jacobian[1, 18] = _tmp702
    _jacobian[2, 18] = _tmp703
    _jacobian[3, 18] = _tmp704
    _jacobian[4, 18] = _tmp705
    _jacobian[5, 18] = _tmp706
    _jacobian[6, 18] = _tmp707
    _jacobian[7, 18] = _tmp708
    _jacobian[8, 18] = _tmp709
    _jacobian[0, 19] = _tmp740
    _jacobian[1, 19] = _tmp741
    _jacobian[2, 19] = _tmp742
    _jacobian[3, 19] = _tmp743
    _jacobian[4, 19] = _tmp744
    _jacobian[5, 19] = _tmp745
    _jacobian[6, 19] = _tmp746
    _jacobian[7, 19] = _tmp747
    _jacobian[8, 19] = _tmp748
    _jacobian[0, 20] = _tmp778
    _jacobian[1, 20] = _tmp779
    _jacobian[2, 20] = _tmp780
    _jacobian[3, 20] = _tmp781
    _jacobian[4, 20] = _tmp782
    _jacobian[5, 20] = _tmp783
    _jacobian[6, 20] = _tmp784
    _jacobian[7, 20] = _tmp785
    _jacobian[8, 20] = _tmp786
    _jacobian[0, 21] = _tmp787
    _jacobian[1, 21] = _tmp788
    _jacobian[2, 21] = _tmp789
    _jacobian[3, 21] = _tmp790
    _jacobian[4, 21] = _tmp791
    _jacobian[5, 21] = _tmp792
    _jacobian[6, 21] = _tmp793
    _jacobian[7, 21] = _tmp794
    _jacobian[8, 21] = _tmp795
    _jacobian[0, 22] = _tmp796
    _jacobian[1, 22] = _tmp797
    _jacobian[2, 22] = _tmp798
    _jacobian[3, 22] = _tmp799
    _jacobian[4, 22] = _tmp800
    _jacobian[5, 22] = _tmp801
    _jacobian[6, 22] = _tmp802
    _jacobian[7, 22] = _tmp803
    _jacobian[8, 22] = _tmp804
    _jacobian[0, 23] = _tmp805
    _jacobian[1, 23] = _tmp806
    _jacobian[2, 23] = _tmp807
    _jacobian[3, 23] = _tmp808
    _jacobian[4, 23] = _tmp809
    _jacobian[5, 23] = _tmp810
    _jacobian[6, 23] = _tmp811
    _jacobian[7, 23] = _tmp812
    _jacobian[8, 23] = _tmp813
    _hessian = numpy.zeros((24, 24))
    _hessian[0, 0] = (
        _tmp209 ** 2
        + _tmp211 ** 2
        + _tmp215 ** 2
        + _tmp216 ** 2
        + _tmp218 ** 2
        + _tmp222 ** 2
        + _tmp225 ** 2
        + _tmp228 ** 2
        + _tmp229 ** 2
    )
    _hessian[1, 0] = (
        _tmp209 * _tmp260
        + _tmp211 * _tmp261
        + _tmp215 * _tmp262
        + _tmp216 * _tmp263
        + _tmp218 * _tmp265
        + _tmp222 * _tmp266
        + _tmp225 * _tmp267
        + _tmp228 * _tmp268
        + _tmp229 * _tmp270
    )
    _hessian[2, 0] = (
        _tmp209 * _tmp296
        + _tmp211 * _tmp297
        + _tmp215 * _tmp298
        + _tmp216 * _tmp299
        + _tmp218 * _tmp300
        + _tmp222 * _tmp301
        + _tmp225 * _tmp302
        + _tmp228 * _tmp303
        + _tmp229 * _tmp304
    )
    _hessian[3, 0] = (
        _tmp209 * _tmp311
        + _tmp211 * _tmp318
        + _tmp215 * _tmp325
        + _tmp216 * _tmp332
        + _tmp218 * _tmp339
        + _tmp222 * _tmp346
        + _tmp225 * _tmp353
        + _tmp228 * _tmp360
        + _tmp229 * _tmp367
    )
    _hessian[4, 0] = (
        _tmp209 * _tmp374
        + _tmp211 * _tmp381
        + _tmp215 * _tmp388
        + _tmp216 * _tmp395
        + _tmp218 * _tmp402
        + _tmp222 * _tmp409
        + _tmp225 * _tmp416
        + _tmp228 * _tmp423
        + _tmp229 * _tmp430
    )
    _hessian[5, 0] = (
        _tmp209 * _tmp437
        + _tmp211 * _tmp444
        + _tmp215 * _tmp451
        + _tmp216 * _tmp458
        + _tmp218 * _tmp465
        + _tmp222 * _tmp472
        + _tmp225 * _tmp479
        + _tmp228 * _tmp486
        + _tmp229 * _tmp493
    )
    _hessian[6, 0] = (
        _tmp209 * _tmp494
        + _tmp211 * _tmp495
        + _tmp215 * _tmp496
        + _tmp216 * _tmp497
        + _tmp218 * _tmp498
        + _tmp222 * _tmp499
        + _tmp225 * _tmp500
        + _tmp228 * _tmp501
        + _tmp229 * _tmp502
    )
    _hessian[7, 0] = (
        _tmp209 * _tmp503
        + _tmp211 * _tmp504
        + _tmp215 * _tmp505
        + _tmp216 * _tmp506
        + _tmp218 * _tmp507
        + _tmp222 * _tmp508
        + _tmp225 * _tmp509
        + _tmp228 * _tmp510
        + _tmp229 * _tmp511
    )
    _hessian[8, 0] = (
        _tmp209 * _tmp512
        + _tmp211 * _tmp513
        + _tmp215 * _tmp514
        + _tmp216 * _tmp515
        + _tmp218 * _tmp516
        + _tmp222 * _tmp517
        + _tmp225 * _tmp518
        + _tmp228 * _tmp519
        + _tmp229 * _tmp520
    )
    _hessian[9, 0] = (
        _tmp209 * _tmp547
        + _tmp211 * _tmp548
        + _tmp215 * _tmp549
        + _tmp216 * _tmp551
        + _tmp218 * _tmp552
        + _tmp222 * _tmp553
        + _tmp225 * _tmp554
        + _tmp228 * _tmp555
        + _tmp229 * _tmp556
    )
    _hessian[10, 0] = (
        _tmp209 * _tmp567
        + _tmp211 * _tmp568
        + _tmp215 * _tmp569
        + _tmp216 * _tmp570
        + _tmp218 * _tmp571
        + _tmp222 * _tmp572
        + _tmp225 * _tmp573
        + _tmp228 * _tmp575
        + _tmp229 * _tmp576
    )
    _hessian[11, 0] = (
        _tmp209 * _tmp586
        + _tmp211 * _tmp587
        + _tmp215 * _tmp588
        + _tmp216 * _tmp589
        + _tmp218 * _tmp590
        + _tmp222 * _tmp591
        + _tmp225 * _tmp592
        + _tmp228 * _tmp593
        + _tmp229 * _tmp594
    )
    _hessian[12, 0] = (
        _tmp209 * _tmp595
        + _tmp211 * _tmp596
        + _tmp215 * _tmp597
        + _tmp216 * _tmp598
        + _tmp218 * _tmp599
        + _tmp222 * _tmp600
        + _tmp225 * _tmp601
        + _tmp228 * _tmp602
        + _tmp229 * _tmp603
    )
    _hessian[13, 0] = (
        _tmp209 * _tmp604
        + _tmp211 * _tmp605
        + _tmp215 * _tmp606
        + _tmp216 * _tmp607
        + _tmp218 * _tmp608
        + _tmp222 * _tmp609
        + _tmp225 * _tmp610
        + _tmp228 * _tmp611
        + _tmp229 * _tmp612
    )
    _hessian[14, 0] = (
        _tmp209 * _tmp613
        + _tmp211 * _tmp614
        + _tmp215 * _tmp615
        + _tmp216 * _tmp616
        + _tmp218 * _tmp617
        + _tmp222 * _tmp618
        + _tmp225 * _tmp619
        + _tmp228 * _tmp620
        + _tmp229 * _tmp621
    )
    _hessian[15, 0] = (
        _tmp209 * _tmp622
        + _tmp211 * _tmp623
        + _tmp215 * _tmp624
        + _tmp216 * _tmp625
        + _tmp218 * _tmp626
        + _tmp222 * _tmp627
        + _tmp225 * _tmp628
        + _tmp228 * _tmp629
        + _tmp229 * _tmp630
    )
    _hessian[16, 0] = (
        _tmp209 * _tmp631
        + _tmp211 * _tmp632
        + _tmp215 * _tmp633
        + _tmp216 * _tmp634
        + _tmp218 * _tmp635
        + _tmp222 * _tmp636
        + _tmp225 * _tmp637
        + _tmp228 * _tmp638
        + _tmp229 * _tmp639
    )
    _hessian[17, 0] = (
        _tmp209 * _tmp640
        + _tmp211 * _tmp641
        + _tmp215 * _tmp642
        + _tmp216 * _tmp643
        + _tmp218 * _tmp644
        + _tmp222 * _tmp645
        + _tmp225 * _tmp646
        + _tmp228 * _tmp647
        + _tmp229 * _tmp648
    )
    _hessian[18, 0] = (
        _tmp209 * _tmp701
        + _tmp211 * _tmp702
        + _tmp215 * _tmp703
        + _tmp216 * _tmp704
        + _tmp218 * _tmp705
        + _tmp222 * _tmp706
        + _tmp225 * _tmp707
        + _tmp228 * _tmp708
        + _tmp229 * _tmp709
    )
    _hessian[19, 0] = (
        _tmp209 * _tmp740
        + _tmp211 * _tmp741
        + _tmp215 * _tmp742
        + _tmp216 * _tmp743
        + _tmp218 * _tmp744
        + _tmp222 * _tmp745
        + _tmp225 * _tmp746
        + _tmp228 * _tmp747
        + _tmp229 * _tmp748
    )
    _hessian[20, 0] = (
        _tmp209 * _tmp778
        + _tmp211 * _tmp779
        + _tmp215 * _tmp780
        + _tmp216 * _tmp781
        + _tmp218 * _tmp782
        + _tmp222 * _tmp783
        + _tmp225 * _tmp784
        + _tmp228 * _tmp785
        + _tmp229 * _tmp786
    )
    _hessian[21, 0] = (
        _tmp209 * _tmp787
        + _tmp211 * _tmp788
        + _tmp215 * _tmp789
        + _tmp216 * _tmp790
        + _tmp218 * _tmp791
        + _tmp222 * _tmp792
        + _tmp225 * _tmp793
        + _tmp228 * _tmp794
        + _tmp229 * _tmp795
    )
    _hessian[22, 0] = (
        _tmp209 * _tmp796
        + _tmp211 * _tmp797
        + _tmp215 * _tmp798
        + _tmp216 * _tmp799
        + _tmp218 * _tmp800
        + _tmp222 * _tmp801
        + _tmp225 * _tmp802
        + _tmp228 * _tmp803
        + _tmp229 * _tmp804
    )
    _hessian[23, 0] = (
        _tmp209 * _tmp805
        + _tmp211 * _tmp806
        + _tmp215 * _tmp807
        + _tmp216 * _tmp808
        + _tmp218 * _tmp809
        + _tmp222 * _tmp810
        + _tmp225 * _tmp811
        + _tmp228 * _tmp812
        + _tmp229 * _tmp813
    )
    _hessian[0, 1] = 0
    _hessian[1, 1] = (
        _tmp260 ** 2
        + _tmp261 ** 2
        + _tmp262 ** 2
        + _tmp263 ** 2
        + _tmp265 ** 2
        + _tmp266 ** 2
        + _tmp267 ** 2
        + _tmp268 ** 2
        + _tmp270 ** 2
    )
    _hessian[2, 1] = (
        _tmp260 * _tmp296
        + _tmp261 * _tmp297
        + _tmp262 * _tmp298
        + _tmp263 * _tmp299
        + _tmp265 * _tmp300
        + _tmp266 * _tmp301
        + _tmp267 * _tmp302
        + _tmp268 * _tmp303
        + _tmp270 * _tmp304
    )
    _hessian[3, 1] = (
        _tmp260 * _tmp311
        + _tmp261 * _tmp318
        + _tmp262 * _tmp325
        + _tmp263 * _tmp332
        + _tmp265 * _tmp339
        + _tmp266 * _tmp346
        + _tmp267 * _tmp353
        + _tmp268 * _tmp360
        + _tmp270 * _tmp367
    )
    _hessian[4, 1] = (
        _tmp260 * _tmp374
        + _tmp261 * _tmp381
        + _tmp262 * _tmp388
        + _tmp263 * _tmp395
        + _tmp265 * _tmp402
        + _tmp266 * _tmp409
        + _tmp267 * _tmp416
        + _tmp268 * _tmp423
        + _tmp270 * _tmp430
    )
    _hessian[5, 1] = (
        _tmp260 * _tmp437
        + _tmp261 * _tmp444
        + _tmp262 * _tmp451
        + _tmp263 * _tmp458
        + _tmp265 * _tmp465
        + _tmp266 * _tmp472
        + _tmp267 * _tmp479
        + _tmp268 * _tmp486
        + _tmp270 * _tmp493
    )
    _hessian[6, 1] = (
        _tmp260 * _tmp494
        + _tmp261 * _tmp495
        + _tmp262 * _tmp496
        + _tmp263 * _tmp497
        + _tmp265 * _tmp498
        + _tmp266 * _tmp499
        + _tmp267 * _tmp500
        + _tmp268 * _tmp501
        + _tmp270 * _tmp502
    )
    _hessian[7, 1] = (
        _tmp260 * _tmp503
        + _tmp261 * _tmp504
        + _tmp262 * _tmp505
        + _tmp263 * _tmp506
        + _tmp265 * _tmp507
        + _tmp266 * _tmp508
        + _tmp267 * _tmp509
        + _tmp268 * _tmp510
        + _tmp270 * _tmp511
    )
    _hessian[8, 1] = (
        _tmp260 * _tmp512
        + _tmp261 * _tmp513
        + _tmp262 * _tmp514
        + _tmp263 * _tmp515
        + _tmp265 * _tmp516
        + _tmp266 * _tmp517
        + _tmp267 * _tmp518
        + _tmp268 * _tmp519
        + _tmp270 * _tmp520
    )
    _hessian[9, 1] = (
        _tmp260 * _tmp547
        + _tmp261 * _tmp548
        + _tmp262 * _tmp549
        + _tmp263 * _tmp551
        + _tmp265 * _tmp552
        + _tmp266 * _tmp553
        + _tmp267 * _tmp554
        + _tmp268 * _tmp555
        + _tmp270 * _tmp556
    )
    _hessian[10, 1] = (
        _tmp260 * _tmp567
        + _tmp261 * _tmp568
        + _tmp262 * _tmp569
        + _tmp263 * _tmp570
        + _tmp265 * _tmp571
        + _tmp266 * _tmp572
        + _tmp267 * _tmp573
        + _tmp268 * _tmp575
        + _tmp270 * _tmp576
    )
    _hessian[11, 1] = (
        _tmp260 * _tmp586
        + _tmp261 * _tmp587
        + _tmp262 * _tmp588
        + _tmp263 * _tmp589
        + _tmp265 * _tmp590
        + _tmp266 * _tmp591
        + _tmp267 * _tmp592
        + _tmp268 * _tmp593
        + _tmp270 * _tmp594
    )
    _hessian[12, 1] = (
        _tmp260 * _tmp595
        + _tmp261 * _tmp596
        + _tmp262 * _tmp597
        + _tmp263 * _tmp598
        + _tmp265 * _tmp599
        + _tmp266 * _tmp600
        + _tmp267 * _tmp601
        + _tmp268 * _tmp602
        + _tmp270 * _tmp603
    )
    _hessian[13, 1] = (
        _tmp260 * _tmp604
        + _tmp261 * _tmp605
        + _tmp262 * _tmp606
        + _tmp263 * _tmp607
        + _tmp265 * _tmp608
        + _tmp266 * _tmp609
        + _tmp267 * _tmp610
        + _tmp268 * _tmp611
        + _tmp270 * _tmp612
    )
    _hessian[14, 1] = (
        _tmp260 * _tmp613
        + _tmp261 * _tmp614
        + _tmp262 * _tmp615
        + _tmp263 * _tmp616
        + _tmp265 * _tmp617
        + _tmp266 * _tmp618
        + _tmp267 * _tmp619
        + _tmp268 * _tmp620
        + _tmp270 * _tmp621
    )
    _hessian[15, 1] = (
        _tmp260 * _tmp622
        + _tmp261 * _tmp623
        + _tmp262 * _tmp624
        + _tmp263 * _tmp625
        + _tmp265 * _tmp626
        + _tmp266 * _tmp627
        + _tmp267 * _tmp628
        + _tmp268 * _tmp629
        + _tmp270 * _tmp630
    )
    _hessian[16, 1] = (
        _tmp260 * _tmp631
        + _tmp261 * _tmp632
        + _tmp262 * _tmp633
        + _tmp263 * _tmp634
        + _tmp265 * _tmp635
        + _tmp266 * _tmp636
        + _tmp267 * _tmp637
        + _tmp268 * _tmp638
        + _tmp270 * _tmp639
    )
    _hessian[17, 1] = (
        _tmp260 * _tmp640
        + _tmp261 * _tmp641
        + _tmp262 * _tmp642
        + _tmp263 * _tmp643
        + _tmp265 * _tmp644
        + _tmp266 * _tmp645
        + _tmp267 * _tmp646
        + _tmp268 * _tmp647
        + _tmp270 * _tmp648
    )
    _hessian[18, 1] = (
        _tmp260 * _tmp701
        + _tmp261 * _tmp702
        + _tmp262 * _tmp703
        + _tmp263 * _tmp704
        + _tmp265 * _tmp705
        + _tmp266 * _tmp706
        + _tmp267 * _tmp707
        + _tmp268 * _tmp708
        + _tmp270 * _tmp709
    )
    _hessian[19, 1] = (
        _tmp260 * _tmp740
        + _tmp261 * _tmp741
        + _tmp262 * _tmp742
        + _tmp263 * _tmp743
        + _tmp265 * _tmp744
        + _tmp266 * _tmp745
        + _tmp267 * _tmp746
        + _tmp268 * _tmp747
        + _tmp270 * _tmp748
    )
    _hessian[20, 1] = (
        _tmp260 * _tmp778
        + _tmp261 * _tmp779
        + _tmp262 * _tmp780
        + _tmp263 * _tmp781
        + _tmp265 * _tmp782
        + _tmp266 * _tmp783
        + _tmp267 * _tmp784
        + _tmp268 * _tmp785
        + _tmp270 * _tmp786
    )
    _hessian[21, 1] = (
        _tmp260 * _tmp787
        + _tmp261 * _tmp788
        + _tmp262 * _tmp789
        + _tmp263 * _tmp790
        + _tmp265 * _tmp791
        + _tmp266 * _tmp792
        + _tmp267 * _tmp793
        + _tmp268 * _tmp794
        + _tmp270 * _tmp795
    )
    _hessian[22, 1] = (
        _tmp260 * _tmp796
        + _tmp261 * _tmp797
        + _tmp262 * _tmp798
        + _tmp263 * _tmp799
        + _tmp265 * _tmp800
        + _tmp266 * _tmp801
        + _tmp267 * _tmp802
        + _tmp268 * _tmp803
        + _tmp270 * _tmp804
    )
    _hessian[23, 1] = (
        _tmp260 * _tmp805
        + _tmp261 * _tmp806
        + _tmp262 * _tmp807
        + _tmp263 * _tmp808
        + _tmp265 * _tmp809
        + _tmp266 * _tmp810
        + _tmp267 * _tmp811
        + _tmp268 * _tmp812
        + _tmp270 * _tmp813
    )
    _hessian[0, 2] = 0
    _hessian[1, 2] = 0
    _hessian[2, 2] = (
        _tmp296 ** 2
        + _tmp297 ** 2
        + _tmp298 ** 2
        + _tmp299 ** 2
        + _tmp300 ** 2
        + _tmp301 ** 2
        + _tmp302 ** 2
        + _tmp303 ** 2
        + _tmp304 ** 2
    )
    _hessian[3, 2] = (
        _tmp296 * _tmp311
        + _tmp297 * _tmp318
        + _tmp298 * _tmp325
        + _tmp299 * _tmp332
        + _tmp300 * _tmp339
        + _tmp301 * _tmp346
        + _tmp302 * _tmp353
        + _tmp303 * _tmp360
        + _tmp304 * _tmp367
    )
    _hessian[4, 2] = (
        _tmp296 * _tmp374
        + _tmp297 * _tmp381
        + _tmp298 * _tmp388
        + _tmp299 * _tmp395
        + _tmp300 * _tmp402
        + _tmp301 * _tmp409
        + _tmp302 * _tmp416
        + _tmp303 * _tmp423
        + _tmp304 * _tmp430
    )
    _hessian[5, 2] = (
        _tmp296 * _tmp437
        + _tmp297 * _tmp444
        + _tmp298 * _tmp451
        + _tmp299 * _tmp458
        + _tmp300 * _tmp465
        + _tmp301 * _tmp472
        + _tmp302 * _tmp479
        + _tmp303 * _tmp486
        + _tmp304 * _tmp493
    )
    _hessian[6, 2] = (
        _tmp296 * _tmp494
        + _tmp297 * _tmp495
        + _tmp298 * _tmp496
        + _tmp299 * _tmp497
        + _tmp300 * _tmp498
        + _tmp301 * _tmp499
        + _tmp302 * _tmp500
        + _tmp303 * _tmp501
        + _tmp304 * _tmp502
    )
    _hessian[7, 2] = (
        _tmp296 * _tmp503
        + _tmp297 * _tmp504
        + _tmp298 * _tmp505
        + _tmp299 * _tmp506
        + _tmp300 * _tmp507
        + _tmp301 * _tmp508
        + _tmp302 * _tmp509
        + _tmp303 * _tmp510
        + _tmp304 * _tmp511
    )
    _hessian[8, 2] = (
        _tmp296 * _tmp512
        + _tmp297 * _tmp513
        + _tmp298 * _tmp514
        + _tmp299 * _tmp515
        + _tmp300 * _tmp516
        + _tmp301 * _tmp517
        + _tmp302 * _tmp518
        + _tmp303 * _tmp519
        + _tmp304 * _tmp520
    )
    _hessian[9, 2] = (
        _tmp296 * _tmp547
        + _tmp297 * _tmp548
        + _tmp298 * _tmp549
        + _tmp299 * _tmp551
        + _tmp300 * _tmp552
        + _tmp301 * _tmp553
        + _tmp302 * _tmp554
        + _tmp303 * _tmp555
        + _tmp304 * _tmp556
    )
    _hessian[10, 2] = (
        _tmp296 * _tmp567
        + _tmp297 * _tmp568
        + _tmp298 * _tmp569
        + _tmp299 * _tmp570
        + _tmp300 * _tmp571
        + _tmp301 * _tmp572
        + _tmp302 * _tmp573
        + _tmp303 * _tmp575
        + _tmp304 * _tmp576
    )
    _hessian[11, 2] = (
        _tmp296 * _tmp586
        + _tmp297 * _tmp587
        + _tmp298 * _tmp588
        + _tmp299 * _tmp589
        + _tmp300 * _tmp590
        + _tmp301 * _tmp591
        + _tmp302 * _tmp592
        + _tmp303 * _tmp593
        + _tmp304 * _tmp594
    )
    _hessian[12, 2] = (
        _tmp296 * _tmp595
        + _tmp297 * _tmp596
        + _tmp298 * _tmp597
        + _tmp299 * _tmp598
        + _tmp300 * _tmp599
        + _tmp301 * _tmp600
        + _tmp302 * _tmp601
        + _tmp303 * _tmp602
        + _tmp304 * _tmp603
    )
    _hessian[13, 2] = (
        _tmp296 * _tmp604
        + _tmp297 * _tmp605
        + _tmp298 * _tmp606
        + _tmp299 * _tmp607
        + _tmp300 * _tmp608
        + _tmp301 * _tmp609
        + _tmp302 * _tmp610
        + _tmp303 * _tmp611
        + _tmp304 * _tmp612
    )
    _hessian[14, 2] = (
        _tmp296 * _tmp613
        + _tmp297 * _tmp614
        + _tmp298 * _tmp615
        + _tmp299 * _tmp616
        + _tmp300 * _tmp617
        + _tmp301 * _tmp618
        + _tmp302 * _tmp619
        + _tmp303 * _tmp620
        + _tmp304 * _tmp621
    )
    _hessian[15, 2] = (
        _tmp296 * _tmp622
        + _tmp297 * _tmp623
        + _tmp298 * _tmp624
        + _tmp299 * _tmp625
        + _tmp300 * _tmp626
        + _tmp301 * _tmp627
        + _tmp302 * _tmp628
        + _tmp303 * _tmp629
        + _tmp304 * _tmp630
    )
    _hessian[16, 2] = (
        _tmp296 * _tmp631
        + _tmp297 * _tmp632
        + _tmp298 * _tmp633
        + _tmp299 * _tmp634
        + _tmp300 * _tmp635
        + _tmp301 * _tmp636
        + _tmp302 * _tmp637
        + _tmp303 * _tmp638
        + _tmp304 * _tmp639
    )
    _hessian[17, 2] = (
        _tmp296 * _tmp640
        + _tmp297 * _tmp641
        + _tmp298 * _tmp642
        + _tmp299 * _tmp643
        + _tmp300 * _tmp644
        + _tmp301 * _tmp645
        + _tmp302 * _tmp646
        + _tmp303 * _tmp647
        + _tmp304 * _tmp648
    )
    _hessian[18, 2] = (
        _tmp296 * _tmp701
        + _tmp297 * _tmp702
        + _tmp298 * _tmp703
        + _tmp299 * _tmp704
        + _tmp300 * _tmp705
        + _tmp301 * _tmp706
        + _tmp302 * _tmp707
        + _tmp303 * _tmp708
        + _tmp304 * _tmp709
    )
    _hessian[19, 2] = (
        _tmp296 * _tmp740
        + _tmp297 * _tmp741
        + _tmp298 * _tmp742
        + _tmp299 * _tmp743
        + _tmp300 * _tmp744
        + _tmp301 * _tmp745
        + _tmp302 * _tmp746
        + _tmp303 * _tmp747
        + _tmp304 * _tmp748
    )
    _hessian[20, 2] = (
        _tmp296 * _tmp778
        + _tmp297 * _tmp779
        + _tmp298 * _tmp780
        + _tmp299 * _tmp781
        + _tmp300 * _tmp782
        + _tmp301 * _tmp783
        + _tmp302 * _tmp784
        + _tmp303 * _tmp785
        + _tmp304 * _tmp786
    )
    _hessian[21, 2] = (
        _tmp296 * _tmp787
        + _tmp297 * _tmp788
        + _tmp298 * _tmp789
        + _tmp299 * _tmp790
        + _tmp300 * _tmp791
        + _tmp301 * _tmp792
        + _tmp302 * _tmp793
        + _tmp303 * _tmp794
        + _tmp304 * _tmp795
    )
    _hessian[22, 2] = (
        _tmp296 * _tmp796
        + _tmp297 * _tmp797
        + _tmp298 * _tmp798
        + _tmp299 * _tmp799
        + _tmp300 * _tmp800
        + _tmp301 * _tmp801
        + _tmp302 * _tmp802
        + _tmp303 * _tmp803
        + _tmp304 * _tmp804
    )
    _hessian[23, 2] = (
        _tmp296 * _tmp805
        + _tmp297 * _tmp806
        + _tmp298 * _tmp807
        + _tmp299 * _tmp808
        + _tmp300 * _tmp809
        + _tmp301 * _tmp810
        + _tmp302 * _tmp811
        + _tmp303 * _tmp812
        + _tmp304 * _tmp813
    )
    _hessian[0, 3] = 0
    _hessian[1, 3] = 0
    _hessian[2, 3] = 0
    _hessian[3, 3] = (
        _tmp311 ** 2
        + _tmp318 ** 2
        + _tmp325 ** 2
        + _tmp332 ** 2
        + _tmp339 ** 2
        + _tmp346 ** 2
        + _tmp353 ** 2
        + _tmp360 ** 2
        + _tmp367 ** 2
    )
    _hessian[4, 3] = (
        _tmp311 * _tmp374
        + _tmp318 * _tmp381
        + _tmp325 * _tmp388
        + _tmp332 * _tmp395
        + _tmp339 * _tmp402
        + _tmp346 * _tmp409
        + _tmp353 * _tmp416
        + _tmp360 * _tmp423
        + _tmp367 * _tmp430
    )
    _hessian[5, 3] = (
        _tmp311 * _tmp437
        + _tmp318 * _tmp444
        + _tmp325 * _tmp451
        + _tmp332 * _tmp458
        + _tmp339 * _tmp465
        + _tmp346 * _tmp472
        + _tmp353 * _tmp479
        + _tmp360 * _tmp486
        + _tmp367 * _tmp493
    )
    _hessian[6, 3] = (
        _tmp311 * _tmp494
        + _tmp318 * _tmp495
        + _tmp325 * _tmp496
        + _tmp332 * _tmp497
        + _tmp339 * _tmp498
        + _tmp346 * _tmp499
        + _tmp353 * _tmp500
        + _tmp360 * _tmp501
        + _tmp367 * _tmp502
    )
    _hessian[7, 3] = (
        _tmp311 * _tmp503
        + _tmp318 * _tmp504
        + _tmp325 * _tmp505
        + _tmp332 * _tmp506
        + _tmp339 * _tmp507
        + _tmp346 * _tmp508
        + _tmp353 * _tmp509
        + _tmp360 * _tmp510
        + _tmp367 * _tmp511
    )
    _hessian[8, 3] = (
        _tmp311 * _tmp512
        + _tmp318 * _tmp513
        + _tmp325 * _tmp514
        + _tmp332 * _tmp515
        + _tmp339 * _tmp516
        + _tmp346 * _tmp517
        + _tmp353 * _tmp518
        + _tmp360 * _tmp519
        + _tmp367 * _tmp520
    )
    _hessian[9, 3] = (
        _tmp311 * _tmp547
        + _tmp318 * _tmp548
        + _tmp325 * _tmp549
        + _tmp332 * _tmp551
        + _tmp339 * _tmp552
        + _tmp346 * _tmp553
        + _tmp353 * _tmp554
        + _tmp360 * _tmp555
        + _tmp367 * _tmp556
    )
    _hessian[10, 3] = (
        _tmp311 * _tmp567
        + _tmp318 * _tmp568
        + _tmp325 * _tmp569
        + _tmp332 * _tmp570
        + _tmp339 * _tmp571
        + _tmp346 * _tmp572
        + _tmp353 * _tmp573
        + _tmp360 * _tmp575
        + _tmp367 * _tmp576
    )
    _hessian[11, 3] = (
        _tmp311 * _tmp586
        + _tmp318 * _tmp587
        + _tmp325 * _tmp588
        + _tmp332 * _tmp589
        + _tmp339 * _tmp590
        + _tmp346 * _tmp591
        + _tmp353 * _tmp592
        + _tmp360 * _tmp593
        + _tmp367 * _tmp594
    )
    _hessian[12, 3] = (
        _tmp311 * _tmp595
        + _tmp318 * _tmp596
        + _tmp325 * _tmp597
        + _tmp332 * _tmp598
        + _tmp339 * _tmp599
        + _tmp346 * _tmp600
        + _tmp353 * _tmp601
        + _tmp360 * _tmp602
        + _tmp367 * _tmp603
    )
    _hessian[13, 3] = (
        _tmp311 * _tmp604
        + _tmp318 * _tmp605
        + _tmp325 * _tmp606
        + _tmp332 * _tmp607
        + _tmp339 * _tmp608
        + _tmp346 * _tmp609
        + _tmp353 * _tmp610
        + _tmp360 * _tmp611
        + _tmp367 * _tmp612
    )
    _hessian[14, 3] = (
        _tmp311 * _tmp613
        + _tmp318 * _tmp614
        + _tmp325 * _tmp615
        + _tmp332 * _tmp616
        + _tmp339 * _tmp617
        + _tmp346 * _tmp618
        + _tmp353 * _tmp619
        + _tmp360 * _tmp620
        + _tmp367 * _tmp621
    )
    _hessian[15, 3] = (
        _tmp311 * _tmp622
        + _tmp318 * _tmp623
        + _tmp325 * _tmp624
        + _tmp332 * _tmp625
        + _tmp339 * _tmp626
        + _tmp346 * _tmp627
        + _tmp353 * _tmp628
        + _tmp360 * _tmp629
        + _tmp367 * _tmp630
    )
    _hessian[16, 3] = (
        _tmp311 * _tmp631
        + _tmp318 * _tmp632
        + _tmp325 * _tmp633
        + _tmp332 * _tmp634
        + _tmp339 * _tmp635
        + _tmp346 * _tmp636
        + _tmp353 * _tmp637
        + _tmp360 * _tmp638
        + _tmp367 * _tmp639
    )
    _hessian[17, 3] = (
        _tmp311 * _tmp640
        + _tmp318 * _tmp641
        + _tmp325 * _tmp642
        + _tmp332 * _tmp643
        + _tmp339 * _tmp644
        + _tmp346 * _tmp645
        + _tmp353 * _tmp646
        + _tmp360 * _tmp647
        + _tmp367 * _tmp648
    )
    _hessian[18, 3] = (
        _tmp311 * _tmp701
        + _tmp318 * _tmp702
        + _tmp325 * _tmp703
        + _tmp332 * _tmp704
        + _tmp339 * _tmp705
        + _tmp346 * _tmp706
        + _tmp353 * _tmp707
        + _tmp360 * _tmp708
        + _tmp367 * _tmp709
    )
    _hessian[19, 3] = (
        _tmp311 * _tmp740
        + _tmp318 * _tmp741
        + _tmp325 * _tmp742
        + _tmp332 * _tmp743
        + _tmp339 * _tmp744
        + _tmp346 * _tmp745
        + _tmp353 * _tmp746
        + _tmp360 * _tmp747
        + _tmp367 * _tmp748
    )
    _hessian[20, 3] = (
        _tmp311 * _tmp778
        + _tmp318 * _tmp779
        + _tmp325 * _tmp780
        + _tmp332 * _tmp781
        + _tmp339 * _tmp782
        + _tmp346 * _tmp783
        + _tmp353 * _tmp784
        + _tmp360 * _tmp785
        + _tmp367 * _tmp786
    )
    _hessian[21, 3] = (
        _tmp311 * _tmp787
        + _tmp318 * _tmp788
        + _tmp325 * _tmp789
        + _tmp332 * _tmp790
        + _tmp339 * _tmp791
        + _tmp346 * _tmp792
        + _tmp353 * _tmp793
        + _tmp360 * _tmp794
        + _tmp367 * _tmp795
    )
    _hessian[22, 3] = (
        _tmp311 * _tmp796
        + _tmp318 * _tmp797
        + _tmp325 * _tmp798
        + _tmp332 * _tmp799
        + _tmp339 * _tmp800
        + _tmp346 * _tmp801
        + _tmp353 * _tmp802
        + _tmp360 * _tmp803
        + _tmp367 * _tmp804
    )
    _hessian[23, 3] = (
        _tmp311 * _tmp805
        + _tmp318 * _tmp806
        + _tmp325 * _tmp807
        + _tmp332 * _tmp808
        + _tmp339 * _tmp809
        + _tmp346 * _tmp810
        + _tmp353 * _tmp811
        + _tmp360 * _tmp812
        + _tmp367 * _tmp813
    )
    _hessian[0, 4] = 0
    _hessian[1, 4] = 0
    _hessian[2, 4] = 0
    _hessian[3, 4] = 0
    _hessian[4, 4] = (
        _tmp374 ** 2
        + _tmp381 ** 2
        + _tmp388 ** 2
        + _tmp395 ** 2
        + _tmp402 ** 2
        + _tmp409 ** 2
        + _tmp416 ** 2
        + _tmp423 ** 2
        + _tmp430 ** 2
    )
    _hessian[5, 4] = (
        _tmp374 * _tmp437
        + _tmp381 * _tmp444
        + _tmp388 * _tmp451
        + _tmp395 * _tmp458
        + _tmp402 * _tmp465
        + _tmp409 * _tmp472
        + _tmp416 * _tmp479
        + _tmp423 * _tmp486
        + _tmp430 * _tmp493
    )
    _hessian[6, 4] = (
        _tmp374 * _tmp494
        + _tmp381 * _tmp495
        + _tmp388 * _tmp496
        + _tmp395 * _tmp497
        + _tmp402 * _tmp498
        + _tmp409 * _tmp499
        + _tmp416 * _tmp500
        + _tmp423 * _tmp501
        + _tmp430 * _tmp502
    )
    _hessian[7, 4] = (
        _tmp374 * _tmp503
        + _tmp381 * _tmp504
        + _tmp388 * _tmp505
        + _tmp395 * _tmp506
        + _tmp402 * _tmp507
        + _tmp409 * _tmp508
        + _tmp416 * _tmp509
        + _tmp423 * _tmp510
        + _tmp430 * _tmp511
    )
    _hessian[8, 4] = (
        _tmp374 * _tmp512
        + _tmp381 * _tmp513
        + _tmp388 * _tmp514
        + _tmp395 * _tmp515
        + _tmp402 * _tmp516
        + _tmp409 * _tmp517
        + _tmp416 * _tmp518
        + _tmp423 * _tmp519
        + _tmp430 * _tmp520
    )
    _hessian[9, 4] = (
        _tmp374 * _tmp547
        + _tmp381 * _tmp548
        + _tmp388 * _tmp549
        + _tmp395 * _tmp551
        + _tmp402 * _tmp552
        + _tmp409 * _tmp553
        + _tmp416 * _tmp554
        + _tmp423 * _tmp555
        + _tmp430 * _tmp556
    )
    _hessian[10, 4] = (
        _tmp374 * _tmp567
        + _tmp381 * _tmp568
        + _tmp388 * _tmp569
        + _tmp395 * _tmp570
        + _tmp402 * _tmp571
        + _tmp409 * _tmp572
        + _tmp416 * _tmp573
        + _tmp423 * _tmp575
        + _tmp430 * _tmp576
    )
    _hessian[11, 4] = (
        _tmp374 * _tmp586
        + _tmp381 * _tmp587
        + _tmp388 * _tmp588
        + _tmp395 * _tmp589
        + _tmp402 * _tmp590
        + _tmp409 * _tmp591
        + _tmp416 * _tmp592
        + _tmp423 * _tmp593
        + _tmp430 * _tmp594
    )
    _hessian[12, 4] = (
        _tmp374 * _tmp595
        + _tmp381 * _tmp596
        + _tmp388 * _tmp597
        + _tmp395 * _tmp598
        + _tmp402 * _tmp599
        + _tmp409 * _tmp600
        + _tmp416 * _tmp601
        + _tmp423 * _tmp602
        + _tmp430 * _tmp603
    )
    _hessian[13, 4] = (
        _tmp374 * _tmp604
        + _tmp381 * _tmp605
        + _tmp388 * _tmp606
        + _tmp395 * _tmp607
        + _tmp402 * _tmp608
        + _tmp409 * _tmp609
        + _tmp416 * _tmp610
        + _tmp423 * _tmp611
        + _tmp430 * _tmp612
    )
    _hessian[14, 4] = (
        _tmp374 * _tmp613
        + _tmp381 * _tmp614
        + _tmp388 * _tmp615
        + _tmp395 * _tmp616
        + _tmp402 * _tmp617
        + _tmp409 * _tmp618
        + _tmp416 * _tmp619
        + _tmp423 * _tmp620
        + _tmp430 * _tmp621
    )
    _hessian[15, 4] = (
        _tmp374 * _tmp622
        + _tmp381 * _tmp623
        + _tmp388 * _tmp624
        + _tmp395 * _tmp625
        + _tmp402 * _tmp626
        + _tmp409 * _tmp627
        + _tmp416 * _tmp628
        + _tmp423 * _tmp629
        + _tmp430 * _tmp630
    )
    _hessian[16, 4] = (
        _tmp374 * _tmp631
        + _tmp381 * _tmp632
        + _tmp388 * _tmp633
        + _tmp395 * _tmp634
        + _tmp402 * _tmp635
        + _tmp409 * _tmp636
        + _tmp416 * _tmp637
        + _tmp423 * _tmp638
        + _tmp430 * _tmp639
    )
    _hessian[17, 4] = (
        _tmp374 * _tmp640
        + _tmp381 * _tmp641
        + _tmp388 * _tmp642
        + _tmp395 * _tmp643
        + _tmp402 * _tmp644
        + _tmp409 * _tmp645
        + _tmp416 * _tmp646
        + _tmp423 * _tmp647
        + _tmp430 * _tmp648
    )
    _hessian[18, 4] = (
        _tmp374 * _tmp701
        + _tmp381 * _tmp702
        + _tmp388 * _tmp703
        + _tmp395 * _tmp704
        + _tmp402 * _tmp705
        + _tmp409 * _tmp706
        + _tmp416 * _tmp707
        + _tmp423 * _tmp708
        + _tmp430 * _tmp709
    )
    _hessian[19, 4] = (
        _tmp374 * _tmp740
        + _tmp381 * _tmp741
        + _tmp388 * _tmp742
        + _tmp395 * _tmp743
        + _tmp402 * _tmp744
        + _tmp409 * _tmp745
        + _tmp416 * _tmp746
        + _tmp423 * _tmp747
        + _tmp430 * _tmp748
    )
    _hessian[20, 4] = (
        _tmp374 * _tmp778
        + _tmp381 * _tmp779
        + _tmp388 * _tmp780
        + _tmp395 * _tmp781
        + _tmp402 * _tmp782
        + _tmp409 * _tmp783
        + _tmp416 * _tmp784
        + _tmp423 * _tmp785
        + _tmp430 * _tmp786
    )
    _hessian[21, 4] = (
        _tmp374 * _tmp787
        + _tmp381 * _tmp788
        + _tmp388 * _tmp789
        + _tmp395 * _tmp790
        + _tmp402 * _tmp791
        + _tmp409 * _tmp792
        + _tmp416 * _tmp793
        + _tmp423 * _tmp794
        + _tmp430 * _tmp795
    )
    _hessian[22, 4] = (
        _tmp374 * _tmp796
        + _tmp381 * _tmp797
        + _tmp388 * _tmp798
        + _tmp395 * _tmp799
        + _tmp402 * _tmp800
        + _tmp409 * _tmp801
        + _tmp416 * _tmp802
        + _tmp423 * _tmp803
        + _tmp430 * _tmp804
    )
    _hessian[23, 4] = (
        _tmp374 * _tmp805
        + _tmp381 * _tmp806
        + _tmp388 * _tmp807
        + _tmp395 * _tmp808
        + _tmp402 * _tmp809
        + _tmp409 * _tmp810
        + _tmp416 * _tmp811
        + _tmp423 * _tmp812
        + _tmp430 * _tmp813
    )
    _hessian[0, 5] = 0
    _hessian[1, 5] = 0
    _hessian[2, 5] = 0
    _hessian[3, 5] = 0
    _hessian[4, 5] = 0
    _hessian[5, 5] = (
        _tmp437 ** 2
        + _tmp444 ** 2
        + _tmp451 ** 2
        + _tmp458 ** 2
        + _tmp465 ** 2
        + _tmp472 ** 2
        + _tmp479 ** 2
        + _tmp486 ** 2
        + _tmp493 ** 2
    )
    _hessian[6, 5] = (
        _tmp437 * _tmp494
        + _tmp444 * _tmp495
        + _tmp451 * _tmp496
        + _tmp458 * _tmp497
        + _tmp465 * _tmp498
        + _tmp472 * _tmp499
        + _tmp479 * _tmp500
        + _tmp486 * _tmp501
        + _tmp493 * _tmp502
    )
    _hessian[7, 5] = (
        _tmp437 * _tmp503
        + _tmp444 * _tmp504
        + _tmp451 * _tmp505
        + _tmp458 * _tmp506
        + _tmp465 * _tmp507
        + _tmp472 * _tmp508
        + _tmp479 * _tmp509
        + _tmp486 * _tmp510
        + _tmp493 * _tmp511
    )
    _hessian[8, 5] = (
        _tmp437 * _tmp512
        + _tmp444 * _tmp513
        + _tmp451 * _tmp514
        + _tmp458 * _tmp515
        + _tmp465 * _tmp516
        + _tmp472 * _tmp517
        + _tmp479 * _tmp518
        + _tmp486 * _tmp519
        + _tmp493 * _tmp520
    )
    _hessian[9, 5] = (
        _tmp437 * _tmp547
        + _tmp444 * _tmp548
        + _tmp451 * _tmp549
        + _tmp458 * _tmp551
        + _tmp465 * _tmp552
        + _tmp472 * _tmp553
        + _tmp479 * _tmp554
        + _tmp486 * _tmp555
        + _tmp493 * _tmp556
    )
    _hessian[10, 5] = (
        _tmp437 * _tmp567
        + _tmp444 * _tmp568
        + _tmp451 * _tmp569
        + _tmp458 * _tmp570
        + _tmp465 * _tmp571
        + _tmp472 * _tmp572
        + _tmp479 * _tmp573
        + _tmp486 * _tmp575
        + _tmp493 * _tmp576
    )
    _hessian[11, 5] = (
        _tmp437 * _tmp586
        + _tmp444 * _tmp587
        + _tmp451 * _tmp588
        + _tmp458 * _tmp589
        + _tmp465 * _tmp590
        + _tmp472 * _tmp591
        + _tmp479 * _tmp592
        + _tmp486 * _tmp593
        + _tmp493 * _tmp594
    )
    _hessian[12, 5] = (
        _tmp437 * _tmp595
        + _tmp444 * _tmp596
        + _tmp451 * _tmp597
        + _tmp458 * _tmp598
        + _tmp465 * _tmp599
        + _tmp472 * _tmp600
        + _tmp479 * _tmp601
        + _tmp486 * _tmp602
        + _tmp493 * _tmp603
    )
    _hessian[13, 5] = (
        _tmp437 * _tmp604
        + _tmp444 * _tmp605
        + _tmp451 * _tmp606
        + _tmp458 * _tmp607
        + _tmp465 * _tmp608
        + _tmp472 * _tmp609
        + _tmp479 * _tmp610
        + _tmp486 * _tmp611
        + _tmp493 * _tmp612
    )
    _hessian[14, 5] = (
        _tmp437 * _tmp613
        + _tmp444 * _tmp614
        + _tmp451 * _tmp615
        + _tmp458 * _tmp616
        + _tmp465 * _tmp617
        + _tmp472 * _tmp618
        + _tmp479 * _tmp619
        + _tmp486 * _tmp620
        + _tmp493 * _tmp621
    )
    _hessian[15, 5] = (
        _tmp437 * _tmp622
        + _tmp444 * _tmp623
        + _tmp451 * _tmp624
        + _tmp458 * _tmp625
        + _tmp465 * _tmp626
        + _tmp472 * _tmp627
        + _tmp479 * _tmp628
        + _tmp486 * _tmp629
        + _tmp493 * _tmp630
    )
    _hessian[16, 5] = (
        _tmp437 * _tmp631
        + _tmp444 * _tmp632
        + _tmp451 * _tmp633
        + _tmp458 * _tmp634
        + _tmp465 * _tmp635
        + _tmp472 * _tmp636
        + _tmp479 * _tmp637
        + _tmp486 * _tmp638
        + _tmp493 * _tmp639
    )
    _hessian[17, 5] = (
        _tmp437 * _tmp640
        + _tmp444 * _tmp641
        + _tmp451 * _tmp642
        + _tmp458 * _tmp643
        + _tmp465 * _tmp644
        + _tmp472 * _tmp645
        + _tmp479 * _tmp646
        + _tmp486 * _tmp647
        + _tmp493 * _tmp648
    )
    _hessian[18, 5] = (
        _tmp437 * _tmp701
        + _tmp444 * _tmp702
        + _tmp451 * _tmp703
        + _tmp458 * _tmp704
        + _tmp465 * _tmp705
        + _tmp472 * _tmp706
        + _tmp479 * _tmp707
        + _tmp486 * _tmp708
        + _tmp493 * _tmp709
    )
    _hessian[19, 5] = (
        _tmp437 * _tmp740
        + _tmp444 * _tmp741
        + _tmp451 * _tmp742
        + _tmp458 * _tmp743
        + _tmp465 * _tmp744
        + _tmp472 * _tmp745
        + _tmp479 * _tmp746
        + _tmp486 * _tmp747
        + _tmp493 * _tmp748
    )
    _hessian[20, 5] = (
        _tmp437 * _tmp778
        + _tmp444 * _tmp779
        + _tmp451 * _tmp780
        + _tmp458 * _tmp781
        + _tmp465 * _tmp782
        + _tmp472 * _tmp783
        + _tmp479 * _tmp784
        + _tmp486 * _tmp785
        + _tmp493 * _tmp786
    )
    _hessian[21, 5] = (
        _tmp437 * _tmp787
        + _tmp444 * _tmp788
        + _tmp451 * _tmp789
        + _tmp458 * _tmp790
        + _tmp465 * _tmp791
        + _tmp472 * _tmp792
        + _tmp479 * _tmp793
        + _tmp486 * _tmp794
        + _tmp493 * _tmp795
    )
    _hessian[22, 5] = (
        _tmp437 * _tmp796
        + _tmp444 * _tmp797
        + _tmp451 * _tmp798
        + _tmp458 * _tmp799
        + _tmp465 * _tmp800
        + _tmp472 * _tmp801
        + _tmp479 * _tmp802
        + _tmp486 * _tmp803
        + _tmp493 * _tmp804
    )
    _hessian[23, 5] = (
        _tmp437 * _tmp805
        + _tmp444 * _tmp806
        + _tmp451 * _tmp807
        + _tmp458 * _tmp808
        + _tmp465 * _tmp809
        + _tmp472 * _tmp810
        + _tmp479 * _tmp811
        + _tmp486 * _tmp812
        + _tmp493 * _tmp813
    )
    _hessian[0, 6] = 0
    _hessian[1, 6] = 0
    _hessian[2, 6] = 0
    _hessian[3, 6] = 0
    _hessian[4, 6] = 0
    _hessian[5, 6] = 0
    _hessian[6, 6] = (
        _tmp494 ** 2
        + _tmp495 ** 2
        + _tmp496 ** 2
        + _tmp497 ** 2
        + _tmp498 ** 2
        + _tmp499 ** 2
        + _tmp500 ** 2
        + _tmp501 ** 2
        + _tmp502 ** 2
    )
    _hessian[7, 6] = (
        _tmp494 * _tmp503
        + _tmp495 * _tmp504
        + _tmp496 * _tmp505
        + _tmp497 * _tmp506
        + _tmp498 * _tmp507
        + _tmp499 * _tmp508
        + _tmp500 * _tmp509
        + _tmp501 * _tmp510
        + _tmp502 * _tmp511
    )
    _hessian[8, 6] = (
        _tmp494 * _tmp512
        + _tmp495 * _tmp513
        + _tmp496 * _tmp514
        + _tmp497 * _tmp515
        + _tmp498 * _tmp516
        + _tmp499 * _tmp517
        + _tmp500 * _tmp518
        + _tmp501 * _tmp519
        + _tmp502 * _tmp520
    )
    _hessian[9, 6] = (
        _tmp494 * _tmp547
        + _tmp495 * _tmp548
        + _tmp496 * _tmp549
        + _tmp497 * _tmp551
        + _tmp498 * _tmp552
        + _tmp499 * _tmp553
        + _tmp500 * _tmp554
        + _tmp501 * _tmp555
        + _tmp502 * _tmp556
    )
    _hessian[10, 6] = (
        _tmp494 * _tmp567
        + _tmp495 * _tmp568
        + _tmp496 * _tmp569
        + _tmp497 * _tmp570
        + _tmp498 * _tmp571
        + _tmp499 * _tmp572
        + _tmp500 * _tmp573
        + _tmp501 * _tmp575
        + _tmp502 * _tmp576
    )
    _hessian[11, 6] = (
        _tmp494 * _tmp586
        + _tmp495 * _tmp587
        + _tmp496 * _tmp588
        + _tmp497 * _tmp589
        + _tmp498 * _tmp590
        + _tmp499 * _tmp591
        + _tmp500 * _tmp592
        + _tmp501 * _tmp593
        + _tmp502 * _tmp594
    )
    _hessian[12, 6] = (
        _tmp494 * _tmp595
        + _tmp495 * _tmp596
        + _tmp496 * _tmp597
        + _tmp497 * _tmp598
        + _tmp498 * _tmp599
        + _tmp499 * _tmp600
        + _tmp500 * _tmp601
        + _tmp501 * _tmp602
        + _tmp502 * _tmp603
    )
    _hessian[13, 6] = (
        _tmp494 * _tmp604
        + _tmp495 * _tmp605
        + _tmp496 * _tmp606
        + _tmp497 * _tmp607
        + _tmp498 * _tmp608
        + _tmp499 * _tmp609
        + _tmp500 * _tmp610
        + _tmp501 * _tmp611
        + _tmp502 * _tmp612
    )
    _hessian[14, 6] = (
        _tmp494 * _tmp613
        + _tmp495 * _tmp614
        + _tmp496 * _tmp615
        + _tmp497 * _tmp616
        + _tmp498 * _tmp617
        + _tmp499 * _tmp618
        + _tmp500 * _tmp619
        + _tmp501 * _tmp620
        + _tmp502 * _tmp621
    )
    _hessian[15, 6] = (
        _tmp494 * _tmp622
        + _tmp495 * _tmp623
        + _tmp496 * _tmp624
        + _tmp497 * _tmp625
        + _tmp498 * _tmp626
        + _tmp499 * _tmp627
        + _tmp500 * _tmp628
        + _tmp501 * _tmp629
        + _tmp502 * _tmp630
    )
    _hessian[16, 6] = (
        _tmp494 * _tmp631
        + _tmp495 * _tmp632
        + _tmp496 * _tmp633
        + _tmp497 * _tmp634
        + _tmp498 * _tmp635
        + _tmp499 * _tmp636
        + _tmp500 * _tmp637
        + _tmp501 * _tmp638
        + _tmp502 * _tmp639
    )
    _hessian[17, 6] = (
        _tmp494 * _tmp640
        + _tmp495 * _tmp641
        + _tmp496 * _tmp642
        + _tmp497 * _tmp643
        + _tmp498 * _tmp644
        + _tmp499 * _tmp645
        + _tmp500 * _tmp646
        + _tmp501 * _tmp647
        + _tmp502 * _tmp648
    )
    _hessian[18, 6] = (
        _tmp494 * _tmp701
        + _tmp495 * _tmp702
        + _tmp496 * _tmp703
        + _tmp497 * _tmp704
        + _tmp498 * _tmp705
        + _tmp499 * _tmp706
        + _tmp500 * _tmp707
        + _tmp501 * _tmp708
        + _tmp502 * _tmp709
    )
    _hessian[19, 6] = (
        _tmp494 * _tmp740
        + _tmp495 * _tmp741
        + _tmp496 * _tmp742
        + _tmp497 * _tmp743
        + _tmp498 * _tmp744
        + _tmp499 * _tmp745
        + _tmp500 * _tmp746
        + _tmp501 * _tmp747
        + _tmp502 * _tmp748
    )
    _hessian[20, 6] = (
        _tmp494 * _tmp778
        + _tmp495 * _tmp779
        + _tmp496 * _tmp780
        + _tmp497 * _tmp781
        + _tmp498 * _tmp782
        + _tmp499 * _tmp783
        + _tmp500 * _tmp784
        + _tmp501 * _tmp785
        + _tmp502 * _tmp786
    )
    _hessian[21, 6] = (
        _tmp494 * _tmp787
        + _tmp495 * _tmp788
        + _tmp496 * _tmp789
        + _tmp497 * _tmp790
        + _tmp498 * _tmp791
        + _tmp499 * _tmp792
        + _tmp500 * _tmp793
        + _tmp501 * _tmp794
        + _tmp502 * _tmp795
    )
    _hessian[22, 6] = (
        _tmp494 * _tmp796
        + _tmp495 * _tmp797
        + _tmp496 * _tmp798
        + _tmp497 * _tmp799
        + _tmp498 * _tmp800
        + _tmp499 * _tmp801
        + _tmp500 * _tmp802
        + _tmp501 * _tmp803
        + _tmp502 * _tmp804
    )
    _hessian[23, 6] = (
        _tmp494 * _tmp805
        + _tmp495 * _tmp806
        + _tmp496 * _tmp807
        + _tmp497 * _tmp808
        + _tmp498 * _tmp809
        + _tmp499 * _tmp810
        + _tmp500 * _tmp811
        + _tmp501 * _tmp812
        + _tmp502 * _tmp813
    )
    _hessian[0, 7] = 0
    _hessian[1, 7] = 0
    _hessian[2, 7] = 0
    _hessian[3, 7] = 0
    _hessian[4, 7] = 0
    _hessian[5, 7] = 0
    _hessian[6, 7] = 0
    _hessian[7, 7] = (
        _tmp503 ** 2
        + _tmp504 ** 2
        + _tmp505 ** 2
        + _tmp506 ** 2
        + _tmp507 ** 2
        + _tmp508 ** 2
        + _tmp509 ** 2
        + _tmp510 ** 2
        + _tmp511 ** 2
    )
    _hessian[8, 7] = (
        _tmp503 * _tmp512
        + _tmp504 * _tmp513
        + _tmp505 * _tmp514
        + _tmp506 * _tmp515
        + _tmp507 * _tmp516
        + _tmp508 * _tmp517
        + _tmp509 * _tmp518
        + _tmp510 * _tmp519
        + _tmp511 * _tmp520
    )
    _hessian[9, 7] = (
        _tmp503 * _tmp547
        + _tmp504 * _tmp548
        + _tmp505 * _tmp549
        + _tmp506 * _tmp551
        + _tmp507 * _tmp552
        + _tmp508 * _tmp553
        + _tmp509 * _tmp554
        + _tmp510 * _tmp555
        + _tmp511 * _tmp556
    )
    _hessian[10, 7] = (
        _tmp503 * _tmp567
        + _tmp504 * _tmp568
        + _tmp505 * _tmp569
        + _tmp506 * _tmp570
        + _tmp507 * _tmp571
        + _tmp508 * _tmp572
        + _tmp509 * _tmp573
        + _tmp510 * _tmp575
        + _tmp511 * _tmp576
    )
    _hessian[11, 7] = (
        _tmp503 * _tmp586
        + _tmp504 * _tmp587
        + _tmp505 * _tmp588
        + _tmp506 * _tmp589
        + _tmp507 * _tmp590
        + _tmp508 * _tmp591
        + _tmp509 * _tmp592
        + _tmp510 * _tmp593
        + _tmp511 * _tmp594
    )
    _hessian[12, 7] = (
        _tmp503 * _tmp595
        + _tmp504 * _tmp596
        + _tmp505 * _tmp597
        + _tmp506 * _tmp598
        + _tmp507 * _tmp599
        + _tmp508 * _tmp600
        + _tmp509 * _tmp601
        + _tmp510 * _tmp602
        + _tmp511 * _tmp603
    )
    _hessian[13, 7] = (
        _tmp503 * _tmp604
        + _tmp504 * _tmp605
        + _tmp505 * _tmp606
        + _tmp506 * _tmp607
        + _tmp507 * _tmp608
        + _tmp508 * _tmp609
        + _tmp509 * _tmp610
        + _tmp510 * _tmp611
        + _tmp511 * _tmp612
    )
    _hessian[14, 7] = (
        _tmp503 * _tmp613
        + _tmp504 * _tmp614
        + _tmp505 * _tmp615
        + _tmp506 * _tmp616
        + _tmp507 * _tmp617
        + _tmp508 * _tmp618
        + _tmp509 * _tmp619
        + _tmp510 * _tmp620
        + _tmp511 * _tmp621
    )
    _hessian[15, 7] = (
        _tmp503 * _tmp622
        + _tmp504 * _tmp623
        + _tmp505 * _tmp624
        + _tmp506 * _tmp625
        + _tmp507 * _tmp626
        + _tmp508 * _tmp627
        + _tmp509 * _tmp628
        + _tmp510 * _tmp629
        + _tmp511 * _tmp630
    )
    _hessian[16, 7] = (
        _tmp503 * _tmp631
        + _tmp504 * _tmp632
        + _tmp505 * _tmp633
        + _tmp506 * _tmp634
        + _tmp507 * _tmp635
        + _tmp508 * _tmp636
        + _tmp509 * _tmp637
        + _tmp510 * _tmp638
        + _tmp511 * _tmp639
    )
    _hessian[17, 7] = (
        _tmp503 * _tmp640
        + _tmp504 * _tmp641
        + _tmp505 * _tmp642
        + _tmp506 * _tmp643
        + _tmp507 * _tmp644
        + _tmp508 * _tmp645
        + _tmp509 * _tmp646
        + _tmp510 * _tmp647
        + _tmp511 * _tmp648
    )
    _hessian[18, 7] = (
        _tmp503 * _tmp701
        + _tmp504 * _tmp702
        + _tmp505 * _tmp703
        + _tmp506 * _tmp704
        + _tmp507 * _tmp705
        + _tmp508 * _tmp706
        + _tmp509 * _tmp707
        + _tmp510 * _tmp708
        + _tmp511 * _tmp709
    )
    _hessian[19, 7] = (
        _tmp503 * _tmp740
        + _tmp504 * _tmp741
        + _tmp505 * _tmp742
        + _tmp506 * _tmp743
        + _tmp507 * _tmp744
        + _tmp508 * _tmp745
        + _tmp509 * _tmp746
        + _tmp510 * _tmp747
        + _tmp511 * _tmp748
    )
    _hessian[20, 7] = (
        _tmp503 * _tmp778
        + _tmp504 * _tmp779
        + _tmp505 * _tmp780
        + _tmp506 * _tmp781
        + _tmp507 * _tmp782
        + _tmp508 * _tmp783
        + _tmp509 * _tmp784
        + _tmp510 * _tmp785
        + _tmp511 * _tmp786
    )
    _hessian[21, 7] = (
        _tmp503 * _tmp787
        + _tmp504 * _tmp788
        + _tmp505 * _tmp789
        + _tmp506 * _tmp790
        + _tmp507 * _tmp791
        + _tmp508 * _tmp792
        + _tmp509 * _tmp793
        + _tmp510 * _tmp794
        + _tmp511 * _tmp795
    )
    _hessian[22, 7] = (
        _tmp503 * _tmp796
        + _tmp504 * _tmp797
        + _tmp505 * _tmp798
        + _tmp506 * _tmp799
        + _tmp507 * _tmp800
        + _tmp508 * _tmp801
        + _tmp509 * _tmp802
        + _tmp510 * _tmp803
        + _tmp511 * _tmp804
    )
    _hessian[23, 7] = (
        _tmp503 * _tmp805
        + _tmp504 * _tmp806
        + _tmp505 * _tmp807
        + _tmp506 * _tmp808
        + _tmp507 * _tmp809
        + _tmp508 * _tmp810
        + _tmp509 * _tmp811
        + _tmp510 * _tmp812
        + _tmp511 * _tmp813
    )
    _hessian[0, 8] = 0
    _hessian[1, 8] = 0
    _hessian[2, 8] = 0
    _hessian[3, 8] = 0
    _hessian[4, 8] = 0
    _hessian[5, 8] = 0
    _hessian[6, 8] = 0
    _hessian[7, 8] = 0
    _hessian[8, 8] = (
        _tmp512 ** 2
        + _tmp513 ** 2
        + _tmp514 ** 2
        + _tmp515 ** 2
        + _tmp516 ** 2
        + _tmp517 ** 2
        + _tmp518 ** 2
        + _tmp519 ** 2
        + _tmp520 ** 2
    )
    _hessian[9, 8] = (
        _tmp512 * _tmp547
        + _tmp513 * _tmp548
        + _tmp514 * _tmp549
        + _tmp515 * _tmp551
        + _tmp516 * _tmp552
        + _tmp517 * _tmp553
        + _tmp518 * _tmp554
        + _tmp519 * _tmp555
        + _tmp520 * _tmp556
    )
    _hessian[10, 8] = (
        _tmp512 * _tmp567
        + _tmp513 * _tmp568
        + _tmp514 * _tmp569
        + _tmp515 * _tmp570
        + _tmp516 * _tmp571
        + _tmp517 * _tmp572
        + _tmp518 * _tmp573
        + _tmp519 * _tmp575
        + _tmp520 * _tmp576
    )
    _hessian[11, 8] = (
        _tmp512 * _tmp586
        + _tmp513 * _tmp587
        + _tmp514 * _tmp588
        + _tmp515 * _tmp589
        + _tmp516 * _tmp590
        + _tmp517 * _tmp591
        + _tmp518 * _tmp592
        + _tmp519 * _tmp593
        + _tmp520 * _tmp594
    )
    _hessian[12, 8] = (
        _tmp512 * _tmp595
        + _tmp513 * _tmp596
        + _tmp514 * _tmp597
        + _tmp515 * _tmp598
        + _tmp516 * _tmp599
        + _tmp517 * _tmp600
        + _tmp518 * _tmp601
        + _tmp519 * _tmp602
        + _tmp520 * _tmp603
    )
    _hessian[13, 8] = (
        _tmp512 * _tmp604
        + _tmp513 * _tmp605
        + _tmp514 * _tmp606
        + _tmp515 * _tmp607
        + _tmp516 * _tmp608
        + _tmp517 * _tmp609
        + _tmp518 * _tmp610
        + _tmp519 * _tmp611
        + _tmp520 * _tmp612
    )
    _hessian[14, 8] = (
        _tmp512 * _tmp613
        + _tmp513 * _tmp614
        + _tmp514 * _tmp615
        + _tmp515 * _tmp616
        + _tmp516 * _tmp617
        + _tmp517 * _tmp618
        + _tmp518 * _tmp619
        + _tmp519 * _tmp620
        + _tmp520 * _tmp621
    )
    _hessian[15, 8] = (
        _tmp512 * _tmp622
        + _tmp513 * _tmp623
        + _tmp514 * _tmp624
        + _tmp515 * _tmp625
        + _tmp516 * _tmp626
        + _tmp517 * _tmp627
        + _tmp518 * _tmp628
        + _tmp519 * _tmp629
        + _tmp520 * _tmp630
    )
    _hessian[16, 8] = (
        _tmp512 * _tmp631
        + _tmp513 * _tmp632
        + _tmp514 * _tmp633
        + _tmp515 * _tmp634
        + _tmp516 * _tmp635
        + _tmp517 * _tmp636
        + _tmp518 * _tmp637
        + _tmp519 * _tmp638
        + _tmp520 * _tmp639
    )
    _hessian[17, 8] = (
        _tmp512 * _tmp640
        + _tmp513 * _tmp641
        + _tmp514 * _tmp642
        + _tmp515 * _tmp643
        + _tmp516 * _tmp644
        + _tmp517 * _tmp645
        + _tmp518 * _tmp646
        + _tmp519 * _tmp647
        + _tmp520 * _tmp648
    )
    _hessian[18, 8] = (
        _tmp512 * _tmp701
        + _tmp513 * _tmp702
        + _tmp514 * _tmp703
        + _tmp515 * _tmp704
        + _tmp516 * _tmp705
        + _tmp517 * _tmp706
        + _tmp518 * _tmp707
        + _tmp519 * _tmp708
        + _tmp520 * _tmp709
    )
    _hessian[19, 8] = (
        _tmp512 * _tmp740
        + _tmp513 * _tmp741
        + _tmp514 * _tmp742
        + _tmp515 * _tmp743
        + _tmp516 * _tmp744
        + _tmp517 * _tmp745
        + _tmp518 * _tmp746
        + _tmp519 * _tmp747
        + _tmp520 * _tmp748
    )
    _hessian[20, 8] = (
        _tmp512 * _tmp778
        + _tmp513 * _tmp779
        + _tmp514 * _tmp780
        + _tmp515 * _tmp781
        + _tmp516 * _tmp782
        + _tmp517 * _tmp783
        + _tmp518 * _tmp784
        + _tmp519 * _tmp785
        + _tmp520 * _tmp786
    )
    _hessian[21, 8] = (
        _tmp512 * _tmp787
        + _tmp513 * _tmp788
        + _tmp514 * _tmp789
        + _tmp515 * _tmp790
        + _tmp516 * _tmp791
        + _tmp517 * _tmp792
        + _tmp518 * _tmp793
        + _tmp519 * _tmp794
        + _tmp520 * _tmp795
    )
    _hessian[22, 8] = (
        _tmp512 * _tmp796
        + _tmp513 * _tmp797
        + _tmp514 * _tmp798
        + _tmp515 * _tmp799
        + _tmp516 * _tmp800
        + _tmp517 * _tmp801
        + _tmp518 * _tmp802
        + _tmp519 * _tmp803
        + _tmp520 * _tmp804
    )
    _hessian[23, 8] = (
        _tmp512 * _tmp805
        + _tmp513 * _tmp806
        + _tmp514 * _tmp807
        + _tmp515 * _tmp808
        + _tmp516 * _tmp809
        + _tmp517 * _tmp810
        + _tmp518 * _tmp811
        + _tmp519 * _tmp812
        + _tmp520 * _tmp813
    )
    _hessian[0, 9] = 0
    _hessian[1, 9] = 0
    _hessian[2, 9] = 0
    _hessian[3, 9] = 0
    _hessian[4, 9] = 0
    _hessian[5, 9] = 0
    _hessian[6, 9] = 0
    _hessian[7, 9] = 0
    _hessian[8, 9] = 0
    _hessian[9, 9] = (
        _tmp547 ** 2
        + _tmp548 ** 2
        + _tmp549 ** 2
        + _tmp551 ** 2
        + _tmp552 ** 2
        + _tmp553 ** 2
        + _tmp554 ** 2
        + _tmp555 ** 2
        + _tmp556 ** 2
    )
    _hessian[10, 9] = (
        _tmp547 * _tmp567
        + _tmp548 * _tmp568
        + _tmp549 * _tmp569
        + _tmp551 * _tmp570
        + _tmp552 * _tmp571
        + _tmp553 * _tmp572
        + _tmp554 * _tmp573
        + _tmp555 * _tmp575
        + _tmp556 * _tmp576
    )
    _hessian[11, 9] = (
        _tmp547 * _tmp586
        + _tmp548 * _tmp587
        + _tmp549 * _tmp588
        + _tmp551 * _tmp589
        + _tmp552 * _tmp590
        + _tmp553 * _tmp591
        + _tmp554 * _tmp592
        + _tmp555 * _tmp593
        + _tmp556 * _tmp594
    )
    _hessian[12, 9] = (
        _tmp547 * _tmp595
        + _tmp548 * _tmp596
        + _tmp549 * _tmp597
        + _tmp551 * _tmp598
        + _tmp552 * _tmp599
        + _tmp553 * _tmp600
        + _tmp554 * _tmp601
        + _tmp555 * _tmp602
        + _tmp556 * _tmp603
    )
    _hessian[13, 9] = (
        _tmp547 * _tmp604
        + _tmp548 * _tmp605
        + _tmp549 * _tmp606
        + _tmp551 * _tmp607
        + _tmp552 * _tmp608
        + _tmp553 * _tmp609
        + _tmp554 * _tmp610
        + _tmp555 * _tmp611
        + _tmp556 * _tmp612
    )
    _hessian[14, 9] = (
        _tmp547 * _tmp613
        + _tmp548 * _tmp614
        + _tmp549 * _tmp615
        + _tmp551 * _tmp616
        + _tmp552 * _tmp617
        + _tmp553 * _tmp618
        + _tmp554 * _tmp619
        + _tmp555 * _tmp620
        + _tmp556 * _tmp621
    )
    _hessian[15, 9] = (
        _tmp547 * _tmp622
        + _tmp548 * _tmp623
        + _tmp549 * _tmp624
        + _tmp551 * _tmp625
        + _tmp552 * _tmp626
        + _tmp553 * _tmp627
        + _tmp554 * _tmp628
        + _tmp555 * _tmp629
        + _tmp556 * _tmp630
    )
    _hessian[16, 9] = (
        _tmp547 * _tmp631
        + _tmp548 * _tmp632
        + _tmp549 * _tmp633
        + _tmp551 * _tmp634
        + _tmp552 * _tmp635
        + _tmp553 * _tmp636
        + _tmp554 * _tmp637
        + _tmp555 * _tmp638
        + _tmp556 * _tmp639
    )
    _hessian[17, 9] = (
        _tmp547 * _tmp640
        + _tmp548 * _tmp641
        + _tmp549 * _tmp642
        + _tmp551 * _tmp643
        + _tmp552 * _tmp644
        + _tmp553 * _tmp645
        + _tmp554 * _tmp646
        + _tmp555 * _tmp647
        + _tmp556 * _tmp648
    )
    _hessian[18, 9] = (
        _tmp547 * _tmp701
        + _tmp548 * _tmp702
        + _tmp549 * _tmp703
        + _tmp551 * _tmp704
        + _tmp552 * _tmp705
        + _tmp553 * _tmp706
        + _tmp554 * _tmp707
        + _tmp555 * _tmp708
        + _tmp556 * _tmp709
    )
    _hessian[19, 9] = (
        _tmp547 * _tmp740
        + _tmp548 * _tmp741
        + _tmp549 * _tmp742
        + _tmp551 * _tmp743
        + _tmp552 * _tmp744
        + _tmp553 * _tmp745
        + _tmp554 * _tmp746
        + _tmp555 * _tmp747
        + _tmp556 * _tmp748
    )
    _hessian[20, 9] = (
        _tmp547 * _tmp778
        + _tmp548 * _tmp779
        + _tmp549 * _tmp780
        + _tmp551 * _tmp781
        + _tmp552 * _tmp782
        + _tmp553 * _tmp783
        + _tmp554 * _tmp784
        + _tmp555 * _tmp785
        + _tmp556 * _tmp786
    )
    _hessian[21, 9] = (
        _tmp547 * _tmp787
        + _tmp548 * _tmp788
        + _tmp549 * _tmp789
        + _tmp551 * _tmp790
        + _tmp552 * _tmp791
        + _tmp553 * _tmp792
        + _tmp554 * _tmp793
        + _tmp555 * _tmp794
        + _tmp556 * _tmp795
    )
    _hessian[22, 9] = (
        _tmp547 * _tmp796
        + _tmp548 * _tmp797
        + _tmp549 * _tmp798
        + _tmp551 * _tmp799
        + _tmp552 * _tmp800
        + _tmp553 * _tmp801
        + _tmp554 * _tmp802
        + _tmp555 * _tmp803
        + _tmp556 * _tmp804
    )
    _hessian[23, 9] = (
        _tmp547 * _tmp805
        + _tmp548 * _tmp806
        + _tmp549 * _tmp807
        + _tmp551 * _tmp808
        + _tmp552 * _tmp809
        + _tmp553 * _tmp810
        + _tmp554 * _tmp811
        + _tmp555 * _tmp812
        + _tmp556 * _tmp813
    )
    _hessian[0, 10] = 0
    _hessian[1, 10] = 0
    _hessian[2, 10] = 0
    _hessian[3, 10] = 0
    _hessian[4, 10] = 0
    _hessian[5, 10] = 0
    _hessian[6, 10] = 0
    _hessian[7, 10] = 0
    _hessian[8, 10] = 0
    _hessian[9, 10] = 0
    _hessian[10, 10] = (
        _tmp567 ** 2
        + _tmp568 ** 2
        + _tmp569 ** 2
        + _tmp570 ** 2
        + _tmp571 ** 2
        + _tmp572 ** 2
        + _tmp573 ** 2
        + _tmp575 ** 2
        + _tmp576 ** 2
    )
    _hessian[11, 10] = (
        _tmp567 * _tmp586
        + _tmp568 * _tmp587
        + _tmp569 * _tmp588
        + _tmp570 * _tmp589
        + _tmp571 * _tmp590
        + _tmp572 * _tmp591
        + _tmp573 * _tmp592
        + _tmp575 * _tmp593
        + _tmp576 * _tmp594
    )
    _hessian[12, 10] = (
        _tmp567 * _tmp595
        + _tmp568 * _tmp596
        + _tmp569 * _tmp597
        + _tmp570 * _tmp598
        + _tmp571 * _tmp599
        + _tmp572 * _tmp600
        + _tmp573 * _tmp601
        + _tmp575 * _tmp602
        + _tmp576 * _tmp603
    )
    _hessian[13, 10] = (
        _tmp567 * _tmp604
        + _tmp568 * _tmp605
        + _tmp569 * _tmp606
        + _tmp570 * _tmp607
        + _tmp571 * _tmp608
        + _tmp572 * _tmp609
        + _tmp573 * _tmp610
        + _tmp575 * _tmp611
        + _tmp576 * _tmp612
    )
    _hessian[14, 10] = (
        _tmp567 * _tmp613
        + _tmp568 * _tmp614
        + _tmp569 * _tmp615
        + _tmp570 * _tmp616
        + _tmp571 * _tmp617
        + _tmp572 * _tmp618
        + _tmp573 * _tmp619
        + _tmp575 * _tmp620
        + _tmp576 * _tmp621
    )
    _hessian[15, 10] = (
        _tmp567 * _tmp622
        + _tmp568 * _tmp623
        + _tmp569 * _tmp624
        + _tmp570 * _tmp625
        + _tmp571 * _tmp626
        + _tmp572 * _tmp627
        + _tmp573 * _tmp628
        + _tmp575 * _tmp629
        + _tmp576 * _tmp630
    )
    _hessian[16, 10] = (
        _tmp567 * _tmp631
        + _tmp568 * _tmp632
        + _tmp569 * _tmp633
        + _tmp570 * _tmp634
        + _tmp571 * _tmp635
        + _tmp572 * _tmp636
        + _tmp573 * _tmp637
        + _tmp575 * _tmp638
        + _tmp576 * _tmp639
    )
    _hessian[17, 10] = (
        _tmp567 * _tmp640
        + _tmp568 * _tmp641
        + _tmp569 * _tmp642
        + _tmp570 * _tmp643
        + _tmp571 * _tmp644
        + _tmp572 * _tmp645
        + _tmp573 * _tmp646
        + _tmp575 * _tmp647
        + _tmp576 * _tmp648
    )
    _hessian[18, 10] = (
        _tmp567 * _tmp701
        + _tmp568 * _tmp702
        + _tmp569 * _tmp703
        + _tmp570 * _tmp704
        + _tmp571 * _tmp705
        + _tmp572 * _tmp706
        + _tmp573 * _tmp707
        + _tmp575 * _tmp708
        + _tmp576 * _tmp709
    )
    _hessian[19, 10] = (
        _tmp567 * _tmp740
        + _tmp568 * _tmp741
        + _tmp569 * _tmp742
        + _tmp570 * _tmp743
        + _tmp571 * _tmp744
        + _tmp572 * _tmp745
        + _tmp573 * _tmp746
        + _tmp575 * _tmp747
        + _tmp576 * _tmp748
    )
    _hessian[20, 10] = (
        _tmp567 * _tmp778
        + _tmp568 * _tmp779
        + _tmp569 * _tmp780
        + _tmp570 * _tmp781
        + _tmp571 * _tmp782
        + _tmp572 * _tmp783
        + _tmp573 * _tmp784
        + _tmp575 * _tmp785
        + _tmp576 * _tmp786
    )
    _hessian[21, 10] = (
        _tmp567 * _tmp787
        + _tmp568 * _tmp788
        + _tmp569 * _tmp789
        + _tmp570 * _tmp790
        + _tmp571 * _tmp791
        + _tmp572 * _tmp792
        + _tmp573 * _tmp793
        + _tmp575 * _tmp794
        + _tmp576 * _tmp795
    )
    _hessian[22, 10] = (
        _tmp567 * _tmp796
        + _tmp568 * _tmp797
        + _tmp569 * _tmp798
        + _tmp570 * _tmp799
        + _tmp571 * _tmp800
        + _tmp572 * _tmp801
        + _tmp573 * _tmp802
        + _tmp575 * _tmp803
        + _tmp576 * _tmp804
    )
    _hessian[23, 10] = (
        _tmp567 * _tmp805
        + _tmp568 * _tmp806
        + _tmp569 * _tmp807
        + _tmp570 * _tmp808
        + _tmp571 * _tmp809
        + _tmp572 * _tmp810
        + _tmp573 * _tmp811
        + _tmp575 * _tmp812
        + _tmp576 * _tmp813
    )
    _hessian[0, 11] = 0
    _hessian[1, 11] = 0
    _hessian[2, 11] = 0
    _hessian[3, 11] = 0
    _hessian[4, 11] = 0
    _hessian[5, 11] = 0
    _hessian[6, 11] = 0
    _hessian[7, 11] = 0
    _hessian[8, 11] = 0
    _hessian[9, 11] = 0
    _hessian[10, 11] = 0
    _hessian[11, 11] = (
        _tmp586 ** 2
        + _tmp587 ** 2
        + _tmp588 ** 2
        + _tmp589 ** 2
        + _tmp590 ** 2
        + _tmp591 ** 2
        + _tmp592 ** 2
        + _tmp593 ** 2
        + _tmp594 ** 2
    )
    _hessian[12, 11] = (
        _tmp586 * _tmp595
        + _tmp587 * _tmp596
        + _tmp588 * _tmp597
        + _tmp589 * _tmp598
        + _tmp590 * _tmp599
        + _tmp591 * _tmp600
        + _tmp592 * _tmp601
        + _tmp593 * _tmp602
        + _tmp594 * _tmp603
    )
    _hessian[13, 11] = (
        _tmp586 * _tmp604
        + _tmp587 * _tmp605
        + _tmp588 * _tmp606
        + _tmp589 * _tmp607
        + _tmp590 * _tmp608
        + _tmp591 * _tmp609
        + _tmp592 * _tmp610
        + _tmp593 * _tmp611
        + _tmp594 * _tmp612
    )
    _hessian[14, 11] = (
        _tmp586 * _tmp613
        + _tmp587 * _tmp614
        + _tmp588 * _tmp615
        + _tmp589 * _tmp616
        + _tmp590 * _tmp617
        + _tmp591 * _tmp618
        + _tmp592 * _tmp619
        + _tmp593 * _tmp620
        + _tmp594 * _tmp621
    )
    _hessian[15, 11] = (
        _tmp586 * _tmp622
        + _tmp587 * _tmp623
        + _tmp588 * _tmp624
        + _tmp589 * _tmp625
        + _tmp590 * _tmp626
        + _tmp591 * _tmp627
        + _tmp592 * _tmp628
        + _tmp593 * _tmp629
        + _tmp594 * _tmp630
    )
    _hessian[16, 11] = (
        _tmp586 * _tmp631
        + _tmp587 * _tmp632
        + _tmp588 * _tmp633
        + _tmp589 * _tmp634
        + _tmp590 * _tmp635
        + _tmp591 * _tmp636
        + _tmp592 * _tmp637
        + _tmp593 * _tmp638
        + _tmp594 * _tmp639
    )
    _hessian[17, 11] = (
        _tmp586 * _tmp640
        + _tmp587 * _tmp641
        + _tmp588 * _tmp642
        + _tmp589 * _tmp643
        + _tmp590 * _tmp644
        + _tmp591 * _tmp645
        + _tmp592 * _tmp646
        + _tmp593 * _tmp647
        + _tmp594 * _tmp648
    )
    _hessian[18, 11] = (
        _tmp586 * _tmp701
        + _tmp587 * _tmp702
        + _tmp588 * _tmp703
        + _tmp589 * _tmp704
        + _tmp590 * _tmp705
        + _tmp591 * _tmp706
        + _tmp592 * _tmp707
        + _tmp593 * _tmp708
        + _tmp594 * _tmp709
    )
    _hessian[19, 11] = (
        _tmp586 * _tmp740
        + _tmp587 * _tmp741
        + _tmp588 * _tmp742
        + _tmp589 * _tmp743
        + _tmp590 * _tmp744
        + _tmp591 * _tmp745
        + _tmp592 * _tmp746
        + _tmp593 * _tmp747
        + _tmp594 * _tmp748
    )
    _hessian[20, 11] = (
        _tmp586 * _tmp778
        + _tmp587 * _tmp779
        + _tmp588 * _tmp780
        + _tmp589 * _tmp781
        + _tmp590 * _tmp782
        + _tmp591 * _tmp783
        + _tmp592 * _tmp784
        + _tmp593 * _tmp785
        + _tmp594 * _tmp786
    )
    _hessian[21, 11] = (
        _tmp586 * _tmp787
        + _tmp587 * _tmp788
        + _tmp588 * _tmp789
        + _tmp589 * _tmp790
        + _tmp590 * _tmp791
        + _tmp591 * _tmp792
        + _tmp592 * _tmp793
        + _tmp593 * _tmp794
        + _tmp594 * _tmp795
    )
    _hessian[22, 11] = (
        _tmp586 * _tmp796
        + _tmp587 * _tmp797
        + _tmp588 * _tmp798
        + _tmp589 * _tmp799
        + _tmp590 * _tmp800
        + _tmp591 * _tmp801
        + _tmp592 * _tmp802
        + _tmp593 * _tmp803
        + _tmp594 * _tmp804
    )
    _hessian[23, 11] = (
        _tmp586 * _tmp805
        + _tmp587 * _tmp806
        + _tmp588 * _tmp807
        + _tmp589 * _tmp808
        + _tmp590 * _tmp809
        + _tmp591 * _tmp810
        + _tmp592 * _tmp811
        + _tmp593 * _tmp812
        + _tmp594 * _tmp813
    )
    _hessian[0, 12] = 0
    _hessian[1, 12] = 0
    _hessian[2, 12] = 0
    _hessian[3, 12] = 0
    _hessian[4, 12] = 0
    _hessian[5, 12] = 0
    _hessian[6, 12] = 0
    _hessian[7, 12] = 0
    _hessian[8, 12] = 0
    _hessian[9, 12] = 0
    _hessian[10, 12] = 0
    _hessian[11, 12] = 0
    _hessian[12, 12] = (
        _tmp595 ** 2
        + _tmp596 ** 2
        + _tmp597 ** 2
        + _tmp598 ** 2
        + _tmp599 ** 2
        + _tmp600 ** 2
        + _tmp601 ** 2
        + _tmp602 ** 2
        + _tmp603 ** 2
    )
    _hessian[13, 12] = (
        _tmp595 * _tmp604
        + _tmp596 * _tmp605
        + _tmp597 * _tmp606
        + _tmp598 * _tmp607
        + _tmp599 * _tmp608
        + _tmp600 * _tmp609
        + _tmp601 * _tmp610
        + _tmp602 * _tmp611
        + _tmp603 * _tmp612
    )
    _hessian[14, 12] = (
        _tmp595 * _tmp613
        + _tmp596 * _tmp614
        + _tmp597 * _tmp615
        + _tmp598 * _tmp616
        + _tmp599 * _tmp617
        + _tmp600 * _tmp618
        + _tmp601 * _tmp619
        + _tmp602 * _tmp620
        + _tmp603 * _tmp621
    )
    _hessian[15, 12] = (
        _tmp595 * _tmp622
        + _tmp596 * _tmp623
        + _tmp597 * _tmp624
        + _tmp598 * _tmp625
        + _tmp599 * _tmp626
        + _tmp600 * _tmp627
        + _tmp601 * _tmp628
        + _tmp602 * _tmp629
        + _tmp603 * _tmp630
    )
    _hessian[16, 12] = (
        _tmp595 * _tmp631
        + _tmp596 * _tmp632
        + _tmp597 * _tmp633
        + _tmp598 * _tmp634
        + _tmp599 * _tmp635
        + _tmp600 * _tmp636
        + _tmp601 * _tmp637
        + _tmp602 * _tmp638
        + _tmp603 * _tmp639
    )
    _hessian[17, 12] = (
        _tmp595 * _tmp640
        + _tmp596 * _tmp641
        + _tmp597 * _tmp642
        + _tmp598 * _tmp643
        + _tmp599 * _tmp644
        + _tmp600 * _tmp645
        + _tmp601 * _tmp646
        + _tmp602 * _tmp647
        + _tmp603 * _tmp648
    )
    _hessian[18, 12] = (
        _tmp595 * _tmp701
        + _tmp596 * _tmp702
        + _tmp597 * _tmp703
        + _tmp598 * _tmp704
        + _tmp599 * _tmp705
        + _tmp600 * _tmp706
        + _tmp601 * _tmp707
        + _tmp602 * _tmp708
        + _tmp603 * _tmp709
    )
    _hessian[19, 12] = (
        _tmp595 * _tmp740
        + _tmp596 * _tmp741
        + _tmp597 * _tmp742
        + _tmp598 * _tmp743
        + _tmp599 * _tmp744
        + _tmp600 * _tmp745
        + _tmp601 * _tmp746
        + _tmp602 * _tmp747
        + _tmp603 * _tmp748
    )
    _hessian[20, 12] = (
        _tmp595 * _tmp778
        + _tmp596 * _tmp779
        + _tmp597 * _tmp780
        + _tmp598 * _tmp781
        + _tmp599 * _tmp782
        + _tmp600 * _tmp783
        + _tmp601 * _tmp784
        + _tmp602 * _tmp785
        + _tmp603 * _tmp786
    )
    _hessian[21, 12] = (
        _tmp595 * _tmp787
        + _tmp596 * _tmp788
        + _tmp597 * _tmp789
        + _tmp598 * _tmp790
        + _tmp599 * _tmp791
        + _tmp600 * _tmp792
        + _tmp601 * _tmp793
        + _tmp602 * _tmp794
        + _tmp603 * _tmp795
    )
    _hessian[22, 12] = (
        _tmp595 * _tmp796
        + _tmp596 * _tmp797
        + _tmp597 * _tmp798
        + _tmp598 * _tmp799
        + _tmp599 * _tmp800
        + _tmp600 * _tmp801
        + _tmp601 * _tmp802
        + _tmp602 * _tmp803
        + _tmp603 * _tmp804
    )
    _hessian[23, 12] = (
        _tmp595 * _tmp805
        + _tmp596 * _tmp806
        + _tmp597 * _tmp807
        + _tmp598 * _tmp808
        + _tmp599 * _tmp809
        + _tmp600 * _tmp810
        + _tmp601 * _tmp811
        + _tmp602 * _tmp812
        + _tmp603 * _tmp813
    )
    _hessian[0, 13] = 0
    _hessian[1, 13] = 0
    _hessian[2, 13] = 0
    _hessian[3, 13] = 0
    _hessian[4, 13] = 0
    _hessian[5, 13] = 0
    _hessian[6, 13] = 0
    _hessian[7, 13] = 0
    _hessian[8, 13] = 0
    _hessian[9, 13] = 0
    _hessian[10, 13] = 0
    _hessian[11, 13] = 0
    _hessian[12, 13] = 0
    _hessian[13, 13] = (
        _tmp604 ** 2
        + _tmp605 ** 2
        + _tmp606 ** 2
        + _tmp607 ** 2
        + _tmp608 ** 2
        + _tmp609 ** 2
        + _tmp610 ** 2
        + _tmp611 ** 2
        + _tmp612 ** 2
    )
    _hessian[14, 13] = (
        _tmp604 * _tmp613
        + _tmp605 * _tmp614
        + _tmp606 * _tmp615
        + _tmp607 * _tmp616
        + _tmp608 * _tmp617
        + _tmp609 * _tmp618
        + _tmp610 * _tmp619
        + _tmp611 * _tmp620
        + _tmp612 * _tmp621
    )
    _hessian[15, 13] = (
        _tmp604 * _tmp622
        + _tmp605 * _tmp623
        + _tmp606 * _tmp624
        + _tmp607 * _tmp625
        + _tmp608 * _tmp626
        + _tmp609 * _tmp627
        + _tmp610 * _tmp628
        + _tmp611 * _tmp629
        + _tmp612 * _tmp630
    )
    _hessian[16, 13] = (
        _tmp604 * _tmp631
        + _tmp605 * _tmp632
        + _tmp606 * _tmp633
        + _tmp607 * _tmp634
        + _tmp608 * _tmp635
        + _tmp609 * _tmp636
        + _tmp610 * _tmp637
        + _tmp611 * _tmp638
        + _tmp612 * _tmp639
    )
    _hessian[17, 13] = (
        _tmp604 * _tmp640
        + _tmp605 * _tmp641
        + _tmp606 * _tmp642
        + _tmp607 * _tmp643
        + _tmp608 * _tmp644
        + _tmp609 * _tmp645
        + _tmp610 * _tmp646
        + _tmp611 * _tmp647
        + _tmp612 * _tmp648
    )
    _hessian[18, 13] = (
        _tmp604 * _tmp701
        + _tmp605 * _tmp702
        + _tmp606 * _tmp703
        + _tmp607 * _tmp704
        + _tmp608 * _tmp705
        + _tmp609 * _tmp706
        + _tmp610 * _tmp707
        + _tmp611 * _tmp708
        + _tmp612 * _tmp709
    )
    _hessian[19, 13] = (
        _tmp604 * _tmp740
        + _tmp605 * _tmp741
        + _tmp606 * _tmp742
        + _tmp607 * _tmp743
        + _tmp608 * _tmp744
        + _tmp609 * _tmp745
        + _tmp610 * _tmp746
        + _tmp611 * _tmp747
        + _tmp612 * _tmp748
    )
    _hessian[20, 13] = (
        _tmp604 * _tmp778
        + _tmp605 * _tmp779
        + _tmp606 * _tmp780
        + _tmp607 * _tmp781
        + _tmp608 * _tmp782
        + _tmp609 * _tmp783
        + _tmp610 * _tmp784
        + _tmp611 * _tmp785
        + _tmp612 * _tmp786
    )
    _hessian[21, 13] = (
        _tmp604 * _tmp787
        + _tmp605 * _tmp788
        + _tmp606 * _tmp789
        + _tmp607 * _tmp790
        + _tmp608 * _tmp791
        + _tmp609 * _tmp792
        + _tmp610 * _tmp793
        + _tmp611 * _tmp794
        + _tmp612 * _tmp795
    )
    _hessian[22, 13] = (
        _tmp604 * _tmp796
        + _tmp605 * _tmp797
        + _tmp606 * _tmp798
        + _tmp607 * _tmp799
        + _tmp608 * _tmp800
        + _tmp609 * _tmp801
        + _tmp610 * _tmp802
        + _tmp611 * _tmp803
        + _tmp612 * _tmp804
    )
    _hessian[23, 13] = (
        _tmp604 * _tmp805
        + _tmp605 * _tmp806
        + _tmp606 * _tmp807
        + _tmp607 * _tmp808
        + _tmp608 * _tmp809
        + _tmp609 * _tmp810
        + _tmp610 * _tmp811
        + _tmp611 * _tmp812
        + _tmp612 * _tmp813
    )
    _hessian[0, 14] = 0
    _hessian[1, 14] = 0
    _hessian[2, 14] = 0
    _hessian[3, 14] = 0
    _hessian[4, 14] = 0
    _hessian[5, 14] = 0
    _hessian[6, 14] = 0
    _hessian[7, 14] = 0
    _hessian[8, 14] = 0
    _hessian[9, 14] = 0
    _hessian[10, 14] = 0
    _hessian[11, 14] = 0
    _hessian[12, 14] = 0
    _hessian[13, 14] = 0
    _hessian[14, 14] = (
        _tmp613 ** 2
        + _tmp614 ** 2
        + _tmp615 ** 2
        + _tmp616 ** 2
        + _tmp617 ** 2
        + _tmp618 ** 2
        + _tmp619 ** 2
        + _tmp620 ** 2
        + _tmp621 ** 2
    )
    _hessian[15, 14] = (
        _tmp613 * _tmp622
        + _tmp614 * _tmp623
        + _tmp615 * _tmp624
        + _tmp616 * _tmp625
        + _tmp617 * _tmp626
        + _tmp618 * _tmp627
        + _tmp619 * _tmp628
        + _tmp620 * _tmp629
        + _tmp621 * _tmp630
    )
    _hessian[16, 14] = (
        _tmp613 * _tmp631
        + _tmp614 * _tmp632
        + _tmp615 * _tmp633
        + _tmp616 * _tmp634
        + _tmp617 * _tmp635
        + _tmp618 * _tmp636
        + _tmp619 * _tmp637
        + _tmp620 * _tmp638
        + _tmp621 * _tmp639
    )
    _hessian[17, 14] = (
        _tmp613 * _tmp640
        + _tmp614 * _tmp641
        + _tmp615 * _tmp642
        + _tmp616 * _tmp643
        + _tmp617 * _tmp644
        + _tmp618 * _tmp645
        + _tmp619 * _tmp646
        + _tmp620 * _tmp647
        + _tmp621 * _tmp648
    )
    _hessian[18, 14] = (
        _tmp613 * _tmp701
        + _tmp614 * _tmp702
        + _tmp615 * _tmp703
        + _tmp616 * _tmp704
        + _tmp617 * _tmp705
        + _tmp618 * _tmp706
        + _tmp619 * _tmp707
        + _tmp620 * _tmp708
        + _tmp621 * _tmp709
    )
    _hessian[19, 14] = (
        _tmp613 * _tmp740
        + _tmp614 * _tmp741
        + _tmp615 * _tmp742
        + _tmp616 * _tmp743
        + _tmp617 * _tmp744
        + _tmp618 * _tmp745
        + _tmp619 * _tmp746
        + _tmp620 * _tmp747
        + _tmp621 * _tmp748
    )
    _hessian[20, 14] = (
        _tmp613 * _tmp778
        + _tmp614 * _tmp779
        + _tmp615 * _tmp780
        + _tmp616 * _tmp781
        + _tmp617 * _tmp782
        + _tmp618 * _tmp783
        + _tmp619 * _tmp784
        + _tmp620 * _tmp785
        + _tmp621 * _tmp786
    )
    _hessian[21, 14] = (
        _tmp613 * _tmp787
        + _tmp614 * _tmp788
        + _tmp615 * _tmp789
        + _tmp616 * _tmp790
        + _tmp617 * _tmp791
        + _tmp618 * _tmp792
        + _tmp619 * _tmp793
        + _tmp620 * _tmp794
        + _tmp621 * _tmp795
    )
    _hessian[22, 14] = (
        _tmp613 * _tmp796
        + _tmp614 * _tmp797
        + _tmp615 * _tmp798
        + _tmp616 * _tmp799
        + _tmp617 * _tmp800
        + _tmp618 * _tmp801
        + _tmp619 * _tmp802
        + _tmp620 * _tmp803
        + _tmp621 * _tmp804
    )
    _hessian[23, 14] = (
        _tmp613 * _tmp805
        + _tmp614 * _tmp806
        + _tmp615 * _tmp807
        + _tmp616 * _tmp808
        + _tmp617 * _tmp809
        + _tmp618 * _tmp810
        + _tmp619 * _tmp811
        + _tmp620 * _tmp812
        + _tmp621 * _tmp813
    )
    _hessian[0, 15] = 0
    _hessian[1, 15] = 0
    _hessian[2, 15] = 0
    _hessian[3, 15] = 0
    _hessian[4, 15] = 0
    _hessian[5, 15] = 0
    _hessian[6, 15] = 0
    _hessian[7, 15] = 0
    _hessian[8, 15] = 0
    _hessian[9, 15] = 0
    _hessian[10, 15] = 0
    _hessian[11, 15] = 0
    _hessian[12, 15] = 0
    _hessian[13, 15] = 0
    _hessian[14, 15] = 0
    _hessian[15, 15] = (
        _tmp622 ** 2
        + _tmp623 ** 2
        + _tmp624 ** 2
        + _tmp625 ** 2
        + _tmp626 ** 2
        + _tmp627 ** 2
        + _tmp628 ** 2
        + _tmp629 ** 2
        + _tmp630 ** 2
    )
    _hessian[16, 15] = (
        _tmp622 * _tmp631
        + _tmp623 * _tmp632
        + _tmp624 * _tmp633
        + _tmp625 * _tmp634
        + _tmp626 * _tmp635
        + _tmp627 * _tmp636
        + _tmp628 * _tmp637
        + _tmp629 * _tmp638
        + _tmp630 * _tmp639
    )
    _hessian[17, 15] = (
        _tmp622 * _tmp640
        + _tmp623 * _tmp641
        + _tmp624 * _tmp642
        + _tmp625 * _tmp643
        + _tmp626 * _tmp644
        + _tmp627 * _tmp645
        + _tmp628 * _tmp646
        + _tmp629 * _tmp647
        + _tmp630 * _tmp648
    )
    _hessian[18, 15] = (
        _tmp622 * _tmp701
        + _tmp623 * _tmp702
        + _tmp624 * _tmp703
        + _tmp625 * _tmp704
        + _tmp626 * _tmp705
        + _tmp627 * _tmp706
        + _tmp628 * _tmp707
        + _tmp629 * _tmp708
        + _tmp630 * _tmp709
    )
    _hessian[19, 15] = (
        _tmp622 * _tmp740
        + _tmp623 * _tmp741
        + _tmp624 * _tmp742
        + _tmp625 * _tmp743
        + _tmp626 * _tmp744
        + _tmp627 * _tmp745
        + _tmp628 * _tmp746
        + _tmp629 * _tmp747
        + _tmp630 * _tmp748
    )
    _hessian[20, 15] = (
        _tmp622 * _tmp778
        + _tmp623 * _tmp779
        + _tmp624 * _tmp780
        + _tmp625 * _tmp781
        + _tmp626 * _tmp782
        + _tmp627 * _tmp783
        + _tmp628 * _tmp784
        + _tmp629 * _tmp785
        + _tmp630 * _tmp786
    )
    _hessian[21, 15] = (
        _tmp622 * _tmp787
        + _tmp623 * _tmp788
        + _tmp624 * _tmp789
        + _tmp625 * _tmp790
        + _tmp626 * _tmp791
        + _tmp627 * _tmp792
        + _tmp628 * _tmp793
        + _tmp629 * _tmp794
        + _tmp630 * _tmp795
    )
    _hessian[22, 15] = (
        _tmp622 * _tmp796
        + _tmp623 * _tmp797
        + _tmp624 * _tmp798
        + _tmp625 * _tmp799
        + _tmp626 * _tmp800
        + _tmp627 * _tmp801
        + _tmp628 * _tmp802
        + _tmp629 * _tmp803
        + _tmp630 * _tmp804
    )
    _hessian[23, 15] = (
        _tmp622 * _tmp805
        + _tmp623 * _tmp806
        + _tmp624 * _tmp807
        + _tmp625 * _tmp808
        + _tmp626 * _tmp809
        + _tmp627 * _tmp810
        + _tmp628 * _tmp811
        + _tmp629 * _tmp812
        + _tmp630 * _tmp813
    )
    _hessian[0, 16] = 0
    _hessian[1, 16] = 0
    _hessian[2, 16] = 0
    _hessian[3, 16] = 0
    _hessian[4, 16] = 0
    _hessian[5, 16] = 0
    _hessian[6, 16] = 0
    _hessian[7, 16] = 0
    _hessian[8, 16] = 0
    _hessian[9, 16] = 0
    _hessian[10, 16] = 0
    _hessian[11, 16] = 0
    _hessian[12, 16] = 0
    _hessian[13, 16] = 0
    _hessian[14, 16] = 0
    _hessian[15, 16] = 0
    _hessian[16, 16] = (
        _tmp631 ** 2
        + _tmp632 ** 2
        + _tmp633 ** 2
        + _tmp634 ** 2
        + _tmp635 ** 2
        + _tmp636 ** 2
        + _tmp637 ** 2
        + _tmp638 ** 2
        + _tmp639 ** 2
    )
    _hessian[17, 16] = (
        _tmp631 * _tmp640
        + _tmp632 * _tmp641
        + _tmp633 * _tmp642
        + _tmp634 * _tmp643
        + _tmp635 * _tmp644
        + _tmp636 * _tmp645
        + _tmp637 * _tmp646
        + _tmp638 * _tmp647
        + _tmp639 * _tmp648
    )
    _hessian[18, 16] = (
        _tmp631 * _tmp701
        + _tmp632 * _tmp702
        + _tmp633 * _tmp703
        + _tmp634 * _tmp704
        + _tmp635 * _tmp705
        + _tmp636 * _tmp706
        + _tmp637 * _tmp707
        + _tmp638 * _tmp708
        + _tmp639 * _tmp709
    )
    _hessian[19, 16] = (
        _tmp631 * _tmp740
        + _tmp632 * _tmp741
        + _tmp633 * _tmp742
        + _tmp634 * _tmp743
        + _tmp635 * _tmp744
        + _tmp636 * _tmp745
        + _tmp637 * _tmp746
        + _tmp638 * _tmp747
        + _tmp639 * _tmp748
    )
    _hessian[20, 16] = (
        _tmp631 * _tmp778
        + _tmp632 * _tmp779
        + _tmp633 * _tmp780
        + _tmp634 * _tmp781
        + _tmp635 * _tmp782
        + _tmp636 * _tmp783
        + _tmp637 * _tmp784
        + _tmp638 * _tmp785
        + _tmp639 * _tmp786
    )
    _hessian[21, 16] = (
        _tmp631 * _tmp787
        + _tmp632 * _tmp788
        + _tmp633 * _tmp789
        + _tmp634 * _tmp790
        + _tmp635 * _tmp791
        + _tmp636 * _tmp792
        + _tmp637 * _tmp793
        + _tmp638 * _tmp794
        + _tmp639 * _tmp795
    )
    _hessian[22, 16] = (
        _tmp631 * _tmp796
        + _tmp632 * _tmp797
        + _tmp633 * _tmp798
        + _tmp634 * _tmp799
        + _tmp635 * _tmp800
        + _tmp636 * _tmp801
        + _tmp637 * _tmp802
        + _tmp638 * _tmp803
        + _tmp639 * _tmp804
    )
    _hessian[23, 16] = (
        _tmp631 * _tmp805
        + _tmp632 * _tmp806
        + _tmp633 * _tmp807
        + _tmp634 * _tmp808
        + _tmp635 * _tmp809
        + _tmp636 * _tmp810
        + _tmp637 * _tmp811
        + _tmp638 * _tmp812
        + _tmp639 * _tmp813
    )
    _hessian[0, 17] = 0
    _hessian[1, 17] = 0
    _hessian[2, 17] = 0
    _hessian[3, 17] = 0
    _hessian[4, 17] = 0
    _hessian[5, 17] = 0
    _hessian[6, 17] = 0
    _hessian[7, 17] = 0
    _hessian[8, 17] = 0
    _hessian[9, 17] = 0
    _hessian[10, 17] = 0
    _hessian[11, 17] = 0
    _hessian[12, 17] = 0
    _hessian[13, 17] = 0
    _hessian[14, 17] = 0
    _hessian[15, 17] = 0
    _hessian[16, 17] = 0
    _hessian[17, 17] = (
        _tmp640 ** 2
        + _tmp641 ** 2
        + _tmp642 ** 2
        + _tmp643 ** 2
        + _tmp644 ** 2
        + _tmp645 ** 2
        + _tmp646 ** 2
        + _tmp647 ** 2
        + _tmp648 ** 2
    )
    _hessian[18, 17] = (
        _tmp640 * _tmp701
        + _tmp641 * _tmp702
        + _tmp642 * _tmp703
        + _tmp643 * _tmp704
        + _tmp644 * _tmp705
        + _tmp645 * _tmp706
        + _tmp646 * _tmp707
        + _tmp647 * _tmp708
        + _tmp648 * _tmp709
    )
    _hessian[19, 17] = (
        _tmp640 * _tmp740
        + _tmp641 * _tmp741
        + _tmp642 * _tmp742
        + _tmp643 * _tmp743
        + _tmp644 * _tmp744
        + _tmp645 * _tmp745
        + _tmp646 * _tmp746
        + _tmp647 * _tmp747
        + _tmp648 * _tmp748
    )
    _hessian[20, 17] = (
        _tmp640 * _tmp778
        + _tmp641 * _tmp779
        + _tmp642 * _tmp780
        + _tmp643 * _tmp781
        + _tmp644 * _tmp782
        + _tmp645 * _tmp783
        + _tmp646 * _tmp784
        + _tmp647 * _tmp785
        + _tmp648 * _tmp786
    )
    _hessian[21, 17] = (
        _tmp640 * _tmp787
        + _tmp641 * _tmp788
        + _tmp642 * _tmp789
        + _tmp643 * _tmp790
        + _tmp644 * _tmp791
        + _tmp645 * _tmp792
        + _tmp646 * _tmp793
        + _tmp647 * _tmp794
        + _tmp648 * _tmp795
    )
    _hessian[22, 17] = (
        _tmp640 * _tmp796
        + _tmp641 * _tmp797
        + _tmp642 * _tmp798
        + _tmp643 * _tmp799
        + _tmp644 * _tmp800
        + _tmp645 * _tmp801
        + _tmp646 * _tmp802
        + _tmp647 * _tmp803
        + _tmp648 * _tmp804
    )
    _hessian[23, 17] = (
        _tmp640 * _tmp805
        + _tmp641 * _tmp806
        + _tmp642 * _tmp807
        + _tmp643 * _tmp808
        + _tmp644 * _tmp809
        + _tmp645 * _tmp810
        + _tmp646 * _tmp811
        + _tmp647 * _tmp812
        + _tmp648 * _tmp813
    )
    _hessian[0, 18] = 0
    _hessian[1, 18] = 0
    _hessian[2, 18] = 0
    _hessian[3, 18] = 0
    _hessian[4, 18] = 0
    _hessian[5, 18] = 0
    _hessian[6, 18] = 0
    _hessian[7, 18] = 0
    _hessian[8, 18] = 0
    _hessian[9, 18] = 0
    _hessian[10, 18] = 0
    _hessian[11, 18] = 0
    _hessian[12, 18] = 0
    _hessian[13, 18] = 0
    _hessian[14, 18] = 0
    _hessian[15, 18] = 0
    _hessian[16, 18] = 0
    _hessian[17, 18] = 0
    _hessian[18, 18] = (
        _tmp701 ** 2
        + _tmp702 ** 2
        + _tmp703 ** 2
        + _tmp704 ** 2
        + _tmp705 ** 2
        + _tmp706 ** 2
        + _tmp707 ** 2
        + _tmp708 ** 2
        + _tmp709 ** 2
    )
    _hessian[19, 18] = (
        _tmp701 * _tmp740
        + _tmp702 * _tmp741
        + _tmp703 * _tmp742
        + _tmp704 * _tmp743
        + _tmp705 * _tmp744
        + _tmp706 * _tmp745
        + _tmp707 * _tmp746
        + _tmp708 * _tmp747
        + _tmp709 * _tmp748
    )
    _hessian[20, 18] = (
        _tmp701 * _tmp778
        + _tmp702 * _tmp779
        + _tmp703 * _tmp780
        + _tmp704 * _tmp781
        + _tmp705 * _tmp782
        + _tmp706 * _tmp783
        + _tmp707 * _tmp784
        + _tmp708 * _tmp785
        + _tmp709 * _tmp786
    )
    _hessian[21, 18] = (
        _tmp701 * _tmp787
        + _tmp702 * _tmp788
        + _tmp703 * _tmp789
        + _tmp704 * _tmp790
        + _tmp705 * _tmp791
        + _tmp706 * _tmp792
        + _tmp707 * _tmp793
        + _tmp708 * _tmp794
        + _tmp709 * _tmp795
    )
    _hessian[22, 18] = (
        _tmp701 * _tmp796
        + _tmp702 * _tmp797
        + _tmp703 * _tmp798
        + _tmp704 * _tmp799
        + _tmp705 * _tmp800
        + _tmp706 * _tmp801
        + _tmp707 * _tmp802
        + _tmp708 * _tmp803
        + _tmp709 * _tmp804
    )
    _hessian[23, 18] = (
        _tmp701 * _tmp805
        + _tmp702 * _tmp806
        + _tmp703 * _tmp807
        + _tmp704 * _tmp808
        + _tmp705 * _tmp809
        + _tmp706 * _tmp810
        + _tmp707 * _tmp811
        + _tmp708 * _tmp812
        + _tmp709 * _tmp813
    )
    _hessian[0, 19] = 0
    _hessian[1, 19] = 0
    _hessian[2, 19] = 0
    _hessian[3, 19] = 0
    _hessian[4, 19] = 0
    _hessian[5, 19] = 0
    _hessian[6, 19] = 0
    _hessian[7, 19] = 0
    _hessian[8, 19] = 0
    _hessian[9, 19] = 0
    _hessian[10, 19] = 0
    _hessian[11, 19] = 0
    _hessian[12, 19] = 0
    _hessian[13, 19] = 0
    _hessian[14, 19] = 0
    _hessian[15, 19] = 0
    _hessian[16, 19] = 0
    _hessian[17, 19] = 0
    _hessian[18, 19] = 0
    _hessian[19, 19] = (
        _tmp740 ** 2
        + _tmp741 ** 2
        + _tmp742 ** 2
        + _tmp743 ** 2
        + _tmp744 ** 2
        + _tmp745 ** 2
        + _tmp746 ** 2
        + _tmp747 ** 2
        + _tmp748 ** 2
    )
    _hessian[20, 19] = (
        _tmp740 * _tmp778
        + _tmp741 * _tmp779
        + _tmp742 * _tmp780
        + _tmp743 * _tmp781
        + _tmp744 * _tmp782
        + _tmp745 * _tmp783
        + _tmp746 * _tmp784
        + _tmp747 * _tmp785
        + _tmp748 * _tmp786
    )
    _hessian[21, 19] = (
        _tmp740 * _tmp787
        + _tmp741 * _tmp788
        + _tmp742 * _tmp789
        + _tmp743 * _tmp790
        + _tmp744 * _tmp791
        + _tmp745 * _tmp792
        + _tmp746 * _tmp793
        + _tmp747 * _tmp794
        + _tmp748 * _tmp795
    )
    _hessian[22, 19] = (
        _tmp740 * _tmp796
        + _tmp741 * _tmp797
        + _tmp742 * _tmp798
        + _tmp743 * _tmp799
        + _tmp744 * _tmp800
        + _tmp745 * _tmp801
        + _tmp746 * _tmp802
        + _tmp747 * _tmp803
        + _tmp748 * _tmp804
    )
    _hessian[23, 19] = (
        _tmp740 * _tmp805
        + _tmp741 * _tmp806
        + _tmp742 * _tmp807
        + _tmp743 * _tmp808
        + _tmp744 * _tmp809
        + _tmp745 * _tmp810
        + _tmp746 * _tmp811
        + _tmp747 * _tmp812
        + _tmp748 * _tmp813
    )
    _hessian[0, 20] = 0
    _hessian[1, 20] = 0
    _hessian[2, 20] = 0
    _hessian[3, 20] = 0
    _hessian[4, 20] = 0
    _hessian[5, 20] = 0
    _hessian[6, 20] = 0
    _hessian[7, 20] = 0
    _hessian[8, 20] = 0
    _hessian[9, 20] = 0
    _hessian[10, 20] = 0
    _hessian[11, 20] = 0
    _hessian[12, 20] = 0
    _hessian[13, 20] = 0
    _hessian[14, 20] = 0
    _hessian[15, 20] = 0
    _hessian[16, 20] = 0
    _hessian[17, 20] = 0
    _hessian[18, 20] = 0
    _hessian[19, 20] = 0
    _hessian[20, 20] = (
        _tmp778 ** 2
        + _tmp779 ** 2
        + _tmp780 ** 2
        + _tmp781 ** 2
        + _tmp782 ** 2
        + _tmp783 ** 2
        + _tmp784 ** 2
        + _tmp785 ** 2
        + _tmp786 ** 2
    )
    _hessian[21, 20] = (
        _tmp778 * _tmp787
        + _tmp779 * _tmp788
        + _tmp780 * _tmp789
        + _tmp781 * _tmp790
        + _tmp782 * _tmp791
        + _tmp783 * _tmp792
        + _tmp784 * _tmp793
        + _tmp785 * _tmp794
        + _tmp786 * _tmp795
    )
    _hessian[22, 20] = (
        _tmp778 * _tmp796
        + _tmp779 * _tmp797
        + _tmp780 * _tmp798
        + _tmp781 * _tmp799
        + _tmp782 * _tmp800
        + _tmp783 * _tmp801
        + _tmp784 * _tmp802
        + _tmp785 * _tmp803
        + _tmp786 * _tmp804
    )
    _hessian[23, 20] = (
        _tmp778 * _tmp805
        + _tmp779 * _tmp806
        + _tmp780 * _tmp807
        + _tmp781 * _tmp808
        + _tmp782 * _tmp809
        + _tmp783 * _tmp810
        + _tmp784 * _tmp811
        + _tmp785 * _tmp812
        + _tmp786 * _tmp813
    )
    _hessian[0, 21] = 0
    _hessian[1, 21] = 0
    _hessian[2, 21] = 0
    _hessian[3, 21] = 0
    _hessian[4, 21] = 0
    _hessian[5, 21] = 0
    _hessian[6, 21] = 0
    _hessian[7, 21] = 0
    _hessian[8, 21] = 0
    _hessian[9, 21] = 0
    _hessian[10, 21] = 0
    _hessian[11, 21] = 0
    _hessian[12, 21] = 0
    _hessian[13, 21] = 0
    _hessian[14, 21] = 0
    _hessian[15, 21] = 0
    _hessian[16, 21] = 0
    _hessian[17, 21] = 0
    _hessian[18, 21] = 0
    _hessian[19, 21] = 0
    _hessian[20, 21] = 0
    _hessian[21, 21] = (
        _tmp787 ** 2
        + _tmp788 ** 2
        + _tmp789 ** 2
        + _tmp790 ** 2
        + _tmp791 ** 2
        + _tmp792 ** 2
        + _tmp793 ** 2
        + _tmp794 ** 2
        + _tmp795 ** 2
    )
    _hessian[22, 21] = (
        _tmp787 * _tmp796
        + _tmp788 * _tmp797
        + _tmp789 * _tmp798
        + _tmp790 * _tmp799
        + _tmp791 * _tmp800
        + _tmp792 * _tmp801
        + _tmp793 * _tmp802
        + _tmp794 * _tmp803
        + _tmp795 * _tmp804
    )
    _hessian[23, 21] = (
        _tmp787 * _tmp805
        + _tmp788 * _tmp806
        + _tmp789 * _tmp807
        + _tmp790 * _tmp808
        + _tmp791 * _tmp809
        + _tmp792 * _tmp810
        + _tmp793 * _tmp811
        + _tmp794 * _tmp812
        + _tmp795 * _tmp813
    )
    _hessian[0, 22] = 0
    _hessian[1, 22] = 0
    _hessian[2, 22] = 0
    _hessian[3, 22] = 0
    _hessian[4, 22] = 0
    _hessian[5, 22] = 0
    _hessian[6, 22] = 0
    _hessian[7, 22] = 0
    _hessian[8, 22] = 0
    _hessian[9, 22] = 0
    _hessian[10, 22] = 0
    _hessian[11, 22] = 0
    _hessian[12, 22] = 0
    _hessian[13, 22] = 0
    _hessian[14, 22] = 0
    _hessian[15, 22] = 0
    _hessian[16, 22] = 0
    _hessian[17, 22] = 0
    _hessian[18, 22] = 0
    _hessian[19, 22] = 0
    _hessian[20, 22] = 0
    _hessian[21, 22] = 0
    _hessian[22, 22] = (
        _tmp796 ** 2
        + _tmp797 ** 2
        + _tmp798 ** 2
        + _tmp799 ** 2
        + _tmp800 ** 2
        + _tmp801 ** 2
        + _tmp802 ** 2
        + _tmp803 ** 2
        + _tmp804 ** 2
    )
    _hessian[23, 22] = (
        _tmp796 * _tmp805
        + _tmp797 * _tmp806
        + _tmp798 * _tmp807
        + _tmp799 * _tmp808
        + _tmp800 * _tmp809
        + _tmp801 * _tmp810
        + _tmp802 * _tmp811
        + _tmp803 * _tmp812
        + _tmp804 * _tmp813
    )
    _hessian[0, 23] = 0
    _hessian[1, 23] = 0
    _hessian[2, 23] = 0
    _hessian[3, 23] = 0
    _hessian[4, 23] = 0
    _hessian[5, 23] = 0
    _hessian[6, 23] = 0
    _hessian[7, 23] = 0
    _hessian[8, 23] = 0
    _hessian[9, 23] = 0
    _hessian[10, 23] = 0
    _hessian[11, 23] = 0
    _hessian[12, 23] = 0
    _hessian[13, 23] = 0
    _hessian[14, 23] = 0
    _hessian[15, 23] = 0
    _hessian[16, 23] = 0
    _hessian[17, 23] = 0
    _hessian[18, 23] = 0
    _hessian[19, 23] = 0
    _hessian[20, 23] = 0
    _hessian[21, 23] = 0
    _hessian[22, 23] = 0
    _hessian[23, 23] = (
        _tmp805 ** 2
        + _tmp806 ** 2
        + _tmp807 ** 2
        + _tmp808 ** 2
        + _tmp809 ** 2
        + _tmp810 ** 2
        + _tmp811 ** 2
        + _tmp812 ** 2
        + _tmp813 ** 2
    )
    _rhs = numpy.zeros((24, 1))
    _rhs[0, 0] = (
        _tmp124 * _tmp209
        + _tmp126 * _tmp211
        + _tmp128 * _tmp215
        + _tmp129 * _tmp216
        + _tmp130 * _tmp218
        + _tmp132 * _tmp222
        + _tmp133 * _tmp225
        + _tmp134 * _tmp228
        + _tmp135 * _tmp229
    )
    _rhs[1, 0] = (
        _tmp124 * _tmp260
        + _tmp126 * _tmp261
        + _tmp128 * _tmp262
        + _tmp129 * _tmp263
        + _tmp130 * _tmp265
        + _tmp132 * _tmp266
        + _tmp133 * _tmp267
        + _tmp134 * _tmp268
        + _tmp135 * _tmp270
    )
    _rhs[2, 0] = (
        _tmp124 * _tmp296
        + _tmp126 * _tmp297
        + _tmp128 * _tmp298
        + _tmp129 * _tmp299
        + _tmp130 * _tmp300
        + _tmp132 * _tmp301
        + _tmp133 * _tmp302
        + _tmp134 * _tmp303
        + _tmp135 * _tmp304
    )
    _rhs[3, 0] = (
        _tmp124 * _tmp311
        + _tmp126 * _tmp318
        + _tmp128 * _tmp325
        + _tmp129 * _tmp332
        + _tmp130 * _tmp339
        + _tmp132 * _tmp346
        + _tmp133 * _tmp353
        + _tmp134 * _tmp360
        + _tmp135 * _tmp367
    )
    _rhs[4, 0] = (
        _tmp124 * _tmp374
        + _tmp126 * _tmp381
        + _tmp128 * _tmp388
        + _tmp129 * _tmp395
        + _tmp130 * _tmp402
        + _tmp132 * _tmp409
        + _tmp133 * _tmp416
        + _tmp134 * _tmp423
        + _tmp135 * _tmp430
    )
    _rhs[5, 0] = (
        _tmp124 * _tmp437
        + _tmp126 * _tmp444
        + _tmp128 * _tmp451
        + _tmp129 * _tmp458
        + _tmp130 * _tmp465
        + _tmp132 * _tmp472
        + _tmp133 * _tmp479
        + _tmp134 * _tmp486
        + _tmp135 * _tmp493
    )
    _rhs[6, 0] = (
        _tmp124 * _tmp494
        + _tmp126 * _tmp495
        + _tmp128 * _tmp496
        + _tmp129 * _tmp497
        + _tmp130 * _tmp498
        + _tmp132 * _tmp499
        + _tmp133 * _tmp500
        + _tmp134 * _tmp501
        + _tmp135 * _tmp502
    )
    _rhs[7, 0] = (
        _tmp124 * _tmp503
        + _tmp126 * _tmp504
        + _tmp128 * _tmp505
        + _tmp129 * _tmp506
        + _tmp130 * _tmp507
        + _tmp132 * _tmp508
        + _tmp133 * _tmp509
        + _tmp134 * _tmp510
        + _tmp135 * _tmp511
    )
    _rhs[8, 0] = (
        _tmp124 * _tmp512
        + _tmp126 * _tmp513
        + _tmp128 * _tmp514
        + _tmp129 * _tmp515
        + _tmp130 * _tmp516
        + _tmp132 * _tmp517
        + _tmp133 * _tmp518
        + _tmp134 * _tmp519
        + _tmp135 * _tmp520
    )
    _rhs[9, 0] = (
        _tmp124 * _tmp547
        + _tmp126 * _tmp548
        + _tmp128 * _tmp549
        + _tmp129 * _tmp551
        + _tmp130 * _tmp552
        + _tmp132 * _tmp553
        + _tmp133 * _tmp554
        + _tmp134 * _tmp555
        + _tmp135 * _tmp556
    )
    _rhs[10, 0] = (
        _tmp124 * _tmp567
        + _tmp126 * _tmp568
        + _tmp128 * _tmp569
        + _tmp129 * _tmp570
        + _tmp130 * _tmp571
        + _tmp132 * _tmp572
        + _tmp133 * _tmp573
        + _tmp134 * _tmp575
        + _tmp135 * _tmp576
    )
    _rhs[11, 0] = (
        _tmp124 * _tmp586
        + _tmp126 * _tmp587
        + _tmp128 * _tmp588
        + _tmp129 * _tmp589
        + _tmp130 * _tmp590
        + _tmp132 * _tmp591
        + _tmp133 * _tmp592
        + _tmp134 * _tmp593
        + _tmp135 * _tmp594
    )
    _rhs[12, 0] = (
        _tmp124 * _tmp595
        + _tmp126 * _tmp596
        + _tmp128 * _tmp597
        + _tmp129 * _tmp598
        + _tmp130 * _tmp599
        + _tmp132 * _tmp600
        + _tmp133 * _tmp601
        + _tmp134 * _tmp602
        + _tmp135 * _tmp603
    )
    _rhs[13, 0] = (
        _tmp124 * _tmp604
        + _tmp126 * _tmp605
        + _tmp128 * _tmp606
        + _tmp129 * _tmp607
        + _tmp130 * _tmp608
        + _tmp132 * _tmp609
        + _tmp133 * _tmp610
        + _tmp134 * _tmp611
        + _tmp135 * _tmp612
    )
    _rhs[14, 0] = (
        _tmp124 * _tmp613
        + _tmp126 * _tmp614
        + _tmp128 * _tmp615
        + _tmp129 * _tmp616
        + _tmp130 * _tmp617
        + _tmp132 * _tmp618
        + _tmp133 * _tmp619
        + _tmp134 * _tmp620
        + _tmp135 * _tmp621
    )
    _rhs[15, 0] = (
        _tmp124 * _tmp622
        + _tmp126 * _tmp623
        + _tmp128 * _tmp624
        + _tmp129 * _tmp625
        + _tmp130 * _tmp626
        + _tmp132 * _tmp627
        + _tmp133 * _tmp628
        + _tmp134 * _tmp629
        + _tmp135 * _tmp630
    )
    _rhs[16, 0] = (
        _tmp124 * _tmp631
        + _tmp126 * _tmp632
        + _tmp128 * _tmp633
        + _tmp129 * _tmp634
        + _tmp130 * _tmp635
        + _tmp132 * _tmp636
        + _tmp133 * _tmp637
        + _tmp134 * _tmp638
        + _tmp135 * _tmp639
    )
    _rhs[17, 0] = (
        _tmp124 * _tmp640
        + _tmp126 * _tmp641
        + _tmp128 * _tmp642
        + _tmp129 * _tmp643
        + _tmp130 * _tmp644
        + _tmp132 * _tmp645
        + _tmp133 * _tmp646
        + _tmp134 * _tmp647
        + _tmp135 * _tmp648
    )
    _rhs[18, 0] = (
        _tmp124 * _tmp701
        + _tmp126 * _tmp702
        + _tmp128 * _tmp703
        + _tmp129 * _tmp704
        + _tmp130 * _tmp705
        + _tmp132 * _tmp706
        + _tmp133 * _tmp707
        + _tmp134 * _tmp708
        + _tmp135 * _tmp709
    )
    _rhs[19, 0] = (
        _tmp124 * _tmp740
        + _tmp126 * _tmp741
        + _tmp128 * _tmp742
        + _tmp129 * _tmp743
        + _tmp130 * _tmp744
        + _tmp132 * _tmp745
        + _tmp133 * _tmp746
        + _tmp134 * _tmp747
        + _tmp135 * _tmp748
    )
    _rhs[20, 0] = (
        _tmp124 * _tmp778
        + _tmp126 * _tmp779
        + _tmp128 * _tmp780
        + _tmp129 * _tmp781
        + _tmp130 * _tmp782
        + _tmp132 * _tmp783
        + _tmp133 * _tmp784
        + _tmp134 * _tmp785
        + _tmp135 * _tmp786
    )
    _rhs[21, 0] = (
        _tmp124 * _tmp787
        + _tmp126 * _tmp788
        + _tmp128 * _tmp789
        + _tmp129 * _tmp790
        + _tmp130 * _tmp791
        + _tmp132 * _tmp792
        + _tmp133 * _tmp793
        + _tmp134 * _tmp794
        + _tmp135 * _tmp795
    )
    _rhs[22, 0] = (
        _tmp124 * _tmp796
        + _tmp126 * _tmp797
        + _tmp128 * _tmp798
        + _tmp129 * _tmp799
        + _tmp130 * _tmp800
        + _tmp132 * _tmp801
        + _tmp133 * _tmp802
        + _tmp134 * _tmp803
        + _tmp135 * _tmp804
    )
    _rhs[23, 0] = (
        _tmp124 * _tmp805
        + _tmp126 * _tmp806
        + _tmp128 * _tmp807
        + _tmp129 * _tmp808
        + _tmp130 * _tmp809
        + _tmp132 * _tmp810
        + _tmp133 * _tmp811
        + _tmp134 * _tmp812
        + _tmp135 * _tmp813
    )
    return _res, _jacobian, _hessian, _rhs
