// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     backends/cpp/templates/function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Composition of two elements in the group.
 *
 * Returns:
 *     res_D_b: (6x6) jacobian of res (6) wrt arg b (6)
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 6, 6> ComposePose3Jacobian1(const sym::Pose3<Scalar>& a,
                                                  const sym::Pose3<Scalar>& b) {
  // Total ops: 89

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();

  // Intermediate terms (20)
  const Scalar _tmp0 = -_a[0] * _b[3] - _a[1] * _b[2] + _a[2] * _b[1] - _a[3] * _b[0];
  const Scalar _tmp1 = -_a[0] * _b[2] + _a[1] * _b[3] + _a[2] * _b[0] + _a[3] * _b[1];
  const Scalar _tmp2 = _a[0] * _b[1] - _a[1] * _b[0] + _a[2] * _b[3] + _a[3] * _b[2];
  const Scalar _tmp3 = _a[0] * _b[0] + _a[1] * _b[1] + _a[2] * _b[2];
  const Scalar _tmp4 = -_a[3] * _b[3];
  const Scalar _tmp5 = _tmp3 + _tmp4;
  const Scalar _tmp6 = _tmp3 + _tmp4;
  const Scalar _tmp7 = std::pow(_tmp0, Scalar(2)) + std::pow(_tmp1, Scalar(2)) +
                       std::pow(_tmp2, Scalar(2)) + _tmp5 * _tmp6;
  const Scalar _tmp8 = _tmp2 * _tmp5 - _tmp2 * _tmp6;
  const Scalar _tmp9 = _tmp1 * _tmp5 - _tmp1 * _tmp6;
  const Scalar _tmp10 = _tmp0 * _tmp5 - _tmp0 * _tmp6;
  const Scalar _tmp11 = std::pow(_a[2], Scalar(2));
  const Scalar _tmp12 = std::pow(_a[1], Scalar(2));
  const Scalar _tmp13 = _a[0] * _a[1];
  const Scalar _tmp14 = _a[2] * _a[3];
  const Scalar _tmp15 = _a[0] * _a[2];
  const Scalar _tmp16 = _a[1] * _a[3];
  const Scalar _tmp17 = std::pow(_a[0], Scalar(2)) + Scalar(-1) / Scalar(2);
  const Scalar _tmp18 = _a[1] * _a[2];
  const Scalar _tmp19 = _a[0] * _a[3];

  // Output terms (1)
  Eigen::Matrix<Scalar, 6, 6> _res_D_b;

  _res_D_b(0, 0) = _tmp7;
  _res_D_b(1, 0) = _tmp8;
  _res_D_b(2, 0) = -_tmp9;
  _res_D_b(3, 0) = 0;
  _res_D_b(4, 0) = 0;
  _res_D_b(5, 0) = 0;
  _res_D_b(0, 1) = -_tmp8;
  _res_D_b(1, 1) = _tmp7;
  _res_D_b(2, 1) = -_tmp10;
  _res_D_b(3, 1) = 0;
  _res_D_b(4, 1) = 0;
  _res_D_b(5, 1) = 0;
  _res_D_b(0, 2) = _tmp9;
  _res_D_b(1, 2) = _tmp10;
  _res_D_b(2, 2) = _tmp7;
  _res_D_b(3, 2) = 0;
  _res_D_b(4, 2) = 0;
  _res_D_b(5, 2) = 0;
  _res_D_b(0, 3) = 0;
  _res_D_b(1, 3) = 0;
  _res_D_b(2, 3) = 0;
  _res_D_b(3, 3) = -2 * _tmp11 - 2 * _tmp12 + 1;
  _res_D_b(4, 3) = 2 * _tmp13 + 2 * _tmp14;
  _res_D_b(5, 3) = 2 * _tmp15 - 2 * _tmp16;
  _res_D_b(0, 4) = 0;
  _res_D_b(1, 4) = 0;
  _res_D_b(2, 4) = 0;
  _res_D_b(3, 4) = 2 * _tmp13 - 2 * _tmp14;
  _res_D_b(4, 4) = -2 * _tmp11 - 2 * _tmp17;
  _res_D_b(5, 4) = 2 * _tmp18 + 2 * _tmp19;
  _res_D_b(0, 5) = 0;
  _res_D_b(1, 5) = 0;
  _res_D_b(2, 5) = 0;
  _res_D_b(3, 5) = 2 * _tmp15 + 2 * _tmp16;
  _res_D_b(4, 5) = 2 * _tmp18 - 2 * _tmp19;
  _res_D_b(5, 5) = -2 * _tmp12 - 2 * _tmp17;

  return _res_D_b;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
