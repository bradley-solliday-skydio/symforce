// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

#include <sym/pose3.h>

namespace sym {

/**
 * Composition of two elements in the group.
 *
 * Returns:
 *     Element: a @ b
 *     res_D_b: (6x6) jacobian of res (6) wrt arg b (6)
 */
template <typename Scalar>
sym::Pose3<Scalar> ComposePose3WithJacobian1(const sym::Pose3<Scalar>& a,
                                             const sym::Pose3<Scalar>& b,
                                             Eigen::Matrix<Scalar, 6, 6>* const res_D_b = nullptr) {
  // Total ops: 133

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _a = a.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _b = b.Data();

  // Intermediate terms (35)
  const Scalar _tmp0 = _a[2] * _b[1];
  const Scalar _tmp1 = _a[0] * _b[3];
  const Scalar _tmp2 = _a[1] * _b[2];
  const Scalar _tmp3 = _a[3] * _b[0];
  const Scalar _tmp4 = -_a[0] * _b[2] + _a[1] * _b[3] + _a[2] * _b[0] + _a[3] * _b[1];
  const Scalar _tmp5 = _a[0] * _b[1] - _a[1] * _b[0] + _a[2] * _b[3] + _a[3] * _b[2];
  const Scalar _tmp6 = _a[0] * _b[0] + _a[1] * _b[1] + _a[2] * _b[2];
  const Scalar _tmp7 = _a[3] * _b[3];
  const Scalar _tmp8 = std::pow(_a[2], Scalar(2));
  const Scalar _tmp9 = -2 * _tmp8;
  const Scalar _tmp10 = std::pow(_a[1], Scalar(2));
  const Scalar _tmp11 = -2 * _tmp10;
  const Scalar _tmp12 = _a[0] * _a[2];
  const Scalar _tmp13 = 2 * _tmp12;
  const Scalar _tmp14 = _a[1] * _a[3];
  const Scalar _tmp15 = 2 * _tmp14;
  const Scalar _tmp16 = _a[0] * _a[1];
  const Scalar _tmp17 = 2 * _tmp16;
  const Scalar _tmp18 = _a[2] * _a[3];
  const Scalar _tmp19 = 2 * _tmp18;
  const Scalar _tmp20 = std::pow(_a[0], Scalar(2));
  const Scalar _tmp21 = 1 - 2 * _tmp20;
  const Scalar _tmp22 = _a[1] * _a[2];
  const Scalar _tmp23 = 2 * _tmp22;
  const Scalar _tmp24 = _a[0] * _a[3];
  const Scalar _tmp25 = 2 * _tmp24;
  const Scalar _tmp26 = _tmp0 - _tmp1 - _tmp2 - _tmp3;
  const Scalar _tmp27 = -_tmp7;
  const Scalar _tmp28 = _tmp27 + _tmp6;
  const Scalar _tmp29 = _tmp27 + _tmp6;
  const Scalar _tmp30 = std::pow(_tmp26, Scalar(2)) + _tmp28 * _tmp29 + std::pow(_tmp4, Scalar(2)) +
                        std::pow(_tmp5, Scalar(2));
  const Scalar _tmp31 = _tmp28 * _tmp5 - _tmp29 * _tmp5;
  const Scalar _tmp32 = _tmp28 * _tmp4 - _tmp29 * _tmp4;
  const Scalar _tmp33 = _tmp26 * _tmp28 - _tmp26 * _tmp29;
  const Scalar _tmp34 = _tmp8 + Scalar(-1) / Scalar(2);

  // Output terms (2)
  Eigen::Matrix<Scalar, 7, 1> _res;

  _res[0] = -_tmp0 + _tmp1 + _tmp2 + _tmp3;
  _res[1] = _tmp4;
  _res[2] = _tmp5;
  _res[3] = -_tmp6 + _tmp7;
  _res[4] =
      _a[4] + _b[4] * (_tmp11 + _tmp9 + 1) + _b[5] * (_tmp17 - _tmp19) + _b[6] * (_tmp13 + _tmp15);
  _res[5] =
      _a[5] + _b[4] * (_tmp17 + _tmp19) + _b[5] * (_tmp21 + _tmp9) + _b[6] * (_tmp23 - _tmp25);
  _res[6] =
      _a[6] + _b[4] * (_tmp13 - _tmp15) + _b[5] * (_tmp23 + _tmp25) + _b[6] * (_tmp11 + _tmp21);

  if (res_D_b != nullptr) {
    Eigen::Matrix<Scalar, 6, 6>& _res_D_b = (*res_D_b);

    _res_D_b(0, 0) = _tmp30;
    _res_D_b(1, 0) = _tmp31;
    _res_D_b(2, 0) = -_tmp32;
    _res_D_b(3, 0) = 0;
    _res_D_b(4, 0) = 0;
    _res_D_b(5, 0) = 0;
    _res_D_b(0, 1) = -_tmp31;
    _res_D_b(1, 1) = _tmp30;
    _res_D_b(2, 1) = -_tmp33;
    _res_D_b(3, 1) = 0;
    _res_D_b(4, 1) = 0;
    _res_D_b(5, 1) = 0;
    _res_D_b(0, 2) = _tmp32;
    _res_D_b(1, 2) = _tmp33;
    _res_D_b(2, 2) = _tmp30;
    _res_D_b(3, 2) = 0;
    _res_D_b(4, 2) = 0;
    _res_D_b(5, 2) = 0;
    _res_D_b(0, 3) = 0;
    _res_D_b(1, 3) = 0;
    _res_D_b(2, 3) = 0;
    _res_D_b(3, 3) = -2 * _tmp10 - 2 * _tmp34;
    _res_D_b(4, 3) = 2 * _tmp16 + 2 * _tmp18;
    _res_D_b(5, 3) = 2 * _tmp12 - 2 * _tmp14;
    _res_D_b(0, 4) = 0;
    _res_D_b(1, 4) = 0;
    _res_D_b(2, 4) = 0;
    _res_D_b(3, 4) = 2 * _tmp16 - 2 * _tmp18;
    _res_D_b(4, 4) = -2 * _tmp20 - 2 * _tmp34;
    _res_D_b(5, 4) = 2 * _tmp22 + 2 * _tmp24;
    _res_D_b(0, 5) = 0;
    _res_D_b(1, 5) = 0;
    _res_D_b(2, 5) = 0;
    _res_D_b(3, 5) = 2 * _tmp12 + 2 * _tmp14;
    _res_D_b(4, 5) = 2 * _tmp22 - 2 * _tmp24;
    _res_D_b(5, 5) = -2 * _tmp10 - 2 * _tmp20 + 1;
  }

  return sym::Pose3<Scalar>(_res);
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
